<?php
error_reporting(0);
session_start();
$id=$_SESSION['email'];
require "connection.php";
$sql="SELECT * FROM registration WHERE id='$id'";
$query=mysqli_query($con,$sql);
$row=mysqli_num_rows($row);
$result=mysqli_fetch_assoc($query);

$email=$_SESSION['email'];
if($result == $email){
      // echo("<script>alert('hi')</script>");
      header("location:login.php");
}
?>
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Java Language</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="assets/css/custom.css">
    <link rel="stylesheet" href="assets/css/languages.css">
  </head>
  <body>
    <main class="container-fluid">
        <div class="row">
            <!-- sidebar menu section  -->
            <div class="offcanvas offcanvas-start offcanvas" id="demo"    >
              <div class="offcanvas-header">
                <h1 class="offcanvas-title">Java Tutorial</h1>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
              </div>
              <div class="offcanvas-body">
                <div class="col-lg-3 ">
                  <div class="accordion" id="accordionExample">
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                              Java Introduction
                          </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#first1" class="list-group-item list-group-item-action">Getting Started with Java</a>
                                  <a href="#first2" class="list-group-item list-group-item-action">Your First Java Program</a>
                                  <a href="#first3" class="list-group-item list-group-item-action">Java Comments</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                              Java Fundamentals
                          </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#second1" class="list-group-item list-group-item-action">Java Variables and Literals</a>
                                  <a href="#second2" class="list-group-item list-group-item-action">Java Data Types (Primitive)</a>
                                  <a href="#second3" class="list-group-item list-group-item-action">Java Operators</a>
                                  <a href="#second4" class="list-group-item list-group-item-action">Java Basic Input and Output</a>
                                  <a href="#second5" class="list-group-item list-group-item-action">Java Expressions, Statements and Blocks</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                              Java Flow Control
                          </button>
                        </h2>
                        <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#third1" class="list-group-item list-group-item-action">Java if...else Statement</a>
                                  <a href="#third1" class="list-group-item list-group-item-action">Java Ternary Operator</a>
                                  <a href="#third2" class="list-group-item list-group-item-action">Java for Loop</a>
                                  <a href="#third2" class="list-group-item list-group-item-action">Java for-each Loop</a>
                                  <a href="#third3" class="list-group-item list-group-item-action">Java while and do...while Loop</a>
                                  <a href="#third4" class="list-group-item list-group-item-action">Java break statement</a>
                                  <a href="#third4" class="list-group-item list-group-item-action">Java continue statement</a>
                                  <a href="#third5" class="list-group-item list-group-item-action">Java switch Statement</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
                              Java Arrays
                          </button>
                        </h2>
                        <div id="collapseFour" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#four1" class="list-group-item list-group-item-action">Java Arrays</a>
                                  <a href="#four2" class="list-group-item list-group-item-action">Java Multidimensional Arrays</a>
                                  <a href="#four3" class="list-group-item list-group-item-action">Java Copy Arrays</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="true" aria-controls="collapseFive">
                              Java OOP(I)
                          </button>
                        </h2>
                        <div id="collapseFive" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#five1" class="list-group-item list-group-item-action">Java Class and Objects</a>
                                  <a href="#five2" class="list-group-item list-group-item-action">Java Methods</a>
                                  <a href="#five3" class="list-group-item list-group-item-action">Java Method Overloading</a>
                                  <a href="#five4" class="list-group-item list-group-item-action">Java Constructors</a>
                                  <a href="#five5" class="list-group-item list-group-item-action">Java Static Keyword</a>
                                  <a href="#five6" class="list-group-item list-group-item-action">Java Strings</a>
                                  <a href="#five7" class="list-group-item list-group-item-action">Java Access Modifiers</a>
                                  <a href="#five8" class="list-group-item list-group-item-action">Java this Keyword</a>
                                  <a href="#five9" class="list-group-item list-group-item-action">Java final keyword</a>
                                  <a href="#five10" class="list-group-item list-group-item-action">Java Recursion</a>
                                  <a href="#five11" class="list-group-item list-group-item-action">Java instanceof Operator</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="true" aria-controls="collapseSix">
                              Java OOP(II)
                          </button>
                        </h2>
                        <div id="collapseSix" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#six1" class="list-group-item list-group-item-action">Java Inheritance</a>
                                  <a href="#six2" class="list-group-item list-group-item-action">Java Method Overriding</a>
                                  <a href="#six3" class="list-group-item list-group-item-action">Java super</a>
                                  <a href="#six4" class="list-group-item list-group-item-action">Java Abstract Class and Abstract Methods</a>
                                  <a href="#six5" class="list-group-item list-group-item-action">Java Interface</a>
                                  <a href="#six6" class="list-group-item list-group-item-action">Java Polymorphism</a>
                                  <a href="#six7" class="list-group-item list-group-item-action">Java Encapsulation</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeven" aria-expanded="true" aria-controls="collapseSeven">
                              Java OOP(III)
                          </button>
                        </h2>
                        <div id="collapseSeven" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#seven1" class="list-group-item list-group-item-action">Java Nested and Inner Class</a>
                                  <a href="#seven2" class="list-group-item list-group-item-action">Java Nested Static Class</a>
                                  <a href="#seven3" class="list-group-item list-group-item-action">Java Anonymous Class</a>
                                  <a href="#seven4" class="list-group-item list-group-item-action">Java Singleton Class</a>
                                  <a href="#seven5" class="list-group-item list-group-item-action">Java enums</a>
                                  <a href="#seven6" class="list-group-item list-group-item-action">Java enum Constructor</a>
                                  <a href="#seven7" class="list-group-item list-group-item-action">Java enum Strings</a>
                                  <a href="#seven8" class="list-group-item list-group-item-action">Java Reflection</a>
                                  <a href="#seven9" class="list-group-item list-group-item-action">Java Package
  </a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseEight" aria-expanded="true" aria-controls="collapseEight">
                              Java Exception Handling
                          </button>
                        </h2>
                        <div id="collapseEight" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#eight1" class="list-group-item list-group-item-action">Java Exceptions</a>
                                  <a href="#eight2" class="list-group-item list-group-item-action">Java Exception Handling</a>
                                  <a href="#eight3" class="list-group-item list-group-item-action">Java try...catch</a>
                                  <a href="#eight4" class="list-group-item list-group-item-action">Java throw and throws</a>
                                  <a href="#eight5" class="list-group-item list-group-item-action">Java catch Multiple Exceptions</a>
                                  <a href="#eight6" class="list-group-item list-group-item-action">Java try-with-resources</a>
                                  <a href="#eight7" class="list-group-item list-group-item-action">Java Annotations</a>
                                  <a href="#eight8" class="list-group-item list-group-item-action">Java Annotation Types</a>
                                  <a href="#eight9" class="list-group-item list-group-item-action">Java Logging</a>
                                  <a href="#eight10" class="list-group-item list-group-item-action">Java Assertions</a>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseNine" aria-expanded="true" aria-controls="collapseNine">
                              Java Reader/Writer
                          </button>
                        </h2>
                        <div id="collapseNine" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                          <div class="accordion-body">
                              <div class="list-group">
                                  <a href="#nine1" class="list-group-item list-group-item-action">Java File Class</a>
                                  <a href="#nine2" class="list-group-item list-group-item-action">Java Reader Class</a>
                                  <a href="#nine3" class="list-group-item list-group-item-action">Java Writer Class</a>
                                  <a href="#nine4" class="list-group-item list-group-item-action">Java InputStreamReader Class</a>
                                  <a href="#nine5" class="list-group-item list-group-item-action">Java OutputStreamWriter Class</a>
                                  <a href="#nine6" class="list-group-item list-group-item-action">Java FileReader Class</a>
                                  <a href="#nine7" class="list-group-item list-group-item-action">Java FileWriter Class</a>
                                  <a href="#nine8" class="list-group-item list-group-item-action">Java BufferedReader</a>
                                  <a href="#nine9" class="list-group-item list-group-item-action">Java BufferedWriter Class</a>
                                  <a href="#nine10" class="list-group-item list-group-item-action">Java StringReader Class</a>
                                  <a href="#nine11" class="list-group-item list-group-item-action">Java StringWriter Class</a>
                                  <a href="#nine12" class="list-group-item list-group-item-action">Java PrintWriter Class</a>
                              </div>
                          </div>
                        </div>
                      </div>
                  </div>  
              </div>
              </div>
            </div>

            <button class="offcanvas-button d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#demo">
              <i class="fa-solid fa-list"></i>
            </button>



            <div class="col-lg-3 large-screen">
                <div class="accordion" id="accordionExample">
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            Java Introduction
                        </button>
                      </h2>
                      <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#first1" class="list-group-item list-group-item-action">Getting Started with Java</a>
                                <a href="#first2" class="list-group-item list-group-item-action">Your First Java Program</a>
                                <a href="#first3" class="list-group-item list-group-item-action">Java Comments</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                            Java Fundamentals
                        </button>
                      </h2>
                      <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#second1" class="list-group-item list-group-item-action">Java Variables and Literals</a>
                                <a href="#second2" class="list-group-item list-group-item-action">Java Data Types (Primitive)</a>
                                <a href="#second3" class="list-group-item list-group-item-action">Java Operators</a>
                                <a href="#second4" class="list-group-item list-group-item-action">Java Basic Input and Output</a>
                                <a href="#second5" class="list-group-item list-group-item-action">Java Expressions, Statements and Blocks</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                            Java Flow Control
                        </button>
                      </h2>
                      <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#third1" class="list-group-item list-group-item-action">Java if...else Statement</a>
                                <a href="#third1" class="list-group-item list-group-item-action">Java Ternary Operator</a>
                                <a href="#third2" class="list-group-item list-group-item-action">Java for Loop</a>
                                <a href="#third2" class="list-group-item list-group-item-action">Java for-each Loop</a>
                                <a href="#third3" class="list-group-item list-group-item-action">Java while and do...while Loop</a>
                                <a href="#third4" class="list-group-item list-group-item-action">Java break statement</a>
                                <a href="#third4" class="list-group-item list-group-item-action">Java continue statement</a>
                                <a href="#third5" class="list-group-item list-group-item-action">Java switch Statement</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
                            Java Arrays
                        </button>
                      </h2>
                      <div id="collapseFour" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#four1" class="list-group-item list-group-item-action">Java Arrays</a>
                                <a href="#four2" class="list-group-item list-group-item-action">Java Multidimensional Arrays</a>
                                <a href="#four3" class="list-group-item list-group-item-action">Java Copy Arrays</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="true" aria-controls="collapseFive">
                            Java OOP(I)
                        </button>
                      </h2>
                      <div id="collapseFive" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#five1" class="list-group-item list-group-item-action">Java Class and Objects</a>
                                <a href="#five2" class="list-group-item list-group-item-action">Java Methods</a>
                                <a href="#five3" class="list-group-item list-group-item-action">Java Method Overloading</a>
                                <a href="#five4" class="list-group-item list-group-item-action">Java Constructors</a>
                                <a href="#five5" class="list-group-item list-group-item-action">Java Static Keyword</a>
                                <a href="#five6" class="list-group-item list-group-item-action">Java Strings</a>
                                <a href="#five7" class="list-group-item list-group-item-action">Java Access Modifiers</a>
                                <a href="#five8" class="list-group-item list-group-item-action">Java this Keyword</a>
                                <a href="#five9" class="list-group-item list-group-item-action">Java final keyword</a>
                                <a href="#five10" class="list-group-item list-group-item-action">Java Recursion</a>
                                <a href="#five11" class="list-group-item list-group-item-action">Java instanceof Operator</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="true" aria-controls="collapseSix">
                            Java OOP(II)
                        </button>
                      </h2>
                      <div id="collapseSix" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#six1" class="list-group-item list-group-item-action">Java Inheritance</a>
                                <a href="#six2" class="list-group-item list-group-item-action">Java Method Overriding</a>
                                <a href="#six3" class="list-group-item list-group-item-action">Java super</a>
                                <a href="#six4" class="list-group-item list-group-item-action">Java Abstract Class and Abstract Methods</a>
                                <a href="#six5" class="list-group-item list-group-item-action">Java Interface</a>
                                <a href="#six6" class="list-group-item list-group-item-action">Java Polymorphism</a>
                                <a href="#six7" class="list-group-item list-group-item-action">Java Encapsulation</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeven" aria-expanded="true" aria-controls="collapseSeven">
                            Java OOP(III)
                        </button>
                      </h2>
                      <div id="collapseSeven" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#seven1" class="list-group-item list-group-item-action">Java Nested and Inner Class</a>
                                <a href="#seven2" class="list-group-item list-group-item-action">Java Nested Static Class</a>
                                <a href="#seven3" class="list-group-item list-group-item-action">Java Anonymous Class</a>
                                <a href="#seven4" class="list-group-item list-group-item-action">Java Singleton Class</a>
                                <a href="#seven5" class="list-group-item list-group-item-action">Java enums</a>
                                <a href="#seven6" class="list-group-item list-group-item-action">Java enum Constructor</a>
                                <a href="#seven7" class="list-group-item list-group-item-action">Java enum Strings</a>
                                <a href="#seven8" class="list-group-item list-group-item-action">Java Reflection</a>
                                <a href="#seven9" class="list-group-item list-group-item-action">Java Package
</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseEight" aria-expanded="true" aria-controls="collapseEight">
                            Java Exception Handling
                        </button>
                      </h2>
                      <div id="collapseEight" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#eight1" class="list-group-item list-group-item-action">Java Exceptions</a>
                                <a href="#eight2" class="list-group-item list-group-item-action">Java Exception Handling</a>
                                <a href="#eight3" class="list-group-item list-group-item-action">Java try...catch</a>
                                <a href="#eight4" class="list-group-item list-group-item-action">Java throw and throws</a>
                                <a href="#eight5" class="list-group-item list-group-item-action">Java catch Multiple Exceptions</a>
                                <a href="#eight6" class="list-group-item list-group-item-action">Java try-with-resources</a>
                                <a href="#eight7" class="list-group-item list-group-item-action">Java Annotations</a>
                                <a href="#eight8" class="list-group-item list-group-item-action">Java Annotation Types</a>
                                <a href="#eight9" class="list-group-item list-group-item-action">Java Logging</a>
                                <a href="#eight10" class="list-group-item list-group-item-action">Java Assertions</a>
                            </div>
                        </div>
                      </div>
                    </div>
                    <div class="accordion-item">
                      <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseNine" aria-expanded="true" aria-controls="collapseNine">
                            Java Reader/Writer
                        </button>
                      </h2>
                      <div id="collapseNine" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="list-group">
                                <a href="#nine1" class="list-group-item list-group-item-action">Java File Class</a>
                                <a href="#nine2" class="list-group-item list-group-item-action">Java Reader Class</a>
                                <a href="#nine3" class="list-group-item list-group-item-action">Java Writer Class</a>
                                <a href="#nine4" class="list-group-item list-group-item-action">Java InputStreamReader Class</a>
                                <a href="#nine5" class="list-group-item list-group-item-action">Java OutputStreamWriter Class</a>
                                <a href="#nine6" class="list-group-item list-group-item-action">Java FileReader Class</a>
                                <a href="#nine7" class="list-group-item list-group-item-action">Java FileWriter Class</a>
                                <a href="#nine8" class="list-group-item list-group-item-action">Java BufferedReader</a>
                                <a href="#nine9" class="list-group-item list-group-item-action">Java BufferedWriter Class</a>
                                <a href="#nine10" class="list-group-item list-group-item-action">Java StringReader Class</a>
                                <a href="#nine11" class="list-group-item list-group-item-action">Java StringWriter Class</a>
                                <a href="#nine12" class="list-group-item list-group-item-action">Java PrintWriter Class</a>
                            </div>
                        </div>
                      </div>
                    </div>
                </div>  
            </div>
            <!-- End sidebar menu section  -->

            <!-- content section -->
            
            <div class="col-lg-9" style="padding: 0; margin: 0;"  >
              <!-- for navbar -->
              <div class="row" >
                    <nav class="navbar navbar-expand px-3 bg-light text-dark">
                        <div class="container-fluid">
                            <a class="navbar-brand" href="dashboard.php">Dashboard</a>
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                                data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false"
                                aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse" id="navbarNav">
                                <ul class="navbar-nav">
                                    <li class="nav-item">
                                        <a class="nav-link" href="c.php">Language C</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="#">Java</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="python.php">Python</a>
                                    </li>

                                    <li class="nav-item">
                                        <a class="nav-link" href="c++.php">C++</a>
                                    </li>
                                </ul>

                            </div>
                            <img class="nab-img" src="<?php echo $result['image']?>" width="40px" height="40px"
                                style="border-radius:50%;">
                            <h5 style="padding:5px; margin-bottom:5px; margin-right:10px;">
                                <?php echo $result['name']?>
                            </h5>
                           
                        </div>
                    </nav>
                </div>

             <div class="row"></div>

              <!-- for content  -->
              <div class="row" style="padding: 2%;">
<!-- first menu sections -->
<section id="first1">
  <h1>Get Started With Java</h1>
  <div class="content">
    <p id="introduction">Java is a high level, class based, object oriented programming language that is widely used across various operating systems.</p>

<p>To build Java programs, you need to have the <strong>Java Development Kit</strong> (JDK) installed on your device. However, if you're eager to start immediately, you can use our free <a href="/java-programming/online-compiler/">online Java compiler</a> that allows you to run Java code directly in your browser without any setup.</p>

<p>For those who prefer to use Java on their local machine, this guide will walk you through the installation process on Windows, macOS, and Linux (Ubuntu).</p>

<hr>


<div>
<div class="tabbed-editor-content">
  <div class="tabbed-editor-content__node tabbed-editor-content__node--active">
    <a href="#windows">Windows</a>
  </div>
  <div class="tabbed-editor-content__node">
    <a href="#mac">Mac</a>
  </div>
  <div class="tabbed-editor-content__node">
    <a href="#linux">Linux</a>
  </div>
   
</div>
<div class="tabbed-editor-content--items">
  <div class="tabbed-editor-content__item tabbed-editor-content__item--active" id="windows">
   <h2 id="windows">Install Java on Windows</h2>

<p>Follow the steps below to install Java on Windows:</p>

<ol>
<li>Download JDK(Java Development Kit)</li>
<li>Run the Installer</li>
<li>Configure Environment Variables</li>
<li>Verify Installation</li>
</ol>

<p>Here's a detailed explanation of each of the steps.</p>

<h3>Step 1: Download JDK</h3>

<p>Go to the official <a href="https://www.oracle.com/java/technologies/downloads/#jdk22-windows">Oracle website</a> to download the JDK.</p>

<figure><img src="assets/images/java-downloading-page-on-window1-1.png" title="Download Java on Windows" alt="Download Java on Windows" width="" height="">
<figcaption>Download Java on Windows</figcaption></figure>
<p>Choose <strong>x64 MSI Installer</strong> on the windows tab and click on download link.</p>

<h3>Step 2: Run the Installer</h3>

<p>Now, go to your <strong>downloads</strong> folder and run the installer you just downloaded. You will be prompted to the screen below.</p>

<figure><img src="assets/images/run-jdk-installer-on-windows11.png" title="Run JDK Installer on Windows" alt="Run JDK Installer on Windows" width="" height="">
<figcaption>Run JDK Installer on Windows</figcaption></figure>
<p>Simply click <strong>Next</strong> to proceed.</p>

<h3>Step 3: Configure Environment Variables</h3>

<p>After installation, you will need to tell your system where to find Java. This is done by setting environment variables.</p>

<p><strong>Locate JDK Path</strong>: Navigate through your file explorer to reach the JDK installation directory. Normally, it is located at</p>

<pre style="max-height: 600px;"><code class="java hljs">C:\Program Files\Java\jdk-<span class="hljs-number">22</span>\bin</code></pre>

<p>Copy this path.</p>

<p><strong>Access Environment Variables</strong>: Search <strong>environment variable</strong> on the terminal. In system properties, click on environment variables. You will be prompted to the screen below.</p>

<figure><img src="assets/images/java-setup-environment-variable11.png" title="Java Setup Environment Variable" alt="Java Setup Environment VariableJava Setup Environment Variable" width="" height=""><figcaption>Java Setup Environment Variable</figcaption>
</figure>
<p><strong>Update the Path Variable:</strong></p>

<p>Find the <strong>Path</strong> variable in the System variables section and click on <strong>Edit</strong>. Then, click <strong>New</strong> and paste your JDK bin path (i.e. C:\Program Files\Java\jdk-22\bin).</p>

<p>Finally, click <strong>Ok</strong> to close each window.</p>

<p><strong>Set JAVA_HOME Variable:</strong></p>

<p>Back in the environment variables window, under the system variables section, click <strong>New</strong> to create a new variable.</p>

<p>Now, name the variable <strong>JAVA_HOME</strong> and set its value to the path of the JDK folder directory (i.e.C:\Program Files\Java\jdk-22).</p>

<figure><img src="assets/images/set-java-home11.png" title="Set JAVA_HOME Variable" alt="Set JAVA_HOME Variable" width="" height="">
<figcaption>Set JAVA_HOME Variable</figcaption></figure>
<p>Close all the dialogues with the <strong>Ok</strong> button.</p>

<h3>Step 4: Verify your Installation</h3>

<p>After the installation is complete, you can verify whether Java is installed by using the following command in the command prompt.</p>

<pre style="max-height: 600px;"><code class="java hljs">java --version</code></pre>

<figure><img src="assets/images/verify-java-installation1-1.png" title="Verify Java Installation" alt="Verify Java Installation" width="" height="">
<figcaption>Verify Java Installation</figcaption></figure>
<hr>
<p>If Java is installed successfully, it will print the version information; otherwise, it will produce an error message indicating that the command is not recognized. </p>

  </div>
   <div class="tabbed-editor-content__item" id="mac">
    <h2 id="mac">Install Java on macOS</h2>

<p>To install Java on macOS, follow the steps below:</p>

<ol>
<li>Check Java version</li>
<li>Download Java Development Kit (JDK)</li>
<li>Run the Installer</li>
<li>Configure Environment Variables</li>
<li>Verify your Installation</li>
</ol>

<p>Here is a detailed explanation of each of the steps:</p>

<h3>Step 1: Check Java Version</h3>

<p>Since older versions of macOS may come with Java pre-installed on it. You can check the current version by using the following command in the Terminal app.</p>

<pre style="max-height: 600px;"><code class="java hljs">java --version</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">
  
  
  
  <style>
  #div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
  #div-gpt-ad-Programizcom36796 {display: block;}
  @media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
  </style>
  
  <div class="pgAdWrapper" style="min-width: 728px; min-height: 90px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
  </div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
  
  <div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
  </div>
  </div><div class="clearfix"></div><p>If Java is installed, you'll see the version information and can skip the remaining steps. Otherwise, follow the steps below.</p>

<h3>Step 2: Download JDK</h3>

<p>Go to the official <a href="https://www.oracle.com/java/technologies/downloads/#jdk22-windows">Oracle website</a> to download the JDK (JDK 22 at the time of writing this tutorial) for macOS.</p>

<figure><img src="assets/images/java-mac-download1.png" title="Download Java on macOS" alt="Download Java on macOS" width="" height="">
<figcaption>Download Java on macOS</figcaption></figure>
<p>The appropriate installer for Java depends on your Mac's chip architecture:</p>

<p><strong>For Intel-based Macs:</strong> </p>

<p>Download the macOS x64 DMG Installer</p>

<p><strong>For Apple Silicon (M1) Macs:</strong></p>

<p>Download the macOS ARM64 DMG Installer.</p>

<div class="note-tip">
<p><strong>Note</strong>: In case you downloaded the wrong installer, you will be prompted with the correct installer on opening the installer file.</p>

</div>
<h3>Step 3: Run the Installer</h3>

<p>Once the download is complete, run the installer you just downloaded. You will be prompted to the screen below.</p>

<figure><img src="assets/images/run-JDK-installer-on-mac1.png" title="Run JDK Installer on macOS" alt="Run JDK Installer on macOS" width="" height="">
<figcaption>Run JDK Installer on macOS</figcaption></figure>
<p>Follow the on-screen instructions to initiate the installation process. You may need to enter your administrator password as well.</p>

<h3>Step 4: Configure Environment Variables</h3>

<p>After the installation, you need to set up environment variables to tell your system where to find Java.</p>

<p>At first, open Terminal app and type the following command:</p>

<pre style="max-height: 600px;"><code class="java hljs">nano ~/.bash_profile</code></pre>

<p>This will open the .bash_profile file in a text editor.</p>

<p>Now, add the following lines at the end of the file to set the <strong>JAVA_HOME</strong> variable.</p>

<pre style="max-height: 600px;"><code class="java hljs">export JAVA_HOME=$(/usr/libexec/java_home)
export PATH=$JAVA_HOME/bin:$PATH</code></pre>

<figure><img src="assets/images/java-setup-environment-variable-on-mac1-1.png" title="Java Setup Environment Variable on macOS" alt="Java Setup Environment Variable on macOS" width="" height="">
<figcaption>Java Setup Environment Variable on macOS</figcaption></figure>
<p>Press <strong>Ctrl + X</strong> to exit, then <strong>Y</strong> to save the changes, and <strong>Enter</strong> to confirm the filename.</p>

<p>Close and reopen the terminal for the changes to take effect.</p>

<h3>Step 5: Verify your Installation</h3>

<p>Once the installation is complete, you can verify whether Java is installed by using the following command in the Terminal app.</p>

<pre style="max-height: 600px;"><code class="java hljs">java --version</code></pre>

<p>If Java is installed successfully, it will print the version information; otherwise, it will produce an error message indicating that the command is not recognized. </p>

  </div>
  <div class="tabbed-editor-content__item" id="linux">
 <h2 id="linux">Install Java on Linux</h2>

<p>Linux has various distributions and the installation process differs slightly from each other. For now, we will focus on Ubuntu distribution. </p>

<p>Follow the steps below to install Java on your Ubuntu system:</p>

<ol>
<li>Install Java</li>
<li>Verify Installation</li>
</ol>

<h3>Step 1: Install Java</h3>

<p>Open the Terminal and update your package list to ensure you get the latest version of the software: </p>

<pre style="max-height: 600px;"><code class="java hljs">sudo apt update </code></pre>

<p>Install the default JDK with: </p>

<pre style="max-height: 600px;"><code class="java hljs">sudo apt install <span class="hljs-keyword">default</span>-jdk </code></pre>

<figure><img src="assets/images/install-java-on-linux1.png" title="Install Java on Linux" alt="Install Java on Linux" width="" height="">
<figcaption>Install Java on Linux</figcaption></figure>
<h3>Step 2: Verify Installation </h3>

<p>Check if Java was installed successfully: </p>

<pre style="max-height: 600px;"><code class="java hljs">java --version </code></pre>

<figure><img src="assets/images/check-java-install-on-linux1-1.png" title="Check Java Installation on Linux" alt="Check Java Installation on Linux" width="" height="">
<figcaption>Check Java Installation on Linux</figcaption></figure>
<p>If Java is installed successfully, it will print the version information; otherwise, it will produce an error message indicating that the command is not recognized. </p>

  
</div>
</div>

<h2 id="run">Run Your First Java Program </h2>

<p>Open Notepad (or any editor you prefer) and enter the following code in the new file.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      System.out.println(<span class="hljs-string">"Hello, World!"</span>); 
  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p>Then save this file as <strong>HelloWorld.java</strong> (select "All Files" in "Save as type").</p>

<p>Now, open your command prompt, navigate to the location of that program, and compile with</p>

<pre style="max-height: 600px;"><code class="java hljs">javac HellowWorld.java</code></pre>

<p>Then, execute your program with</p>

<pre style="max-height: 600px;"><code class="java hljs">java HelloWorld</code></pre>

<p>You should see Hello World printed to the command prompt.</p>

<p>Now that you have set everything up to run Java programs on your computer,  you'll be learning how the basic program works in Java in the next tutorial.</p>

</div>



</div>
</section>
<section id="first2">
  <h1>Your First Java Program</h1>
  <div class="content">

<p>The following program displays <code>Hello, World!</code> on the screen.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      System.out.println(<span class="hljs-string">"Hello, World!"</span>);
  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=730a701f" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p><strong>Output</strong></p>

<pre><samp>Hello World!</samp></pre>

<div class="note-tip">
<p><strong>Note:</strong> A <code>Hello World!</code> program includes the basic syntax of a programming language and helps beginners understand the structure before getting started. That's why it is a common practice to introduce a new language using a <code>Hello World!</code> program.</p>

<p>It's okay if you don’t understand how the program works right now. We will learn about it in upcoming tutorials. For now, just write the exact program and run it.</p>
</div>

<hr>
<h2 id="working-of-java-program">Working of Java Program </h2>

<p>Congratulations on writing your first Java program. Now, let's see how the program works.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{ 

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      System.out.println(<span class="hljs-string">"Hello, World!"</span>);
  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=88f532fe" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p>Notice the following line of code:</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(<span class="hljs-string">"Hello, World!"</span>);</code></pre>

<p>In the above code, the <code>System.out.println()</code> statement prints the text <code>Hello, World!</code> to the screen.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">
  
  
  
  <style>
  #div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
  #div-gpt-ad-Programizcom36796 {display: block;}
  @media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
  </style>
  
  <div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
  </div>
  
  <div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
  </div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
  </div><div class="clearfix"></div><p>Remember these important things about <code>printf</code>:</p>

<ul>
<li>Everything you want to print should be kept inside parentheses <code>()</code>.</li>
<li>The text to be printed is enclosed within double quotes <code>""</code>.</li>
<li>Each <code>System.out.println()</code> statement ends with a semicolon <code>;</code>.</li>
</ul>

<p>Not following the above rules will result in errors and your code will not run successfully.</p>

<hr>
<h2 id="basic-structure-of-java">Basic Structure of a Java Program</h2>

<p>As we have seen from the last example, a Java program requires a lot of lines even for a simple program.</p>

<p>For now, just remember every Java program we write will follow this structure.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

      ...

  }
}</code></pre>

<p>We will write our code in place of <code>...</code> inside curly braces.</p>

<p>Next, we will be learning about <a href="/java-programming/comments">Java comments</a>.</p>

</div>
</section>
<section id="first3">
  <h1>Java Comments</h1>
  <div class="content">

<p class="note-tip"><strong>Tip</strong>: We are introducing comments early in this tutorial series because, from now on, we will be using them to explain our code. </p>

<p id="introduction">Comments are hints that we add to our code, making it easier to read and understand. </p>

<p>Comments are completely ignored by Java compilers.</p>

<p>For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      <span class="hljs-comment">// print Hello World to the screen</span>
      System.out.println(<span class="hljs-string">"Hello World"</span>);
  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=0f172a5e" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p><strong>Output</strong> </p>

<pre><samp>Hello World</samp></pre>

<p>Here, <code>// print Hello World to the screen</code> is a comment in Java programming. The Java compiler ignores everything after the <code>//</code> symbol.</p>

<p class="note-tip"><strong>Note</strong>: You can ignore the programming concepts and simply focus on the <strong>comments</strong>. We will revisit these concepts in later tutorials.</p>

<hr>
<h2 id="single-line">Single-line Comment</h2>

<p>In Java, a single-line comment starts and ends in the same line. To write a single-line comment, we can use the <code>//</code> symbol. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// declare and initialize two variables</span>
<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;
<span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;

<span class="hljs-comment">// print the output</span>
System.out.println(<span class="hljs-string">"This is output"</span>);</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">
  
  
  
  <style>
  #div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
  #div-gpt-ad-Programizcom36796 {display: block;}
  @media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
  </style>
  
  <div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
  </div>
  
  <div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
  </div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
  </div><div class="clearfix"></div><p>Here, we have used two single-line comments:</p>

<ul>
<li><code>// declare and initialize two variables</code></li>
<li><code>// print the output</code></li>
</ul>

<p>The Java compiler ignores everything from <code>//</code> to the end of line. Hence, it is also known as <strong>End of Line</strong> comment.</p>

<hr>
<h2 id="multi-line">Multi-line Comment</h2>

<p>When we want to write comments in multiple lines, we can use the multi-line comment. To write multi-line comments, we can use the <code>/*....*/</code> symbol. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">/* This is an example of  multi-line comment.
* The program prints "Hello, World!" to the standard output.
*/</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

      System.out.println(<span class="hljs-string">"Hello, World!"</span>);
  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=8e0406ff" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Hello, World!</samp></pre>

<p>Here, we have used the multi-line comment:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">/* This is an example of multi-line comment.
* The program prints "Hello, World!" to the standard output.
*/</span></code></pre>

<p>This type of comment is also known as <strong>Traditional Comment</strong>. In this type of comment, the Java compiler ignores everything from <code>/*</code> to <code>*/</code>.</p>

<hr>
<h2 id="prevent-execution">Prevent Executing Code Using Comments</h2>

<p>While debugging there might be situations where we don't want some part of the code. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      System.out.println(<span class="hljs-string">"some code"</span>);
      System.out.println(<span class="hljs-string">"error code"</span>);
      System.out.println(<span class="hljs-string">"some other code"</span>);

  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=515da92f" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<p>If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
      System.out.println(<span class="hljs-string">"some code"</span>);
<div class="line-highlight">        <span class="hljs-comment">// System.out.println("error code");</span></div>
      System.out.println(<span class="hljs-string">"some other code"</span>);

  }
}</code></pre></div></div><div class="code-editor__action">
        <a href="https://www.programiz.com/java-programming/online-compiler/?ref=828d72bb" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
          Run Code >>
        </a>
      </div></div>

<hr>
<h2 id="why-use-comments">Why use Comments?</h2>

<p>We should use comments for the following reasons:</p>

<ul>
<li>Comments make our code readable for future reference.</li>
<li>Comments are used for debugging purposes.</li>
<li>We can use comments for code collaboration as it helps peer developers to understand our code.</li>
</ul>

<div class="note-tip">
<p><strong>Note</strong>: Comments are not and should not be used as a substitute to explain poorly written code. Always try to write clean, understandable code, and then use comments as an addition.</p>

<p>In most cases, always use comments to explain 'why' rather than 'how' and you are good to go.</p>

</div>

</div>
</section>
              
<!-- second menu sections -->
<section id="second1">
  <h1>Java Variables and Literals</h1>
  <div class="content">
    <p>In the previous tutorial you learnt about <a href="/java-programming/comments">Java comments</a>. Now, let's learn about variables and literals in Java.</p>

<h2 id="variables">Java Variables</h2>

<p>A variable is a location in memory (storage area) to hold data.</p>

<p>To indicate the storage area, each variable should be given a unique name (identifier). Learn more about <a href="/java-programming/keywords-identifiers">Java identifiers</a>.</p>

<hr>
<h3 id="create-variables">Create Variables in Java</h3>

<p>Here's how we create a variable in Java,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> speedLimit = <span class="hljs-number">80</span>;</code></pre>
<p>Here, <var>speedLimit</var> is a variable of <var>int</var> data type and we have assigned value <strong>80</strong> to it.</p>

<p>The int data type suggests that the variable can only hold integers. To learn more, visit <a href="/java-programming/variables-primitive-data-types">Java data types.</a></p>

<p>In the example, we have assigned value to the variable during declaration. However, it's not mandatory.</p>

<p>You can declare variables and assign variables separately. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> speedLimit;
speedLimit = <span class="hljs-number">80</span>;</code></pre>

<p class="note-tip"><strong>Note</strong>: Java is a statically-typed language. It means that all variables must be declared before they can be used.</p>

<hr>
<h3 id="change-value">Change values of variables</h3>

<p>The value of a variable can be changed in the program, hence the name <strong>variable</strong>. For example,</p>

<pre><samp>int speedLimit = 80;
... .. ...
speedLimit = 90; </samp></pre>

<p>Here, initially, the value of <var>speedLimit</var> is <strong>80</strong>. Later, we changed it to <strong>90</strong>.</p>

<p>However, we cannot change the data type of a variable in Java within the same scope.</p>

<p><strong>What is the variable scope?</strong></p>

<p>Don't worry about it for now. Just remember that we can't do something like this:</p>

<pre><samp>int speedLimit = 80;
... .. ...
float speedLimit;</samp></pre>

<p>To learn more, visit: <a href="http://stackoverflow.com/questions/27092245/can-i-change-declaration-type-for-a-variable-in-java">Can I change declaration type for a variable in Java?</a></p>

<div class="faq-section"><div class="row"><div class="col-12"><div class="faq-area"><div class="accordion"><div class="accordion__nodes"><div class="accordion-header"><span class="accordion-header__title">Rules for Naming Variables in Java</span><svg class="programiz-icon accordion-header__icon"><use xlink:href="/sites/all/themes/programiz/assets/feather-sprite.svg#chevron-right"></use></svg></div><div class="accordion-body"><div class="editor-contents--accordion">
<p>Java programming language has its own set of rules and conventions for naming variables. Here's what you need to know:</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">
  
  
  
  <style>
  #div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
  #div-gpt-ad-Programizcom36796 {display: block;}
  @media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
  </style>
  
  <div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
  </div>
  
  <div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
  </div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
  </div><div class="clearfix"></div><p>1. Java is case sensitive. Hence, <var>age</var> and <var>AGE</var> are two different variables. For example,<br>
</p><pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> age = <span class="hljs-number">24</span>;
<span class="hljs-keyword">int</span> AGE = <span class="hljs-number">25</span>;

System.out.println(age);  <span class="hljs-comment">// prints 24</span>
System.out.println(AGE);  <span class="hljs-comment">// prints 25</span></code></pre>


<p>2. Variables must start with either a <strong>letter</strong> or an <strong>underscore, _</strong> or a <strong>dollar, $</strong> sign. For example,<br>
</p><pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> age;  <span class="hljs-comment">// valid name and good practice</span>
<span class="hljs-keyword">int</span> _age;  <span class="hljs-comment">// valid but bad practice</span>
<span class="hljs-keyword">int</span> $age;  <span class="hljs-comment">// valid but bad practice</span></code></pre>


<p>3. Variable names cannot start with numbers. For example,<br>
</p><pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> <span class="hljs-number">1</span>age;  <span class="hljs-comment">// invalid variables</span></code></pre>


<p>4. Variable names can't use whitespace. For example,<br>
</p><pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> my age;  <span class="hljs-comment">// invalid variables</span></code></pre>

<br>
<br>

<p>Here, we need to use variable names having more than one word, use all lowercase letters for the first word and capitalize the first letter of each subsequent word. For example, <var>myAge</var>.</p>

<p>5. When creating variables, choose a name that makes sense. For example, <var>score</var>, <var>number</var>, <var>level</var> makes more sense than variable names such as <var>s</var>, <var>n</var>, and <var>l</var>.</p>
<p>6. If you choose one-word variable names, use all lowercase letters. For example, it's better to use <var>speed</var> rather than <var>SPEED</var>, or <var>sPEED</var>.</p>


</div></div></div></div></div></div></div></div>

<hr>
<h2 id="literals">Java literals</h2>

<p>Literals are data used for representing fixed values. They can be used directly in the code. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;
<span class="hljs-keyword">float</span> b = <span class="hljs-number">2.5</span>;
<span class="hljs-keyword">char</span> c = <span class="hljs-string">'F'</span>;</code></pre>

<p>Here, <code>1</code>, <code>2.5</code>, and <code>'F'</code> are literals.</p>

<p>There are different types of literals in Java. let's discuss some of the commonly used types in detail.</p>
</div>
</section>
<section id="second2">
<h1>Java Data Types (Primitive)</h1>
<div class="content">
  <h2 id="data-type">Java Data Types</h2>

<p>As the name suggests, data types specify the type of data that can be stored inside <a href="/java-programming/variables-literals">variables in Java</a>.</p>

<p>Java is a statically-typed language. This means that all variables must be declared before they can be used.</p>

<pre><samp>int speed;</samp></pre>

<p>Here, <var>speed</var> is a variable, and the data type of the variable is <code>int</code>.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The <var>int</var> data type determines that the <var>speed</var> variable can only contain integers.</p>

<p>There are 8 data types predefined in Java, known as primitive data types.</p>

<p class="note-tip"><strong>Note</strong>: In addition to primitive data types, there are also referenced types (object type).</p>

<hr>
<h2>8 Primitive Data Types</h2>

<h3 id="boolean">1. boolean type</h3>

<ul>
<li>The <code>boolean</code> data type has two possible values, either <code>true</code> or <code>false</code>.</li>
<li>Default value: <code>false</code>.</li>
<li>They are usually used for <strong>true/false</strong> conditions.</li>
</ul>

<h3>Example 1: Java boolean data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;
System.out.println(flag);    <span class="hljs-comment">// prints true</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h3 id="byte">2. byte type</h3>

<ul>
<li>The <code>byte</code> data type can have values from <strong>-128</strong> to <strong>127</strong> (8-bit signed two's complement integer).</li>
<li>If it's certain that the value of a variable will be within -128 to 127, then it is used instead of int to save memory.</li>
<li>Default value: 0</li>
</ul>

<h3>Example 2: Java byte data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">byte</span> range;
range = <span class="hljs-number">124</span>;
System.out.println(range);    <span class="hljs-comment">// prints 124</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h3 id="short">3. short type</h3>

<ul>
<li>The <code>short</code> data type in Java can have values from <strong>-32768</strong> to <strong>32767</strong> (16-bit signed two's complement integer).</li>
<li>If it's certain that the value of a variable will be within -32768 and 32767, then it is used instead of other integer data types (<code>int</code>, <code>long</code>).</li>
<li>Default value: 0</li>
</ul>

<h3>Example 3: Java short data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">short</span> temperature;
temperature = -<span class="hljs-number">200</span>;
System.out.println(temperature);  <span class="hljs-comment">// prints -200</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h3 id="int">4. int type</h3>

<ul>
<li>The <code>int</code> data type can have values from <strong>-2<sup>31</sup></strong> to <strong>2<sup>31</sup>-1</strong> (32-bit signed two's complement integer).</li>
<li>If you are using Java 8 or later, you can use an unsigned 32-bit integer. This will have a minimum value of 0 and a maximum value of 2<sup>32</sup>-1. To learn more, visit <a href="http://stackoverflow.com/questions/25556017/how-to-use-the-unsigned-integer-in-java-8">How to use the unsigned integer in java 8?</a></li>
<li>Default value: 0</li>
</ul>

<h3>Example 4: Java int data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">int</span> range = -<span class="hljs-number">4250000</span>;
System.out.println(range);  <span class="hljs-comment">// print -4250000</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h3 id="long">5. long type</h3>

<ul>
<li>The <code>long</code> data type can have values from <strong>-2<sup>63</sup></strong> to <strong>2<sup>63</sup>-1</strong> (64-bit signed two's complement integer).</li>
<li>If you are using Java 8 or later, you can use an unsigned 64-bit integer with a minimum value of <strong>0</strong> and a maximum value of <strong>2<sup>64</sup>-1</strong>.</li>
<li>Default value: 0</li>
</ul>

<h3>Example 5: Java long data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongExample</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">long</span> range = -<span class="hljs-number">42332200000L</span>;
System.out.println(range);    <span class="hljs-comment">// prints -42332200000</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Notice, the use of <code>L</code> at the end of <code>-42332200000</code>. This represents that it's an integer of the <code>long</code> type.</p>

<hr>
<h3 id="double">6. double type</h3>

<ul>
<li>The <code>double</code> data type is a double-precision 64-bit floating-point.</li>
<li>It should never be used for precise values such as currency.</li>
<li>Default value: 0.0 (0.0d)</li>
</ul>

<h3>Example 6: Java double data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">double</span> number = -<span class="hljs-number">42.3</span>;
System.out.println(number);  <span class="hljs-comment">// prints -42.3</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h3 id="float">7. float type</h3>

<ul>
<li>The <code>float</code> data type is a single-precision 32-bit floating-point. Learn more about <a href="http://stackoverflow.com/questions/801117/whats-the-difference-between-a-single-precision-and-double-precision-floating-p">single-precision and double-precision floating-point</a> if you are interested.</li>
<li>It should never be used for precise values such as currency.</li>
<li>Default value: 0.0 (0.0f)</li>
</ul>

<h3>Example 7: Java float data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">float</span> number = -<span class="hljs-number">42.3f</span>;
System.out.println(number);  <span class="hljs-comment">// prints -42.3</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Notice that we have used <code>-42.3f</code> instead of <code>-42.3</code>in the above program. It's because <code>-42.3</code> is a <code>double</code> literal.</p>

<p>To tell the compiler to treat <code>-42.3</code> as <code>float</code> rather than <code>double</code>, you need to use <var>f</var> or <var>F</var>.</p>

<p>If you want to know about single-precision and double-precision, visit <a href="http://stackoverflow.com/questions/801117/whats-the-difference-between-a-single-precision-and-double-precision-floating-p">Java single-precision and double-precision floating-point</a>.</p>

<hr>
<h3 id="char">8. char type</h3>

<ul>
<li>It's a 16-bit Unicode character.</li>
<li>The minimum value of the char data type is <code>'\u0000'</code> (0) and the maximum value of the is <code>'\uffff'</code>.</li>
<li>Default value: <code>'\u0000'</code></li>
</ul>

<h3>Example 8: Java char data type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">char</span> letter = <span class="hljs-string">'\u0051'</span>;
System.out.println(letter);  <span class="hljs-comment">// prints Q</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Here, the Unicode value of <code>Q</code> is <strong>\u0051</strong>. Hence, we get <code>Q</code> as the output.</p>

<p>Here is another example:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">char</span> letter1 = <span class="hljs-string">'9'</span>;
System.out.println(letter1);  <span class="hljs-comment">// prints 9</span>
  
<span class="hljs-keyword">char</span> letter2 = <span class="hljs-number">65</span>;
System.out.println(letter2);  <span class="hljs-comment">// prints A</span>

}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Here, we have assigned <code>9</code> as a character (specified by single quotes) to the <var>letter1</var> variable. However, the <var>letter2</var> variable is assigned <code>65</code> as an integer number (no single quotes).</p>

<p>Hence, <code>A</code> is printed to the output. It is because Java treats characters as an integer and the ASCII value of <code>A</code> is 65. To learn more about ASCII, visit <a href="https://www.ascii-code.com/">What is ASCII Code?</a>.</p>

<hr>
<h3>String type</h3>

<p>Java also provides support for character strings via <code>java.lang.String</code> class. Strings in Java are not primitive types. Instead, they are objects. For example,</p>

<pre><samp>String myString = "Java Programming";</samp></pre>

<p>Here, <var>myString</var> is an object of the <code>String</code> class. To learn more, visit <a href="/java-programming/string">Java Strings</a>.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/examples/primitive-types-wrapper-objects">Java Program to convert primitive types to objects and vice versa</a> </li>
</ul>

</div>
</section>
<section id="second3">
<h1>Java Operators</h1>
<div class="content">
  <p id="operator-meaning">Operators are symbols that perform operations on variables and values. For example, <code>+</code> is an operator used for addition, while <code>*</code> is also an operator used for multiplication.</p>

<p>Operators in Java can be classified into 5 types:</p>

<ol>
<li>Arithmetic Operators</li>
<li>Assignment Operators</li>
<li>Relational Operators</li>
<li>Logical Operators</li>
<li>Unary Operators</li>
<li>Bitwise Operators</li>
</ol>

<hr>
<h2 id="assignment">1. Java Arithmetic Operators</h2>

<p>Arithmetic operators are used to perform arithmetic operations on variables and data. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">a + b;</code></pre>

<p>Here, the <code>+</code> operator is used to add two variables <var>a</var> and <var>b</var>. Similarly, there are various other arithmetic operators in Java.</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <td>Operator</td>
    <td>Operation</td>
  </tr>
  <tr>
    <td><code>+</code></td>
    <td>Addition</td>
  </tr>
  <tr>
    <td><code>-</code></td>
    <td>Subtraction</td>
  </tr>
  <tr>
    <td><code>*</code></td>
    <td>Multiplication</td>
  </tr>
  <tr>
    <td><code>/</code></td>
    <td>Division</td>
  </tr>
  <tr>
    <td><code>%</code></td>
    <td>Modulo Operation (Remainder after division)</td>
  </tr>
</tbody>
</table>
</div>

<h3>Example 1: Arithmetic Operators</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// declare variables</span>
<span class="hljs-keyword">int</span> a = <span class="hljs-number">12</span>, b = <span class="hljs-number">5</span>;

<span class="hljs-comment">// addition operator</span>
System.out.println(<span class="hljs-string">"a + b = "</span> + (a + b));

<span class="hljs-comment">// subtraction operator</span>
System.out.println(<span class="hljs-string">"a - b = "</span> + (a - b));

<span class="hljs-comment">// multiplication operator</span>
System.out.println(<span class="hljs-string">"a * b = "</span> + (a * b));

<span class="hljs-comment">// division operator</span>
System.out.println(<span class="hljs-string">"a / b = "</span> + (a / b));

<span class="hljs-comment">// modulo operator</span>
System.out.println(<span class="hljs-string">"a % b = "</span> + (a % b));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>a + b = 17
a - b = 7 
a * b = 60
a / b = 2 
a % b = 2 </samp></pre>

<p>In the above example, we have used <code>+</code>, <code>-</code>, and <code>*</code> operators to compute addition, subtraction, and multiplication operations.</p>

<p><strong>/ Division Operator</strong></p>

<p>Note the operation, <code>a / b</code> in our program. The <code>/</code> operator is the division operator.</p>

<p>If we use the division operator with two integers, then the resulting quotient will also be an integer. And, if one of the operands is a floating-point number, we will get the result will also be in floating-point.</p>

<pre style="max-height: 600px;"><code class="java hljs">In Java,

(<span class="hljs-number">9</span> / <span class="hljs-number">2</span>) is <span class="hljs-number">4</span>
(<span class="hljs-number">9.0</span> / <span class="hljs-number">2</span>) is <span class="hljs-number">4.5</span>
(<span class="hljs-number">9</span> / <span class="hljs-number">2.0</span>) is <span class="hljs-number">4.5</span>
(<span class="hljs-number">9.0</span> / <span class="hljs-number">2.0</span>) is <span class="hljs-number">4.5</span></code></pre>

<p><strong>% Modulo Operator</strong></p>

<p>The modulo operator <code>%</code> computes the remainder. When <code>a = 7</code> is divided by <code>b = 4</code>, the remainder is <strong>3</strong>.</p>

<p class="note-tip"><strong>Note</strong>: The <code>%</code> operator is mainly used with integers.</p>

<hr>
<h2 id="assignment">2. Java Assignment Operators</h2>

<p>Assignment operators are used in Java to assign values to variables. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> age;
age = <span class="hljs-number">5</span>;</code></pre>

<p>Here, <code>=</code> is the assignment operator. It assigns the value on its right to the variable on its left. That is, <strong>5</strong> is assigned to the variable <var>age</var>.</p>

<p>Let's see some more assignment operators available in Java.</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <th>Operator</th>
    <th>Example</th>
    <th>Equivalent to</th>
  </tr>
  <tr>
    <td><code>=</code></td>
    <td><code>a = b;</code></td>
    <td><code>a = b;</code></td>
  </tr>
  <tr>
    <td><code>+=</code></td>
    <td><code>a += b;</code></td>
    <td><code>a = a + b;</code></td>
  </tr>
  <tr>
    <td><code>-=</code></td>
    <td><code>a -= b;</code></td>
    <td><code>a = a - b;</code></td>
  </tr>
  <tr>
    <td><code>*=</code></td>
    <td><code>a *= b;</code></td>
    <td><code>a = a * b;</code></td>
  </tr>
  <tr>
    <td><code>/=</code></td>
    <td><code>a /= b;</code></td>
    <td><code>a = a / b;</code></td>
  </tr>
  <tr>
    <td><code>%=</code></td>
    <td><code>a %= b;</code></td>
    <td><code>a = a % b;</code></td>
  </tr>
</tbody>
</table>
</div>

<h3>Example 2: Assignment Operators</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create variables</span>
<span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>;
<span class="hljs-keyword">int</span> <span class="hljs-keyword">var</span>;

<span class="hljs-comment">// assign value using =</span>
<span class="hljs-keyword">var</span> = a;
System.out.println(<span class="hljs-string">"var using =: "</span> + <span class="hljs-keyword">var</span>);

<span class="hljs-comment">// assign value using =+</span>
<span class="hljs-keyword">var</span> += a;
System.out.println(<span class="hljs-string">"var using +=: "</span> + <span class="hljs-keyword">var</span>);

<span class="hljs-comment">// assign value using =*</span>
<span class="hljs-keyword">var</span> *= a;
System.out.println(<span class="hljs-string">"var using *=: "</span> + <span class="hljs-keyword">var</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>var using =: 4
var using +=: 8 
var using *=: 32</samp></pre>

<hr>
<h2 id="relational">3. Java Relational Operators</h2>

<p>Relational operators are used to check the relationship between two operands. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// check if a is less than b</span>
a &lt; b;</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, <code>&lt;</code> operator is the relational operator. It checks if <var>a</var> is less than <var>b</var> or not.</p>

<p>It returns either <code>true</code> or <code>false</code>.</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <th>Operator</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>==</code></td>
    <td>Is Equal To</td>
    <td><code>3 == 5</code> returns <strong>false</strong></td>
  </tr>
  <tr>
    <td><code>!=</code></td>
    <td>Not Equal To</td>
    <td><code>3 != 5</code> returns <strong>true</strong></td>
  </tr>
  <tr>
    <td><code>&gt;</code></td>
    <td>Greater Than</td>
    <td><code>3 &gt; 5</code> returns <strong>false</strong></td>
  </tr>
  <tr>
    <td><code>&lt;</code></td>
    <td>Less Than</td>
    <td><code>3 &lt; 5</code> returns <strong>true</strong></td>
  </tr>
  <tr>
    <td><code>&gt;=</code></td>
    <td>Greater Than or Equal To</td>
    <td><code>3 &gt;= 5</code> returns <strong>false</strong></td>
  </tr>
  <tr>
    <td><code>&lt;=</code></td>
    <td>Less Than or Equal To</td>
    <td><code>3 &lt;= 5</code> returns <strong>true</strong></td>
  </tr>
</tbody>
</table>
</div>

<h3>Example 3: Relational Operators</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create variables</span>
<span class="hljs-keyword">int</span> a = <span class="hljs-number">7</span>, b = <span class="hljs-number">11</span>;

<span class="hljs-comment">// value of a and b</span>
System.out.println(<span class="hljs-string">"a is "</span> + a + <span class="hljs-string">" and b is "</span> + b);

<span class="hljs-comment">// == operator</span>
System.out.println(a == b);  <span class="hljs-comment">// false</span>

<span class="hljs-comment">// != operator</span>
System.out.println(a != b);  <span class="hljs-comment">// true</span>

<span class="hljs-comment">// &gt; operator</span>
System.out.println(a &gt; b);  <span class="hljs-comment">// false</span>

<span class="hljs-comment">// &lt; operator</span>
System.out.println(a &lt; b);  <span class="hljs-comment">// true</span>

<span class="hljs-comment">// &gt;= operator</span>
System.out.println(a &gt;= b);  <span class="hljs-comment">// false</span>

<span class="hljs-comment">// &lt;= operator</span>
System.out.println(a &lt;= b);  <span class="hljs-comment">// true</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p class="note-tip"><strong>Note</strong>: Relational operators are used in decision making and loops.</p>

<hr>
<h2 id="logical">4. Java Logical Operators</h2>

<p>Logical operators are used to check whether an expression is <code>true</code> or <code>false</code>. They are used in decision making.</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <th>Operator</th>
    <th>Example</th>
    <th>Meaning</th>
  </tr>
  <tr>
    <td><code>&amp;&amp;</code> (Logical AND)</td>
    <td>expression1 <strong>&amp;&amp;</strong> expression2</td>
    <td><code>true</code> only if both <var>expression1</var> and <var>expression2</var> are <code>true</code></td>
  </tr>
  <tr>
    <td><code>||</code> (Logical OR)</td>
    <td>expression1 <strong>||</strong> expression2</td>
    <td><code>true</code> if either <var>expression1</var> or <var>expression2</var> is <code>true</code></td>
  </tr>
  <tr>
    <td><code>!</code> (Logical NOT)</td>
    <td><strong>!</strong>expression</td>
    <td><code>true</code> if <var>expression</var> is <code>false</code> and vice versa</td>
  </tr>
</tbody>
</table>
</div>

<h3>Example 4: Logical Operators</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// &amp;&amp; operator</span>
System.out.println((<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>) &amp;&amp; (<span class="hljs-number">8</span> &gt; <span class="hljs-number">5</span>));  <span class="hljs-comment">// true</span>
System.out.println((<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>) &amp;&amp; (<span class="hljs-number">8</span> &lt; <span class="hljs-number">5</span>));  <span class="hljs-comment">// false</span>

<span class="hljs-comment">// || operator</span>
System.out.println((<span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span>) || (<span class="hljs-number">8</span> &gt; <span class="hljs-number">5</span>));  <span class="hljs-comment">// true</span>
System.out.println((<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>) || (<span class="hljs-number">8</span> &lt; <span class="hljs-number">5</span>));  <span class="hljs-comment">// true</span>
System.out.println((<span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span>) || (<span class="hljs-number">8</span> &lt; <span class="hljs-number">5</span>));  <span class="hljs-comment">// false</span>

<span class="hljs-comment">// ! operator</span>
System.out.println(!(<span class="hljs-number">5</span> == <span class="hljs-number">3</span>));  <span class="hljs-comment">// true</span>
System.out.println(!(<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>));  <span class="hljs-comment">// false</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Working of Program</strong></p>

<ul>
<li><code>(5 &gt; 3) &amp;&amp; (8 &gt; 5)</code> returns <code>true</code> because both <code>(5 &gt; 3)</code> and <code>(8 &gt; 5)</code> are <code>true</code>.</li>
<li><code>(5 &gt; 3) &amp;&amp; (8 &lt; 5)</code> returns <code>false</code> because the expression <code>(8 &lt; 5)</code> is <code>false</code>.</li>
<li><code>(5 &lt; 3) || (8 &gt; 5)</code> returns <code>true</code> because the expression <code>(8 &gt; 5)</code> is <code>true</code>.</li>
<li><code>(5 &gt; 3) || (8 &lt; 5)</code> returns <code>true</code> because the expression <code>(5 &gt; 3)</code> is <code>true</code>.</li>
<li><code>(5 &lt; 3) || (8 &lt; 5)</code> returns <code>false</code> because both <code>(5 &lt; 3)</code> and <code>(8 &lt; 5)</code> are <code>false</code>.</li>
<li><code>!(5 == 3)</code> returns true because <code>5 == 3</code> is <code>false</code>.</li>
<li><code>!(5 &gt; 3)</code> returns false because <code>5 &gt; 3</code> is <code>true</code>.</li>
</ul>

<hr>
<h2 id="unary">5. Java Unary Operators</h2>

<p>Unary operators are used with only one operand. For example, <code>++</code> is a unary operator that increases the value of a variable by <strong>1</strong>. That is, <code>++5</code> will return <strong>6</strong>.</p>

<p>Different types of unary operators are:</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <th>Operator</th>
    <th>Meaning</th>
  </tr>
  <tr>
    <td><code>+</code></td>
    <td><strong>Unary plus</strong>: not necessary to use since numbers are positive without using it</td>
  </tr>
  <tr>
    <td><code>-</code></td>
    <td><strong>Unary minus</strong>: inverts the sign of an expression</td>
  </tr>
  <tr>
    <td><code>++</code></td>
    <td><strong>Increment operator</strong>: increments value by 1</td>
  </tr>
  <tr>
    <td><code>--</code></td>
    <td><strong>Decrement operator</strong>: decrements value by 1</td>
  </tr>
  <tr>
    <td><code>!</code></td>
    <td><strong>Logical complement operator</strong>: inverts the value of a boolean</td>
  </tr>
</tbody>
</table>
</div>

<h2 id="increment-decrement">Increment and Decrement Operators</h2>

<p>Java also provides increment and decrement operators: <code>++</code> and <code>--</code> respectively. <code>++</code> increases the value of the operand by <strong>1</strong>, while <code>--</code> decrease it by <strong>1</strong>. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> num = <span class="hljs-number">5</span>;

<span class="hljs-comment">// increase num by 1</span>
++num;</code></pre>

<p>Here, the value of <var>num</var> gets increased to <strong>6</strong> from its initial value of <strong>5</strong>.</p>

<hr>
<h3>Example 5: Increment and Decrement Operators</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// declare variables</span>
<span class="hljs-keyword">int</span> a = <span class="hljs-number">12</span>, b = <span class="hljs-number">12</span>;
<span class="hljs-keyword">int</span> result1, result2;

<span class="hljs-comment">// original value</span>
System.out.println(<span class="hljs-string">"Value of a: "</span> + a);

<span class="hljs-comment">// increment operator</span>
result1 = ++a;
System.out.println(<span class="hljs-string">"After increment: "</span> + result1);

System.out.println(<span class="hljs-string">"Value of b: "</span> + b);

<span class="hljs-comment">// decrement operator</span>
result2 = --b;
System.out.println(<span class="hljs-string">"After decrement: "</span> + result2);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Value of a: 12
After increment: 13
Value of b: 12     
After decrement: 11</samp></pre>

<p>In the above program, we have used the ++ and -- operator as <strong>prefixes (++a, --b)</strong>. We can also use these operators as <strong>postfix (a++, b++)</strong>.</p>

<p>There is a slight difference when these operators are used as prefix versus when they are used as a postfix.</p>

<p>To learn more about these operators, visit <a href="/article/increment-decrement-operator-difference-prefix-postfix">increment and decrement operators</a>.</p>

<hr>
<h2 id="bitwise">6. Java Bitwise Operators</h2>

<p>Bitwise operators in Java are used to perform operations on individual bits. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Bitwise complement Operation of <span class="hljs-number">35</span>

<span class="hljs-number">35</span> = <span class="hljs-number">00100011</span> (In Binary)

~ <span class="hljs-number">00100011</span> 
________
<span class="hljs-number">11011100</span>  = <span class="hljs-number">220</span> (In decimal)</code></pre>

<p>Here, <code>~</code> is a bitwise operator. It inverts the value of each bit (<strong>0</strong> to <strong>1</strong> and <strong>1</strong> to <strong>0</strong>).</p>

<p>The various bitwise operators present in Java are:</p>

<div class="table-responsive">
<table border="0">
<tbody>
  <tr>
    <th>Operator</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>~</code></td>
    <td>Bitwise Complement</td>
  </tr>
  <tr>
    <td><code>&lt;&lt;</code></td>
    <td>Left Shift</td>
  </tr>
  <tr>
    <td><code>&gt;&gt;</code></td>
    <td>Right Shift</td>
  </tr>
  <tr>
    <td><code>&gt;&gt;&gt;</code></td>
    <td>Unsigned Right Shift</td>
  </tr>
  <tr>
    <td><code>&amp;</code></td>
    <td>Bitwise AND</td>
  </tr>
  <tr>
    <td><code>^</code></td>
    <td>Bitwise exclusive OR</td>
  </tr>
</tbody>
</table>
</div>

<p>These operators are not generally used in Java. To learn more, visit <a href="/java-programming/bitwise-operators">Java Bitwise and Bit Shift Operators</a>.</p>

<hr>
<h2>Other operators</h2>

<p>Besides these operators, there are other additional operators in Java.</p>

<h3 id="instanceof">Java instanceof Operator</h3>

<p>The <code>instanceof</code> operator checks whether an object is an instanceof a particular class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String str = <span class="hljs-string">"Programiz"</span>;
<span class="hljs-keyword">boolean</span> result;

<span class="hljs-comment">// checks if str is an instance of</span>
<span class="hljs-comment">// the String class</span>
result = str <span class="hljs-keyword">instanceof</span> String;
System.out.println(<span class="hljs-string">"Is str an object of String? "</span> + result);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Is str an object of String? true</samp></pre>

<p>Here, <var>str</var> is an instance of the <code>String</code> class. Hence, the <code>instanceof</code> operator returns <code>true</code>. To learn more, visit <a href="/java-programming/instanceof">Java instanceof</a>.</p>

<hr>
<h3 id="ternary">Java Ternary Operator</h3>

<p>The ternary operator (conditional operator) is shorthand for the <code>if-then-else</code> statement. For example,</p>

<pre>variable = Expression ? expression1 : expression2</pre>

<p>Here's how it works.</p>

<ul>
<li>If the <code>Expression</code> is <code>true</code>, <code>expression1</code> is assigned to the <var>variable</var>.</li>
<li>If the <code>Expression</code> is <code>false</code>, <code>expression2</code> is assigned to the <var>variable</var>.</li>
</ul>

<p>Let's see an example of a ternary operator.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> februaryDays = <span class="hljs-number">29</span>;
String result;

<span class="hljs-comment">// ternary operator</span>
result = (februaryDays == <span class="hljs-number">28</span>) ? <span class="hljs-string">"Not a leap year"</span> : <span class="hljs-string">"Leap year"</span>;
System.out.println(result);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Leap year</samp></pre>

<p>In the above example, we have used the ternary operator to check if the year is a leap year or not. To learn more, visit <a href="/java-programming/ternary-operator">the Java ternary operator</a>.</p>

<hr>
<p>Now that you know about Java operators, it's time to know about the order in which operators are evaluated. To learn more, visit <a href="/java-programming/operator-precedence">Java Operator Precedence</a>.</p>
</div>
</section>
<section id="second4">
<h1>Java Basic Input and Output</h1>
<div class="content">
  <h2 id="output">Java Output</h2>

<p>In Java, you can simply use</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(); or

System.out.print(); or

System.out.printf();</code></pre>

<p>to send output to standard output (screen).</p>

<p>Here,</p>

<ul>
<li><code>System</code> is a class</li>
<li><code>out</code> is a <code>public</code> <code>static</code> field: it accepts output data.</li>
</ul>

<p>Don't worry if you don't understand it. We will discuss <code>class</code>, <code>public</code>, and <code>static</code> in later chapters.</p>

<p>Let's take an example to output a line.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AssignmentOperator</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    System.out.println(<span class="hljs-string">"Java programming is interesting."</span>);   
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Java programming is interesting.</samp></pre>

<p>Here, we have used the <code>println()</code> method to display the string.</p>

<hr>
<h3 id="difference-print-println-printf">Difference between println(), print() and printf()</h3>

<ul>
<li><code>print()</code> - It prints string inside the quotes.</li>
<li><code>println()</code> - It prints string inside the quotes similar like <code>print()</code> method. Then the cursor moves to the beginning of the next line.</li>
<li><code>printf()</code> - It provides string formatting (similar to <a href="/cpp-programming/library-function/cstdio/printf">printf in C/C++ programming</a>).</li>
</ul>

<hr>
<h3>Example: print() and println()</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Output</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    System.out.println(<span class="hljs-string">"1. println "</span>);
    System.out.println(<span class="hljs-string">"2. println "</span>);
  
    System.out.print(<span class="hljs-string">"1. print "</span>);
    System.out.print(<span class="hljs-string">"2. print"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1. println 
2. println 
1. print 2. print</samp></pre>

<p>In the above example, we have shown the working of the <code>print()</code> and <code>println()</code> methods. To learn about the <code>printf()</code> method, visit <a href="https://www.cs.colostate.edu/~cs160/.Summer16/resources/Java_printf_method_quick_reference.pdf">Java printf()</a>.</p>

<hr>
<h3 id="print-variables">Example: Printing Variables and Literals</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variables</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    Double number = -<span class="hljs-number">10.6</span>;
  
    System.out.println(<span class="hljs-number">5</span>);
    System.out.println(number);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>When you run the program, the output will be:</p>

<pre><samp>5
-10.6</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, you can see that we have not used the quotation marks. It is because to display integers, <a href="/java-programming/variables-literals">variables</a> and so on, we don't use quotation marks.</p>

<hr>
<h3 id="print-strings">Example: Print Concatenated Strings</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintVariables</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    Double number = -<span class="hljs-number">10.6</span>;
  
    System.out.println(<span class="hljs-string">"I am "</span> + <span class="hljs-string">"awesome."</span>);
    System.out.println(<span class="hljs-string">"Number = "</span> + number);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am awesome.
Number = -10.6</samp></pre>

<p>In the above example, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(<span class="hljs-string">"I am "</span> + <span class="hljs-string">"awesome."</span>);</code></pre>

<p>Here, we have used the <code>+</code> operator to concatenate (join) the two strings: <var>"I am "</var> and <var>"awesome."</var>.</p>

<p>And also, the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(<span class="hljs-string">"Number = "</span> + number);</code></pre>

<p>Here, first the value of variable <var>number</var> is evaluated. Then, the value is concatenated to the string: <var>"Number = "</var>.</p>

<hr>
<h2 id="input">Java Input</h2>

<p>Java provides different ways to get input from the user. However, in this tutorial, you will learn to get input from user using the object of <code>Scanner</code> class.</p>

<p>In order to use the object of <code>Scanner</code>, we need to import <code>java.util.Scanner</code> package.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Scanner;</code></pre>

<p>To learn more about importing packages in Java, visit <a href="/java-programming/packages-import">Java Import Packages</a>.</p>

<p>Then, we need to create an object of the <code>Scanner</code> class. We can use the object to take input from the user.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an object of Scanner</span>
Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);

<span class="hljs-comment">// take input from the user</span>
<span class="hljs-keyword">int</span> number = input.nextInt();</code></pre>

<hr>
<h3 id="integer-input">Example: Get Integer Input From the User</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Input</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);
  
    System.out.print(<span class="hljs-string">"Enter an integer: "</span>);
    <span class="hljs-keyword">int</span> number = input.nextInt();
    System.out.println(<span class="hljs-string">"You entered "</span> + number);

    <span class="hljs-comment">// closing the scanner object</span>
    input.close();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Enter an integer: 23
You entered 23</samp></pre>

<p>In the above example, we have created an object named <var>input</var> of the <code>Scanner</code> class. We then call the <code>nextInt()</code> method of the <code>Scanner</code> class to get an integer input from the user.</p>

<p>Similarly, we can use <code>nextLong()</code>, <code>nextFloat()</code>, <code>nextDouble()</code>, and <code>next()</code> methods to get <code>long</code>, <code>float</code>, <code>double</code>, and <code>string</code> input respectively from the user.</p>

<p class="note-tip"><strong>Note</strong>: We have used the <code>close()</code> method to close the object. It is recommended to close the scanner object once the input is taken.</p>

<hr>
<h3 id="double-string-input">Example: Get float, double and String Input</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Input</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);
  
    <span class="hljs-comment">// Getting float input</span>
    System.out.print(<span class="hljs-string">"Enter float: "</span>);
    <span class="hljs-keyword">float</span> myFloat = input.nextFloat();
    System.out.println(<span class="hljs-string">"Float entered = "</span> + myFloat);
  
    <span class="hljs-comment">// Getting double input</span>
    System.out.print(<span class="hljs-string">"Enter double: "</span>);
    <span class="hljs-keyword">double</span> myDouble = input.nextDouble();
    System.out.println(<span class="hljs-string">"Double entered = "</span> + myDouble);
  
    <span class="hljs-comment">// Getting String input</span>
    System.out.print(<span class="hljs-string">"Enter text: "</span>);
    String myString = input.next();
    System.out.println(<span class="hljs-string">"Text entered = "</span> + myString);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Enter float: 2.343
Float entered = 2.343
Enter double: -23.4
Double entered = -23.4
Enter text: Hey!
Text entered = Hey!</samp></pre>

<p>As mentioned, there are other several ways to get input from the user. To learn more about <code>Scanner</code>, visit <a href="/java-programming/scanner">Java Scanner</a>.</p>

</div>
</section>
<section id="second5">
<h1>Java Expressions, Statements and Blocks</h1>
<div class="content">
  <p>In previous chapters, we have used expressions, statements, and blocks without much explaining about them. Now that you know about variables, operators, and literals, it will be easier to understand these concepts.</p>

<hr>
<h2 id="expressions">Java Expressions</h2>

<p>A Java expression consists of <a href="/java-programming/variables-primitive-data-types#variables">variables</a>, <a href="/java-programming/operators">operators</a>, <a href="/java-programming/variables-primitive-data-types#literals">literals</a>, and method calls. To know more about method calls, visit <a href="/java-programming/methods">Java methods</a>. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> score; 
score = <span class="hljs-number">90</span>;</code></pre>

<p>Here, <code>score = 90</code> is an expression that returns an <code>int</code>. Consider another example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Double a = <span class="hljs-number">2.2</span>, b = <span class="hljs-number">3.4</span>, result;
result = a + b - <span class="hljs-number">3.4</span>;</code></pre>

<p>Here, <code>a + b - 3.4</code> is an expression.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (number1 == number2)
System.out.println(<span class="hljs-string">"Number 1 is larger than number 2"</span>);</code></pre>

<p>Here, <code>number1 == number2</code> is an expression that returns a boolean value. Similarly, <code>"Number 1 is larger than number 2"</code> is a <a href="/java-programming/string">string</a> expression.</p>

<hr>
<h2 id="statements">Java Statements</h2>

<p>In Java, each statement is a complete unit of execution. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> score = <span class="hljs-number">9</span>*<span class="hljs-number">5</span>;</code></pre>

<p>Here, we have a statement. The complete execution of this statement involves multiplying integers <code>9</code> and <code>5</code> and then assigning the result to the variable <code>score</code>.</p>

<p>In the above statement, we have an expression <code>9 * 5</code>. In Java, expressions are part of statements.</p>

<hr>
<h3 id="expression-statements">Expression statements</h3>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>We can convert an expression into a statement by terminating the expression with a <code>;</code>. These are known as expression statements. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// expression</span>
number = <span class="hljs-number">10</span>
<span class="hljs-comment">// statement</span>
number = <span class="hljs-number">10</span>;</code></pre>

<p>In the above example, we have an expression <code>number = 10</code>. Here, by adding a semicolon (<code>;</code>), we have converted the expression into a statement (<code>number = 10;</code>).</p>

<p>Consider another example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// expression</span>
++number
<span class="hljs-comment">// statement</span>
++number;</code></pre>

<p>Similarly, <code>++number</code> is an expression whereas <code>++number;</code> is a statement.</p>

<hr>
<h3 id="declaration-statements">Declaration Statements</h3>

<p>In Java, declaration statements are used for declaring variables. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Double tax = <span class="hljs-number">9.5</span>;</code></pre>

<p>The statement above declares a variable <var>tax</var> which is initialized to <code>9.5</code>.</p>

<p class="note-tip"><strong>Note</strong>: There are control flow statements that are used in decision making and looping in Java. You will learn about control flow statements in later chapters.</p>

<hr>
<h2 id="blocks">Java Blocks</h2>

<p>A block is a group of statements (zero or more) that is enclosed in curly braces <code>{ }</code>. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    String band = <span class="hljs-string">"Beatles"</span>;
  
    <span class="hljs-keyword">if</span> (band == <span class="hljs-string">"Beatles"</span>) { <span class="hljs-comment">// start of block</span>
        System.out.print(<span class="hljs-string">"Hey "</span>);
        System.out.print(<span class="hljs-string">"Jude!"</span>);
    } <span class="hljs-comment">// end of block</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Hey Jude!</samp></pre>

<p>In the above example, we have a block <code>if {....}</code>.</p>

<p>Here, inside the block we have two statements:</p>

<ul>
<li><code>System.out.print("Hey ");</code></li>
<li><code>System.out.print("Jude!");</code></li>
</ul>

<p>However, a block may not have any statements. Consider the following examples,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">if</span> (<span class="hljs-number">10</span> &gt; <span class="hljs-number">5</span>) { <span class="hljs-comment">// start of block	</span>

    } <span class="hljs-comment">// end of block</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>This is a valid Java program. Here, we have a block <code>if {...}</code>. However, there is no any statement inside this block.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AssignmentOperator</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{  <span class="hljs-comment">// start of block 	</span>

} <span class="hljs-comment">// end of block</span>
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Here, we have block <code>public static void main() {...}</code>. However, similar to the above example, this block does not have any statement.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/if-else-statement">Java if…else Statement</a></li>
</ul>

</div>
</section>

<!-- third menu sections -->
<section id="third1">
<h1>Java if...else Statement</h1>
<div class="content">
  <p id="introduction">In programming, we use the <code>if..else</code> statement to run a block of code among more than one alternatives.</p>

<p>For example, assigning grades (A, B, C) based on the percentage obtained by a student.</p>

<ul>
<li>if the percentage is above <strong>90</strong>, assign grade <strong>A</strong></li>
<li>if the percentage is above <strong>75</strong>, assign grade <strong>B</strong></li>
<li>if the percentage is above <strong>65</strong>, assign grade <strong>C</strong></li>
</ul>

<hr>
<h2 id="if-then">1. Java if (if-then) Statement</h2>

<p>The syntax of an <strong>if-then</strong> statement is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (condition) {
<span class="hljs-comment">// statements</span>
}</code></pre>

<p>Here, <var>condition</var> is a boolean expression such as <code>age &gt;= 18</code>.</p>

<ul>
<li>if <var>condition</var> evaluates to <code>true</code>, statements are executed</li>
<li>if <var>condition</var> evaluates to <code>false</code>, statements are skipped</li>
</ul>

<h3>Working of if Statement</h3>

<figure><img src="assets/images/java-if-working.png" title="Working of Java if statement" alt="if the number is greater than 0, code inside if block is executed, otherwise code inside if block is skipped" width="520" height="256">
<figcaption>Working of Java if statement</figcaption></figure>
<hr>
<h3 id="if-example">Example 1: Java if Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IfStatement</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> number = <span class="hljs-number">10</span>;

<span class="hljs-comment">// checks if number is less than 0</span>
<span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0</span>) {
  System.out.println(<span class="hljs-string">"The number is negative."</span>);
}

System.out.println(<span class="hljs-string">"Statement outside if block"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Statement outside if block</samp></pre>

<p>In the program, <code>number &lt; 0</code> is <code>false</code>. Hence, the code inside the body of the <code>if</code> statement is <strong>skipped</strong>.</p>

<p class="note-tip"><strong>Note:</strong> If you want to learn more about about test conditions, visit <a href="/java-programming/operators#relational">Java Relational Operators</a> and <a href="/java-programming/operators#logical">Java Logical Operators</a>.</p>

<hr>
<p>We can also use <a href="/java-programming/string">Java Strings</a> as the test condition.</p>

<h3>Example 2: Java if with String</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-comment">// create a string variable</span>
String language = <span class="hljs-string">"Java"</span>;

<span class="hljs-comment">// if statement</span>
<span class="hljs-keyword">if</span> (language == <span class="hljs-string">"Java"</span>) {
  System.out.println(<span class="hljs-string">"Best Programming Language"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Best Programming Language</samp></pre>

<p>In the above example, we are comparing two strings in the <code>if</code> block.</p>

<hr>
<h2 id="if-else">2. Java if...else (if-then-else) Statement</h2>

<p>The <code>if</code> statement executes a certain section of code if the test expression is evaluated to <code>true</code>. However, if the test expression is evaluated to <code>false</code>, it does nothing.</p>

<p>In this case, we can use an optional <code>else</code> block. Statements inside the body of <code>else</code> block are executed if the test expression is evaluated to <code>false</code>. This is known as the <strong>if-...else</strong> statement in Java.</p>

<p>The syntax of the <strong>if...else</strong> statement is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (condition) {
<span class="hljs-comment">// codes in if block</span>
}
<span class="hljs-keyword">else</span> {
<span class="hljs-comment">// codes in else block</span>
}</code></pre>

<p>Here, the program will do one task (codes inside <code>if</code> block) if the condition is <code>true</code> and another task (codes inside <code>else</code> block) if the condition is <code>false</code>.</p>

<hr>
<h3>How the if...else statement works?</h3>

<figure><img src="assets/images/java-if-else-working.png" title="Working of Java if-else statements" alt="If the condition is true, the code inside the if block is executed, otherwise, code inside the else block is executed" width="580" height="267">
<figcaption>Working of Java if-else statements</figcaption></figure>
<hr>
<h3 id="if-else-example">Example 3: Java if...else Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">int</span> number = <span class="hljs-number">10</span>;

<span class="hljs-comment">// checks if number is greater than 0</span>
<span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) {
  System.out.println(<span class="hljs-string">"The number is positive."</span>);
}

<span class="hljs-comment">// execute this block</span>
<span class="hljs-comment">// if number is not greater than 0</span>
<span class="hljs-keyword">else</span> {
  System.out.println(<span class="hljs-string">"The number is not positive."</span>);
}

System.out.println(<span class="hljs-string">"Statement outside if...else block"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong></p>

<pre><samp>The number is positive.
Statement outside if...else block</samp></pre>

<p>In the above example, we have a variable named <var>number</var>. Here, the test expression <code>number &gt; 0</code> checks if <var>number</var> is greater than 0.</p>

<p>Since the value of the <var>number</var> is <var>10</var>, the test expression evaluates to <code>true</code>. Hence code inside the body of <code>if</code> is executed.</p>

<p>Now, change the value of the <var>number</var> to a negative integer. Let's say <var>-5</var>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> number = -<span class="hljs-number">5</span>;</code></pre>

<p>If we run the program with the new value of <var>number</var>, the output will be:</p>

<pre><samp>The number is not positive.
Statement outside if...else block</samp></pre>

<p>Here, the value of <var>number</var> is <var>-5</var>. So the test expression evaluates to <code>false</code>. Hence code inside the body of <code>else</code> is executed.</p>

<hr>
<h2 id="if-else-ladder">3. Java if...else...if Statement</h2>

<p>In Java, we have an <strong>if...else...if</strong> ladder, that can be used to execute one block of code among multiple other blocks.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (condition1) {
<span class="hljs-comment">// codes</span>
}
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(condition2) {
<span class="hljs-comment">// codes</span>
}
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition3) {
<span class="hljs-comment">// codes</span>
}
.
.
<span class="hljs-keyword">else</span> {
<span class="hljs-comment">// codes</span>
}</code></pre>

<p>Here, <code>if</code> statements are executed from the top towards the bottom. When the test condition is <code>true</code>, codes inside the body of that <code>if</code> block is executed. And, program control jumps outside the <strong>if...else...if</strong> ladder.</p>

<p>If all test expressions are <code>false</code>, codes inside the body of <code>else</code> are executed.</p>

<hr>
<h3>How the if...else...if ladder works?</h3>

<figure><img src="assets/images/java-if-else-if-statement.png" title="Working of if...else...if ladder" alt="If the first test condition if true, code inside first if block is executed, if the second condition is true, block inside second if is executed, and if all conditions are false, the else block is executed" width="740" height="312">
<figcaption>Working of if...else...if ladder</figcaption></figure>
<hr>
<h3 id="if-else-ladder-example">Example 4: Java if...else...if Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;

<span class="hljs-comment">// checks if number is greater than 0</span>
<span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) {
  System.out.println(<span class="hljs-string">"The number is positive."</span>);
}

<span class="hljs-comment">// checks if number is less than 0</span>
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0</span>) {
  System.out.println(<span class="hljs-string">"The number is negative."</span>);
}

<span class="hljs-comment">// if both condition is false</span>
<span class="hljs-keyword">else</span> {
  System.out.println(<span class="hljs-string">"The number is 0."</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>The number is 0.</samp></pre>

<p>In the above example, we are checking whether <var>number</var> is <a href="/java-programming/examples/positive-negative">positive, negative, or zero</a>. Here, we have two condition expressions:</p>

<ul>
<li><code>number &gt; 0</code> - checks if <var>number</var> is greater than <var>0</var></li>
<li><code>number &lt; 0</code> - checks if <var>number</var> is less than <var>0</var></li>
</ul>

<p>Here, the value of <var>number</var> is <var>0</var>. So both the conditions evaluate to <code>false</code>. Hence the statement inside the body of <code>else</code> is executed.</p>

<p class="note-tip"><strong>Note</strong>: Java provides a special operator called <strong>ternary operator</strong>, which is a kind of shorthand notation of <strong>if...else...if</strong> statement. To learn about the ternary operator, visit <a href="/java-programming/ternary-operator">Java Ternary Operator</a>.</p>

<hr>
<h2 id="nested-if-else">4. Java Nested if..else Statement</h2>

<p>In Java, it is also possible to use <code>if..else</code> statements inside an <code>if...else</code> statement. It's called the nested <code>if...else</code> statement.</p>

<p>Here's a program to find the largest of <strong>3</strong> numbers using the nested <code>if...else</code> statement.</p>

<h3>Example 5: Nested if...else Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// declaring double type variables</span>
Double n1 = -<span class="hljs-number">1.0</span>, n2 = <span class="hljs-number">4.5</span>, n3 = -<span class="hljs-number">5.3</span>, largest;

<span class="hljs-comment">// checks if n1 is greater than or equal to n2</span>
<span class="hljs-keyword">if</span> (n1 &gt;= n2) {

  <span class="hljs-comment">// if...else statement inside the if block</span>
  <span class="hljs-comment">// checks if n1 is greater than or equal to n3</span>
  <span class="hljs-keyword">if</span> (n1 &gt;= n3) {
    largest = n1;
  }

  <span class="hljs-keyword">else</span> {
    largest = n3;
  }
} <span class="hljs-keyword">else</span> {

  <span class="hljs-comment">// if..else statement inside else block</span>
  <span class="hljs-comment">// checks if n2 is greater than or equal to n3</span>
  <span class="hljs-keyword">if</span> (n2 &gt;= n3) {
    largest = n2;
  }

  <span class="hljs-keyword">else</span> {
    largest = n3;
  }
}

System.out.println(<span class="hljs-string">"Largest Number: "</span> + largest);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Largest Number: 4.5</samp></pre>

<p>In the above programs, we have assigned the value of <a href="/java-programming/variables-literals">variables</a> ourselves to make this easier.</p>

<p>However, in real-world applications, these values may come from user input data, log files, form submission, etc.</p>

</div>
</section>
<section id="third2">
<h1>Java Ternary Operator</h1>
<p id="introduction">In Java, a ternary <a href="/java-programming/operators">operator</a> can be used to replace the <code>if…else</code> statement in certain situations. Before you learn about the ternary operator, make sure you visit <a href="/java-programming/if-else-statement">Java if...else statement</a>.</p>
</section>
<section id="third3">
<h1>Java for Loop</h1>
<div class="content">
  <p id="introduction">In computer programming, loops are used to repeat a block of code. For example, if you want to show a message <strong>100</strong> times, then rather than typing the same code <strong>100</strong> times, you can use a loop.</p>

<p id="introduction">In Java, there are three types of loops.</p>

<ul>
<li>for loop</li>
<li><a href="/java-programming/do-while-loop#syntax-while">while loop</a></li>
<li><a href="/java-programming/do-while-loop#do-while-loop">do...while loop</a></li>
</ul>

<p id="introduction">This tutorial focuses on the <code>for</code> loop. You will learn about the other types of loops in the upcoming tutorials.</p>

<hr>
<h2 id="for-loop">Java for Loop</h2>

<p>Java <code>for</code> loop is used to run a block of code for a certain number of times. The syntax of <code>for</code> loop is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">for</span> (initialExpression; testExpression; updateExpression) {
<span class="hljs-comment">// body of the loop</span>
}</code></pre>

<p>Here,</p>

<ol>
<li>The <var>initialExpression</var> initializes and/or declares <a href="/java-programming/variables-literals">variables</a> and executes only once.</li>
<li>The <code>condition</code> is evaluated. If the <code>condition</code> is <code>true</code>, the body of the <code>for</code> loop is executed.</li>
<li>The <code>updateExpression</code> updates the value of <code>initialExpression</code>.</li>
<li>The <strong>condition</strong> is evaluated again. The process continues until the <strong>condition</strong> is <code>false</code>.</li>
</ol>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>To learn more about the conditions, visit <a href="/java-programming/operators#equality-relational">Java relational</a> and <a href="/java-programming/operators#logical">logical operators</a>.</p>

<hr>
<figure><img src="assets/images/java-for-loop.png" title="Working of for loop in Java" alt="Working of for loop in Java with flowchart" width="320" height="493">
<figcaption>Flowchart of Java for loop</figcaption></figure>
<hr>
<h2 id="example-1">Example 1: Display a Text Five Times</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Program to print a text 5 times</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;
<span class="hljs-comment">// for loop  </span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
  System.out.println(<span class="hljs-string">"Java is fun"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Java is fun
Java is fun
Java is fun
Java is fun
Java is fun</samp></pre>

<p>Here is how this program works.</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Iteration</th>
<th>Variable</th>
<th>Condition: i 
</th><th>Action</th>
</tr>
<tr>
<td>1st</td>
<td><code>i = 1</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>Java is fun</samp> is printed.<br><var>i</var> is increased to <strong>2</strong>.</td>
</tr>
<tr>
<td>2nd</td>
<td><code>i = 2</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>Java is fun</samp> is printed.<br><var>i</var> is increased to <strong>3</strong>.</td>
</tr>
<tr>
<td>3rd</td>
<td><code>i = 3</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>Java is fun</samp> is printed.<br><var>i</var> is increased to <strong>4</strong>.</td>
</tr>
<tr>
<td>4th</td>
<td><code>i = 4</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>Java is fun</samp> is printed.<br><var>i</var> is increased to <strong>5</strong>.</td>
</tr>
<tr>
<td>5th</td>
<td><code>i = 5</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>Java is fun</samp> is printed.<br><var>i</var> is increased to <strong>6</strong>.</td>
</tr>
<tr>
<td>6th</td>
<td><code>i = 6</code><br><code>n = 5</code></td>
<td><code>false</code></td>
<td>The loop is terminated.</td>
</tr>
</tbody></table>
</div>

<hr>
<h2>Example 2: Display numbers from 1 to 5</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Program to print numbers from 1 to 5</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;
<span class="hljs-comment">// for loop  </span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
  System.out.println(i);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>1
2
3
4
5</samp></pre>

<p>Here is how the program works.</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Iteration</th>
<th>Variable</th>
<th>Condition: i 
</th><th>Action</th>
</tr>
<tr>
<td>1st</td>
<td><code>i = 1</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>1</samp> is printed.<br><var>i</var> is increased to <strong>2</strong>.</td>
</tr>
<tr>
<td>2nd</td>
<td><code>i = 2</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>2</samp> is printed.<br><var>i</var> is increased to <strong>3</strong>.</td>
</tr>
<tr>
<td>3rd</td>
<td><code>i = 3</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>3</samp> is printed.<br><var>i</var> is increased to <strong>4</strong>.</td>
</tr>
<tr>
<td>4th</td>
<td><code>i = 4</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>4</samp> is printed.<br><var>i</var> is increased to <strong>5</strong>.</td>
</tr>
<tr>
<td>5th</td>
<td><code>i = 5</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>5</samp> is printed.<br><var>i</var> is increased to <strong>6</strong>.</td>
</tr>
<tr>
<td>6th</td>
<td><code>i = 6</code><br><code>n = 5</code></td>
<td><code>false</code></td>
<td>The loop is terminated.</td>
</tr>
</tbody></table>
</div>

<hr>
<h2 id="example-2">Example 3: Display Sum of n Natural Numbers</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Program to find the sum of natural numbers from 1 to 1000.</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
<span class="hljs-keyword">int</span> n = <span class="hljs-number">1000</span>;

<span class="hljs-comment">// for loop</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
  <span class="hljs-comment">// body inside for loop</span>
  sum += i;     <span class="hljs-comment">// sum = sum + i</span>
}
   
System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Sum = 500500</samp></pre>

<p>Here, the value of <var>sum</var> is <strong>0</strong> initially. Then, the for loop is iterated from <code>i = 1 to 1000</code>. In each iteration, <var>i</var> is added to <var>sum</var> and its value is increased by <strong>1</strong>.</p>

<p>When <var>i</var> becomes <strong>1001</strong>, the test condition is <code>false</code> and <var>sum</var> will be equal to <code>0 + 1 + 2 + .... + 1000</code>.</p>

<p>The above program to add the sum of natural numbers can also be written as</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Program to find the sum of natural numbers from 1 to 1000.</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
<span class="hljs-keyword">int</span> n = <span class="hljs-number">1000</span>;

<span class="hljs-comment">// for loop</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i) {
  <span class="hljs-comment">// body inside for loop</span>
  sum += i;     <span class="hljs-comment">// sum = sum + i</span>
}
   
System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>The output of this program is the same as the <strong>Example 3</strong>.</p>

<hr>
<h2>Java for-each Loop</h2>

<p>The Java for loop has an alternative syntax that makes it easy to iterate through <a href="/java-programming/arrays">arrays</a> and <a href="/java-programming/collections">collections</a>. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// print array elements </span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-comment">// create an array</span>
<span class="hljs-keyword">int</span>[] numbers = {<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">5</span>};

<span class="hljs-comment">// iterating through the array </span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: numbers) {
   System.out.println(number);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>3
7
5
-5</samp></pre>

<p>Here, we have used the <strong>for-each loop</strong> to print each element of the <var>numbers</var> array one by one.</p>

<p>In the first iteration of the loop, <var>number</var> will be <strong>3</strong>, <var>number</var> will be <strong>7</strong> in second iteration and so on.</p>

<p>To learn more, visit <a href="/java-programming/enhanced-for-loop">Java for-each Loop</a>.</p>

<hr>
<h3 id="infinite">Java Infinite for Loop</h3>

<p>If we set the <strong>test expression</strong> in such a way that it never evaluates to <code>false</code>, the <code>for</code> loop will run forever. This is called infinite for loop. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Infinite for Loop</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Infinite</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; --i) {
        System.out.println(<span class="hljs-string">"Hello"</span>);
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Here, the test expression ,<code>i &lt;= 10</code>, is never <code>false</code> and <code>Hello</code> is printed repeatedly until the memory runs out.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/enhanced-for-loop">Enhanced For Loop</a></li>
<li><a href="/java-programming/nested-loop">Nested Loop</a></li>
<li><a href="/java-programming/break-statement">Break Statement</a></li>
<li><a href="/java-programming/continue-statement">Continue Statement</a></li>
</ul>

</div>
</section>
<section id="third4">
<h1>Java for-each Loop</h1>
<div class="content">
  <p id="introduction">In Java, the <strong>for-each</strong> loop is used to iterate through elements of <a href="/java-programming/arrays">arrays</a> and <a href="/java-programming/collections">collections</a> (like <a href="/java-programming/arraylist">ArrayList</a>). It is also known as the enhanced for loop.</p>

<hr>
<h2>for-each Loop Syntax</h2>

<p>The syntax of the Java <strong>for-each</strong> loop is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">for</span>(dataType item : array) {
...
}</code></pre>

<p>Here,</p>

<ul>
<li><strong>array</strong> - an array or a collection</li>
<li><strong>item</strong> - each item of array/collection is assigned to this variable</li>
<li><strong>dataType</strong> - the <a href="/java-programming/variables-primitive-data-types">data type</a> of the array/collection</li>
</ul>

<hr>
<h2>Example 1: Print Array Elements</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// print array elements </span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-comment">// create an array</span>
<span class="hljs-keyword">int</span>[] numbers = {<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">5</span>};

<span class="hljs-comment">// for each loop </span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: numbers) {
  System.out.println(number);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>3
9
5
-5</samp></pre>

<p>Here, we have used the <strong>for-each loop</strong> to print each element of the <var>numbers</var> array one by one.</p>

<ul>
<li>In the first iteration, <var>item</var> will be 3.</li>
<li>In the second iteration, <var>item</var> will be 9.</li>
<li>In the third iteration, <var>item</var> will be 5.</li>
<li>In the fourth iteration, <var>item</var> will be -5.</li>
</ul>

<hr>
<h2 id="example">Example 2: Sum of Array Elements</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Calculate the sum of all elements of an array</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// an array of numbers</span>
<span class="hljs-keyword">int</span>[] numbers = {<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>};
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;

<span class="hljs-comment">// iterating through each element of the array </span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: numbers) {
 sum += number;
}

System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Sum = 19</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above program, the execution of the <code>for each</code> loop looks as:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Iteration</th>
<th>Variables</th>
</tr>
<tr>
<td>1</td>
<td><var>number</var> = 3<br><var>sum</var> = 0 + 3 = 3</td>
</tr>
<tr>
<td>2</td>
<td><var>number</var> = 4<br><var>sum</var> = 3 + 4 = 7</td>
</tr>
<tr>
<td>3</td>
<td><var>number</var> = 5<br><var>sum</var> = 7 + 5 = 12</td>
</tr>
<tr>
<td>4</td>
<td><var>number</var> = -5<br><var>sum</var> = 12 + (-5) = 7</td>
</tr>
<tr>
<td>5</td>
<td><var>number</var> = 0<br><var>sum</var> = 7 + 0 = 7</td>
</tr>
<tr>
<td>6</td>
<td><var>number</var> = 12<br><var>sum</var> = 7 + 12 = 19</td>
</tr>
</tbody></table>
</div>

<p>As we can see, we have added each element of the <var>numbers</var> array to the <var>sum</var> variable in each iteration of the loop.</p>

<hr>
<h2 id="difference">for loop Vs for-each loop</h2>

<p>Let's see how a <code>for-each</code> loop is different from a regular <a href="/java-programming/for-loop">Java for loop</a>.</p>

<h3>1. Using for loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">char</span>[] vowels = {<span class="hljs-string">'a'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'u'</span>};

<span class="hljs-comment">// iterating through an array using a for loop</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vowels.length; ++ i) {
 System.out.println(vowels[i]);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>a
e
i
o
u</samp></pre>

<h3>2. Using for-each Loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">char</span>[] vowels = {<span class="hljs-string">'a'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'u'</span>};

<span class="hljs-comment">// iterating through an array using the for-each loop</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> item: vowels) {
 System.out.println(item);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>a
e
i
o
u</samp></pre>

<p>Here, the output of both programs is the same. However, the <strong>for-each</strong> loop is easier to write and understand.</p>

<p>This is why the <strong>for-each</strong> loop is preferred over the <strong>for</strong> loop when working with arrays and collections.</p>

</div>
</section>
<section id="third5">
<h1>Java while and do...while Loop</h1>
<div class="content">
  <p id="introduction">In computer programming, loops are used to repeat a block of code. For example, if you want to show a message 100 times, then you can use a loop. It's just a simple example; you can achieve much more with loops.</p>

<p>In the previous tutorial, you learned about <a href="/java-programming/for-loop">Java for loop</a>. Here, you are going to learn about <code>while</code> and <code>do...while</code> loops.</p>

<hr>
<h2 id="while-loop">Java while loop</h2>

<p>Java <code>while</code> loop is used to run a specific code until a certain condition is met. The syntax of the <code>while</code> loop is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">while</span> (testExpression) {
<span class="hljs-comment">// body of loop</span>
}</code></pre>

<p>Here,</p>

<ol>
<li>A <code>while</code> loop evaluates the <strong>textExpression</strong> inside the parenthesis <code>()</code>.</li>
<li>If the <strong>textExpression</strong> evaluates to <code>true</code>, the code inside the <code>while</code> loop is executed.</li>
<li>The <strong>textExpression</strong> is evaluated again.</li>
<li>This process continues until the <strong>textExpression</strong> is <code>false</code>.</li>
<li>When the <strong>textExpression</strong> evaluates to <code>false</code>, the loop stops.</li>
</ol>

<p>To learn more about the conditions, visit <a href="/java-programming/operators#equality-relational">Java relational</a> and <a href="/java-programming/operators#logical">logical operators</a>.</p>

<hr>
<h2 id="flowchart-while">Flowchart of while loop</h2>

<figure><img src="assets/images/java-while-loop.png" title="Flowchart of while loop in Java" alt="Flowchart of while loop in Java" width="350" height="460">
<figcaption>Flowchart of Java while loop</figcaption></figure>
<hr>
<h3 id="example-while">Example 1: Display Numbers from 1 to 5</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Program to display numbers from 1 to 5</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// declare variables</span>
<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, n = <span class="hljs-number">5</span>;

<span class="hljs-comment">// while loop from 1 to 5</span>
<span class="hljs-keyword">while</span>(i &lt;= n) {
  System.out.println(i);
  i++;
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>1
2
3
4
5</samp></pre>

<p>Here is how this program works.</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Iteration</th>
<th>Variable</th>
<th>Condition: i 
</th><th>Action</th>
</tr>
<tr>
<td>1st</td>
<td><code>i = 1</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>1</samp> is printed.<br><var>i</var> is increased to <strong>2</strong>.</td>
</tr>
<tr>
<td>2nd</td>
<td><code>i = 2</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>2</samp> is printed.<br><var>i</var> is increased to <strong>3</strong>.</td>
</tr>
<tr>
<td>3rd</td>
<td><code>i = 3</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>3</samp> is printed.<br><var>i</var> is increased to <strong>4</strong>.</td>
</tr>
<tr>
<td>4th</td>
<td><code>i = 4</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>4</samp> is printed.<br><var>i</var> is increased to <strong>5</strong>.</td>
</tr>
<tr>
<td>5th</td>
<td><code>i = 5</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>5</samp> is printed.<br><var>i</var> is increased to <strong>6</strong>.</td>
</tr>
<tr>
<td>6th</td>
<td><code>i = 6</code><br><code>n = 5</code></td>
<td><code>false</code></td>
<td>The loop is terminated</td>
</tr>
</tbody></table>
</div>

<hr>
<h3>Example 2: Sum of Positive Numbers Only</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java program to find the sum of positive numbers</span>
<span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;

<span class="hljs-comment">// create an object of Scanner class</span>
Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);

<span class="hljs-comment">// take integer input from the user</span>
System.out.println(<span class="hljs-string">"Enter a number"</span>);
<span class="hljs-keyword">int</span> number = input.nextInt();
 
<span class="hljs-comment">// while loop continues </span>
<span class="hljs-comment">// until entered number is positive</span>
<span class="hljs-keyword">while</span> (number &gt;= <span class="hljs-number">0</span>) {
  <span class="hljs-comment">// add only positive numbers</span>
  sum += number;

  System.out.println(<span class="hljs-string">"Enter a number"</span>);
  number = input.nextInt();
}
 
System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
input.close();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Enter a number
25
Enter a number
9
Enter a number
5
Enter a number
-3
Sum = 39</samp></pre>

<p>In the above program, we have used the <a href="/java-programming/scanner">Scanner class</a> to take input from the user. Here, <code>nextInt()</code> takes integer input from the user.</p>

<p>The <code>while</code> loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the <code>sum</code> variable.</p>

<p>When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.</p>

<hr>
<h2 id="do-while-loop">Java do...while loop</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The <code>do...while</code> loop is similar to while loop. However, the body of <code>do...while</code> loop is executed once before the test expression is checked. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">do</span> {
<span class="hljs-comment">// body of loop</span>
} <span class="hljs-keyword">while</span>(textExpression);</code></pre>

<p>Here,</p>

<ol>
<li>The body of the loop is executed at first. Then the <strong>textExpression</strong> is evaluated.</li>
<li>If the <strong>textExpression</strong> evaluates to <code>true</code>, the body of the loop inside the <code>do</code> statement is executed again.</li>
<li>The <strong>textExpression</strong> is evaluated once again.</li>
<li>If the <strong>textExpression</strong> evaluates to <code>true</code>, the body of the loop inside the <code>do</code> statement is executed again.</li>
<li>This process continues until the <strong>textExpression</strong> evaluates to <code>false</code>. Then the loop stops.</li>
</ol>

<hr>
<h3 id="do-while-flowchart">Flowchart of do...while loop</h3>

<figure><img src="assets/images/java-do-while-loop.png" title="Flowchart of do...while loop in Java" alt="Flowchart of do...while loop in Java" width="300" height="383">
<figcaption>Flowchart of Java do while loop</figcaption></figure>
<hr>
<p>Let's see the working of <code>do...while</code> loop.</p>

<h3 id="do-while-example">Example 3: Display Numbers from 1 to 5</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java Program to display numbers from 1 to 5</span>

<span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-comment">// Program to find the sum of natural numbers from 1 to 100.</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, n = <span class="hljs-number">5</span>;

<span class="hljs-comment">// do...while loop from 1 to 5</span>
<span class="hljs-keyword">do</span> {
  System.out.println(i);
  i++;
} <span class="hljs-keyword">while</span>(i &lt;= n);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>1
2
3
4
5</samp></pre>

<p>Here is how this program works.</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Iteration</th>
<th>Variable</th>
<th>Condition: i 
</th><th>Action</th>
</tr>
<tr>
<td> </td>
<td><code>i = 1</code><br><code>n = 5</code></td>
<td>not checked</td>
<td><samp>1</samp> is printed.<br><var>i</var> is increased to <strong>2</strong>.</td>
</tr>
<tr>
<td>1st</td>
<td><code>i = 2</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>2</samp> is printed.<br><var>i</var> is increased to <strong>3</strong>.</td>
</tr>
<tr>
<td>2nd</td>
<td><code>i = 3</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>3</samp> is printed.<br><var>i</var> is increased to <strong>4</strong>.</td>
</tr>
<tr>
<td>3rd</td>
<td><code>i = 4</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>4</samp> is printed.<br><var>i</var> is increased to <strong>5</strong>.</td>
</tr>
<tr>
<td>4th</td>
<td><code>i = 5</code><br><code>n = 5</code></td>
<td><code>true</code></td>
<td><samp>5</samp> is printed.<br><var>i</var> is increased to <strong>6</strong>.</td>
</tr>
<tr>
<td>5th</td>
<td><code>i = 6</code><br><code>n = 5</code></td>
<td><code>false</code></td>
<td>The loop is terminated</td>
</tr>
</tbody></table>
</div>

<hr>
<h3>Example 4: Sum of Positive Numbers</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java program to find the sum of positive numbers</span>
<span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
<span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;

<span class="hljs-comment">// create an object of Scanner class</span>
Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);
 
<span class="hljs-comment">// do...while loop continues </span>
<span class="hljs-comment">// until entered number is positive</span>
<span class="hljs-keyword">do</span> {
  <span class="hljs-comment">// add only positive numbers</span>
  sum += number;
  System.out.println(<span class="hljs-string">"Enter a number"</span>);
  number = input.nextInt();
} <span class="hljs-keyword">while</span>(number &gt;= <span class="hljs-number">0</span>); 
 
System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
input.close();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output 1</strong></p>

<pre><samp>Enter a number
25
Enter a number
9
Enter a number
5
Enter a number
-3
Sum = 39</samp></pre>

<p>Here, the user enters a positive number, that number is added to the <var>sum</var> variable. And this process continues until the number is negative. When the number is negative, the loop terminates and displays the sum without adding the negative number.</p>

<p><strong>Output 2</strong></p>

<pre><samp>Enter a number
-8
Sum is 0</samp></pre>

<p>Here, the user enters a negative number. The test condition will be <code>false</code> but the code inside of the loop executes once.</p>

<hr>
<h3 id="infinite-loop">Infinite while loop</h3>

<p>If <strong>the condition</strong> of a loop is always <code>true</code>, the loop runs for infinite times (until the memory is full). For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// infinite while loop</span>
<span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>){
<span class="hljs-comment">// body of loop</span>
}</code></pre>

<p>Here is an example of an infinite <code>do...while</code> loop.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// infinite do...while loop</span>
<span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;
<span class="hljs-keyword">do</span> {
<span class="hljs-comment">// body of loop</span>
} <span class="hljs-keyword">while</span>(count == <span class="hljs-number">1</span>)</code></pre>

<p>In the above programs, the <strong>textExpression</strong> is always <code>true</code>. Hence, the loop body will run for infinite times.</p>

<hr>
<h2 id="for-vs-while">for and while loops</h2>

<p>The <code>for</code> loop is used when the number of iterations is known. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">5</span>; ++i) {
<span class="hljs-comment">// body of loop</span>
}</code></pre>

<p>And <code>while</code> and <code>do...while</code> loops are generally used when the number of iterations is unknown. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">while</span> (condition) {
<span class="hljs-comment">// body of loop</span>
}</code></pre>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/nested-loop">Nested Loop in Java</a> </li>
</ul>

</div>
</section>
<section id="third6">
<h1>Java break Statement</h1>
<div class="content">
  <p id="introduction">While working with loops, it is sometimes desirable to skip some statements inside the loop or terminate the loop immediately without checking the test expression.</p>

<p>In such cases, <code>break</code> and <code>continue</code> statements are used. You will learn about the <a href="/java-programming/continue-statement" title="Java continue Statement">Java continue statement</a> in the next tutorial.</p>

<hr>
<p>The <code>break</code> statement in Java terminates the loop immediately, and the control of the program moves to the next statement following the loop.</p>

<p>It is almost always used with decision-making statements (<a href="/java-programming/if-else-statement">Java if...else Statement</a>).</p>

<p>Here is the syntax of the break statement in Java:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">break</span>;</code></pre>

<hr>
<h2 id="working-of-break">How break statement works?</h2>

<figure><img alt="How break statement works in Java programming?" height="354" src="assets/images/java-break-statement-works.jpg" title="Working of Java break Statement" width="560">
<figcaption>Working of Java break Statement</figcaption>
</figure>

<hr>
<h3 id="break-example">Example 1: Java break statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-comment">// for loop</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) {

        <span class="hljs-comment">// if the value of i is 5 the loop terminates  </span>
        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) {
            <span class="hljs-keyword">break</span>;
        }      
        System.out.println(i);
    }   
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1
2
3
4</samp></pre>

<p>In the above program, we are using the <code>for</code> loop to print the value of <var>i</var> in each iteration. To know how <code>for</code> loop works, visit the <a href="/java-programming/for-loop" title="Java for Loop">Java for loop</a>. Here, notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) {
<span class="hljs-keyword">break</span>;
}</code></pre>

<p>This means when the value of <var>i</var> is equal to 5, the loop terminates. Hence we get the output with values less than 5 only.</p>

<hr>
<h3>Example 2: Java break statement</h3>

<p>The program below calculates the sum of numbers entered by the user until user enters a negative number.</p>

<p>To take input from the user, we have used the <code>Scanner</code> object. To learn more about <code>Scanner</code>, visit <a href="/java-programming/scanner" title="Java Scanner">Java Scanner</a>.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInputSum</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    Double number, sum = <span class="hljs-number">0.0</span>;

    <span class="hljs-comment">// create an object of Scanner</span>
    Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);
  
    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {
        System.out.print(<span class="hljs-string">"Enter a number: "</span>);

        <span class="hljs-comment">// takes double input from user</span>
        number = input.nextDouble();
     
        <span class="hljs-comment">// if number is negative the loop terminates</span>
        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0.0</span>) {
            <span class="hljs-keyword">break</span>;
        }
     
       sum += number;
    }
    System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong>:</p>

<pre><samp>Enter a number: 3.2
Enter a number: 5
Enter a number: 2.3
Enter a number: 0
Enter a number: -4.5
Sum = 10.5</samp></pre>

<p>In the above program, the test expression of the <code>while</code> loop is always <code>true</code>. Here, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0.0</span>) {
<span class="hljs-keyword">break</span>;
}</code></pre>

<p>This means when the user input negative numbers, the while loop is terminated.</p>

<hr>
<h2 id="break-nested-loops">Java break and Nested Loop</h2>

<p>In the case of <a href="/java-programming/nested-loop" title="Java nested Loop">nested loops</a>, the <code>break</code> statement terminates the innermost loop.</p>

<figure><img alt="The break statement terminates the innermost while loop in case of nested loops." height="238" src="assets/images/nested-while-loop-break.jpg" title="Working of break Statement with Nested Loops" width="300">
<figcaption>Working of break Statement with Nested Loops</figcaption>
</figure>

<p>Here, the break statement terminates the innermost <code>while</code> loop, and control jumps to the outer loop.</p>

<hr>
<h2 id="labeled-break">Labeled break Statement</h2>

<p>Till now, we have used the unlabeled break statement. It terminates the innermost loop and switch statement. However, there is another form of break statement in Java known as the labeled break.</p>

<p>We can use the labeled break statement to terminate the outermost loop as well.</p>

<figure><img alt="The labeled break statement is used to break the outermost loop." height="276" src="assets/images/labeled-break-statement-Java.jpg" title="Working of the labeled break statement in Java" width="350">
<figcaption>Working of the labeled break statement in Java</figcaption>
</figure>

<p>As you can see in the above image, we have used the <var>label</var> identifier to specify the outer loop. Now, notice how the <code>break</code> statement is used (<code>break label;</code>).</p>

<p>Here, the <code>break</code> statement is terminating the labeled statement (i.e. outer loop). Then, the control of the program jumps to the statement after the labeled statement.</p>

<p>Here's another example:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">while</span> (testExpression) {
<span class="hljs-comment">// codes</span>
second:
<span class="hljs-keyword">while</span> (testExpression) {
  <span class="hljs-comment">// codes</span>
  <span class="hljs-keyword">while</span>(testExpression) {
     <span class="hljs-comment">// codes</span>
     <span class="hljs-keyword">break</span> second;
  }
}
<span class="hljs-comment">// control jumps here</span>
}</code></pre>

<p>In the above example, when the statement <code>break second;</code> is executed, the <code>while</code> loop labeled as <var>second</var> is terminated. And, the control of the program moves to the statement after the second <code>while</code> loop.</p>

<hr>
<h3 id="example-labeled-break">Example 3: labeled break Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LabeledBreak</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// the for loop is labeled as first   </span>
    first:
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) {

        <span class="hljs-comment">// the for loop is labeled as second</span>
        second:
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j ++ ) {
            System.out.println(<span class="hljs-string">"i = "</span> + i + <span class="hljs-string">"; j = "</span> +j);
         
            <span class="hljs-comment">// the break statement breaks the first for loop</span>
            <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2</span>)
                <span class="hljs-keyword">break</span> first;
        }
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>i = 1; j = 1
i = 1; j = 2
i = 2; j = 1</samp></pre>

<p>In the above example, the <code>labeled break</code> statement is used to terminate the loop labeled as first. That is,</p>

<pre style="max-height: 600px;"><code class="java hljs">first:
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) {...}</code></pre>

<p>Here, if we change the statement <code>break first;</code> to <code>break second;</code> the program will behave differently. In this case, <code>for</code> loop labeled as second will be terminated. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LabeledBreak</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-comment">// the for loop is labeled as first</span>
    first:
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) {

        <span class="hljs-comment">// the for loop is labeled as second</span>
        second:
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j ++ ) {

            System.out.println(<span class="hljs-string">"i = "</span> + i + <span class="hljs-string">"; j = "</span> +j);
   
            <span class="hljs-comment">// the break statement terminates the loop labeled as second   </span>
            <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2</span>)
                <span class="hljs-keyword">break</span> second;
        }
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>i = 1; j = 1
i = 1; j = 2
i = 2; j = 1
i = 3; j = 1
i = 3; j = 2
i = 4; j = 1
i = 4; j = 2</samp></pre>

<p class="note-tip"><strong>Note</strong>: The <code>break</code> statement is also used to terminate cases inside the <code>switch</code> statement. To learn more, visit the <a href="/java-programming/switch-statement">Java switch statement</a>.</p>
</div>
</section>
<section id="third7">
<h1>Java continue Statement</h1>
<div class="content">
  <p>While working with loops, sometimes you might want to skip some statements or terminate the loop. In such cases, <code>break</code> and <code>continue</code> statements are used.</p>

<p>To learn about the <code>break</code> statement, visit <a href="/java-programming/break-statement">Java break</a>. Here, we will learn about the <code>continue</code> statement.</p>

<hr>
<h2 id="continue">Java continue</h2>

<p>The <code>continue</code> statement skips the current iteration of a loop (<code>for</code>, <code>while</code>, <code>do...while</code>, etc).</p>

<p>After the <code>continue</code> statement, the program moves to the end of the loop. And, test expression is evaluated (update statement is evaluated in case of the for loop).</p>

<p>Here's the syntax of the continue statement.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">continue</span>;</code></pre>

<p class="note-tip"><strong>Note</strong>: The continue statement is almost always used in decision-making statements (<a href="/java-programming/if-else-statement">if...else Statement</a>).</p>

<hr>
<h2 id="working-of-continue">Working of Java continue statement</h2>

<figure><img alt="The working of continue statement with Java while, do...while, and for loop." height="499" src="assets/images/java-continue.png" title="Working of Java continue statement" width="560">
<figcaption>Working of Java continue Statement</figcaption>
</figure>

<hr>
<h3 id="continue-example">Example 1: Java continue statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// for loop</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) {

  <span class="hljs-comment">// if value of i is between 4 and 9</span>
  <span class="hljs-comment">// continue is executed</span>
  <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">4</span> &amp;&amp; i &lt; <span class="hljs-number">9</span>) {
    <span class="hljs-keyword">continue</span>;
  }
  System.out.println(i);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1
2
3
4
9
10</samp></pre>

<p>In the above program, we are using the <code>for</code> loop to print the value of <var>i</var> in each iteration. To know how <code>for</code> loop works, visit <a href="/java-programming/for-loop">Java for loop</a>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">4</span> &amp;&amp; i &lt; <span class="hljs-number">9</span>) {
<span class="hljs-keyword">continue</span>;
}</code></pre>

<p>Here, the <code>continue</code> statement is executed when the value of <var>i</var> becomes more than <strong>4</strong> and less than <strong>9</strong>.</p>

<p>It then skips the print statement for those values. Hence, the output skips the values <strong>5</strong>, <strong>6</strong>, <strong>7</strong>, and <strong>8</strong>.</p>

<hr>
<h3>Example 2: Compute the sum of 5 positive numbers</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Scanner;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

Double number, sum = <span class="hljs-number">0.0</span>;
<span class="hljs-comment">// create an object of Scanner</span>
Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; ++i) {
  System.out.print(<span class="hljs-string">"Enter number "</span> + i + <span class="hljs-string">" : "</span>);
  <span class="hljs-comment">// takes input from the user</span>
  number = input.nextDouble();

  <span class="hljs-comment">// if number is negative</span>
  <span class="hljs-comment">// continue statement is executed</span>
  <span class="hljs-keyword">if</span> (number &lt;= <span class="hljs-number">0.0</span>) {
    <span class="hljs-keyword">continue</span>;
  }

  sum += number;
}
System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
input.close();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Enter number 1: 2.2
Enter number 2: 5.6
Enter number 3: 0
Enter number 4: -2.4
Enter number 5: -3
Sum = 7.8</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we have used the for loop to print the sum of 5 positive numbers. Notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0.0</span>) {
<span class="hljs-keyword">continue</span>;
}</code></pre>

<p>Here, when the user enters a negative number, the <code>continue</code> statement is executed. This skips the current iteration of the loop and takes the program control to the update expression of the loop.</p>

<p class="note-tip"><strong>Note</strong>: To take input from the user, we have used the <code>Scanner</code> object. To learn more, visit <a href="/java-programming/scanner">Java Scanner</a>.</p>

<hr>
<h2 id="continue-nested-loops">Java continue with Nested Loop</h2>

<p>In the case of <a href="/java-programming/nested-loop">nested loops in Java</a>, the <code>continue</code> statement skips the current iteration of the innermost loop.</p>

<figure><img alt="The continue statement skips the innermost loop while working with the nested loop in Java. " height="365" src="assets/images/java-continue-with-nested-loop.png" title="Working of the continue Statement with Nested Loops" width="340">
<figcaption>Working of Java continue statement with Nested Loops</figcaption>
</figure>

<hr>
<h3 id="example-continue-nested">Example 3: continue with Nested Loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;

<span class="hljs-comment">// outer loop</span>
<span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">3</span>) {

  System.out.println(<span class="hljs-string">"Outer Loop: "</span> + i);

  <span class="hljs-comment">// inner loop</span>
  <span class="hljs-keyword">while</span>(j &lt;= <span class="hljs-number">3</span>) {

    <span class="hljs-keyword">if</span>(j == <span class="hljs-number">2</span>) {
      j++;
      <span class="hljs-keyword">continue</span>;
    }

    System.out.println(<span class="hljs-string">"Inner Loop: "</span> + j);
    j++;
  }
  i++;
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Outer Loop: 1
Inner Loop: 1
Inner Loop: 3
Outer Loop: 2
Outer Loop: 3</samp></pre>

<p>In the above example, we have used the nested <a href="/java-programming/do-while-loop">while loop</a>. Note that we have used the <code>continue</code> statement inside the inner loop.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span>(j == <span class="hljs-number">2</span>) {
j++;
<span class="hljs-keyword">continue</span>:
}</code></pre>

<p>Here, when the value of <var>j</var> is <strong>2</strong>, the value of <var>j</var> is increased and the <code>continue</code> statement is executed.</p>

<p>This skips the iteration of the inner loop. Hence, the text <var>Inner Loop: 2</var> is skipped from the output.</p>

<hr>
<h2 id="labeled-continue">Labeled continue Statement</h2>

<p>Till now, we have used the unlabeled <code>continue</code> statement. However, there is another form of <code>continue</code> statement in Java known as <strong>labeled continue</strong>.</p>

<p>It includes the label of the loop along with the <code>continue</code> keyword. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">continue</span> label;</code></pre>

<p>Here, the <code>continue</code> statement skips the current iteration of the loop specified by <var>label</var>.</p>

<figure><img alt="The labeled continue statement skips the current iteration of the loop specified by the label." height="419" src="assets/images/java-labeled-continue.png" title="Working of the labeled continue Statement in Java" width="340">
<figcaption>Working of the Java labeled continue Statement</figcaption>
</figure>

<p>We can see that the label identifier specifies the outer loop. Notice the use of the continue inside the inner loop.</p>

<p>Here, the <code>continue</code> statement is skipping the current iteration of the labeled statement (i.e. outer loop). Then, the program control goes to the next iteration of the labeled statement.</p>

<hr>
<h3 id="example-labeled-continue">Example 4: labeled continue Statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// outer loop is labeled as first</span>
first:
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; ++i) {

  <span class="hljs-comment">// inner loop</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">5</span>; ++j) {
    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || j == <span class="hljs-number">2</span>)

      <span class="hljs-comment">// skips the current iteration of outer loop</span>
      <span class="hljs-keyword">continue</span> first;
    System.out.println(<span class="hljs-string">"i = "</span> + i + <span class="hljs-string">"; j = "</span> + j);
  }
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>i = 1; j = 1
i = 2; j = 1
i = 4; j = 1
i = 5; j = 1</samp></pre>

<p>In the above example, the <code>labeled continue</code> statement is used to skip the current iteration of the loop labeled as <var>first</var>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (i==<span class="hljs-number">3</span> || j==<span class="hljs-number">2</span>)
<span class="hljs-keyword">continue</span> first;</code></pre>

<p>Here, we can see the outermost <code>for</code> loop is labeled as <var>first</var>,</p>

<pre style="max-height: 600px;"><code class="java hljs">first:
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; ++i) {..}</code></pre>

<p>Hence, the iteration of the outer <code>for</code> loop is skipped if the value of <var>i</var> is 3 or the value of <var>j</var> is 2.</p>

<p class="note-tip"><strong>Note</strong>: The use of labeled <code>continue</code> is often discouraged as it makes your code hard to understand. If you are in a situation where you have to use labeled <code>continue</code>, refactor your code and try to solve it in a different way to make it more readable.</p>
</div>
</section>
<section id="third8">
<h1>Java switch Statement</h1>
<div class="content">
  <p id="introduction">The <code>switch</code> statement allows us to execute a block of code among many alternatives.</p>

<p><strong>Syntax:</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">switch</span> (expression) {

<span class="hljs-keyword">case</span> value1:
<span class="hljs-comment">// code</span>
<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> value2:
<span class="hljs-comment">// code</span>
<span class="hljs-keyword">break</span>;

...
...

<span class="hljs-keyword">default</span>:
<span class="hljs-comment">// default statements</span>
}</code></pre>

<p><strong>How does the switch-case statement work?</strong></p>

<p>The <var>expression</var> is evaluated once and compared with the values of each case.</p>

<ul>
<li>If <var>expression</var> matches with <var>value1</var>, the code of <code>case value1</code> are executed. Similarly, the code of <code>case value2</code> is executed if <var>expression</var> matches with <var>value2</var></li>
<li>If there is no match, the code of the <strong>default case</strong> is executed</li>
</ul>

<p class="note-tip"><strong>Note</strong>: The working of the switch-case statement is similar to the <a href="/java-programming/if-else-statement#if-else-ladder">Java if...else...if ladder</a>. However, the syntax of the <code>switch</code> statement is cleaner and much easier to read and write.</p>

<hr>
<h2 id="example">Example: Java switch Statement</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java Program to check the size</span>
<span class="hljs-comment">// using the switch...case statement</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> number = <span class="hljs-number">44</span>;
String size;

<span class="hljs-comment">// switch statement to check size</span>
<span class="hljs-keyword">switch</span> (number) {

  <span class="hljs-keyword">case</span> <span class="hljs-number">29</span>:
    size = <span class="hljs-string">"Small"</span>;
    <span class="hljs-keyword">break</span>;

  <span class="hljs-keyword">case</span> <span class="hljs-number">42</span>:
    size = <span class="hljs-string">"Medium"</span>;
    <span class="hljs-keyword">break</span>;

  <span class="hljs-comment">// match the value of week</span>
  <span class="hljs-keyword">case</span> <span class="hljs-number">44</span>:
    size = <span class="hljs-string">"Large"</span>;
    <span class="hljs-keyword">break</span>;

  <span class="hljs-keyword">case</span> <span class="hljs-number">48</span>:
    size = <span class="hljs-string">"Extra Large"</span>;
    <span class="hljs-keyword">break</span>;
  
  <span class="hljs-keyword">default</span>:
    size = <span class="hljs-string">"Unknown"</span>;
    <span class="hljs-keyword">break</span>;

}
System.out.println(<span class="hljs-string">"Size: "</span> + size);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Size: Large</samp></pre>

<p>In the above example, we have used the <code>switch</code> statement to find the size. Here, we have a variable <var>number</var>. The variable is compared with the value of each case statement.</p>

<p>Since the value matches with <strong>44</strong>, the code of <code>case 44</code> is executed.</p>

<pre style="max-height: 600px;"><code class="java hljs">size = <span class="hljs-string">"Large"</span>;
<span class="hljs-keyword">break</span>;</code></pre>

<p>Here, the <var>size</var> variable is assigned with the value <code>Large</code>.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Also Read:</strong></p>
<ul>
<li><a href="/java-programming/examples/calculator-switch-case">Create a Simple Calculator Using the Java switch Statement</a></li>
</ul>
<hr>
<h2 id="flowchart">Flowchart of switch Statement</h2>

<figure><img alt="Flowchart of the Java switch statement" src="assets/images/java-switch-case-implementation.png" title="Flow chart of the Java switch statement" height="668" width="420">
<figcaption>Flow chart of the Java switch statement</figcaption>
</figure>

<hr>
<h2 id="break-in-switch">break Statement in Java switch...case</h2>

<p>Notice that we have been using <code>break</code> in each case block.</p>

<pre style="max-height: 600px;"><code class="java hljs"> ...
<span class="hljs-keyword">case</span> <span class="hljs-number">29</span>:
size = <span class="hljs-string">"Small"</span>;
<span class="hljs-keyword">break</span>;
...</code></pre>

<p>The <code>break</code> statement is used to terminate the <strong>switch-case</strong> statement. If <code>break</code> is not used, all the cases after the matching case are also executed. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> expression = <span class="hljs-number">2</span>;

<span class="hljs-comment">// switch statement to check size</span>
<span class="hljs-keyword">switch</span> (expression) {
  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
    System.out.println(<span class="hljs-string">"Case 1"</span>);

    <span class="hljs-comment">// matching case</span>
  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:
    System.out.println(<span class="hljs-string">"Case 2"</span>);

  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:
    System.out.println(<span class="hljs-string">"Case 3"</span>);

  <span class="hljs-keyword">default</span>:
    System.out.println(<span class="hljs-string">"Default case"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Case 2
Case 3      
Default case</samp></pre>

<p>In the above example, <var>expression</var> matches with <code>case 2</code>. Here, we haven't used the break statement after each case.</p>

<p>Hence, all the cases after <code>case 2</code> are also executed.</p>

<p>This is why the <code>break</code> statement is needed to terminate the <strong>switch-case</strong> statement after the matching case. To learn more, visit <a href="/java-programming/break-statement">Java break Statement</a>.</p>

<hr>
<h2 id="default">default Case in Java switch-case</h2>

<p>The switch statement also includes an <strong>optional default case</strong>. It is executed when the expression doesn't match any of the cases. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> expression = <span class="hljs-number">9</span>;

<span class="hljs-keyword">switch</span>(expression) {
    
  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:
    System.out.println(<span class="hljs-string">"Small Size"</span>);
    <span class="hljs-keyword">break</span>;

  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:
    System.out.println(<span class="hljs-string">"Large Size"</span>);
    <span class="hljs-keyword">break</span>;
        
  <span class="hljs-comment">// default case</span>
  <span class="hljs-keyword">default</span>:
    System.out.println(<span class="hljs-string">"Unknown Size"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Unknown Size</samp></pre>

<p>In the above example, we have created a <strong>switch-case</strong> statement. Here, the value of <var>expression</var> doesn't match with any of the cases.</p>

<p>Hence, the code inside the <strong>default case</strong> is executed.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">default</span>:
System.out.println(<span class="hljs-string">"Unknown Size);</span></code></pre>

<div class="note-tip">
<p><strong>Note</strong>: The Java switch statement only works with:</p>

<ul>
<li><a href="/java-programming/variables-primitive-data-types#data-types">Primitive data types</a>: byte, short, char, and int</li>
<li><a href="/java-programming/enums">Enumerated types</a></li>
<li><a href="/java-programming/string">String Class</a></li>
<li><a href="/java-programming/wrapper">Wrapper Classes</a>: Character, Byte, Short, and Integer.</li>
</ul>
</div>
<hr>
<p><strong>Also Read:</strong></p>
<ul>
<li><a href="/java-programming/examples/implement-switch-on-strings" title="switch Implementation on Strings">Implementation of switch...case on Strings</a></li>
</ul>  </div>
</section>

<!-- four menu sections -->
<section id="four1">
<h1>Java Arrays</h1>
<div class="content">
  <p id="introduction">An array is a collection of similar types of data.</p>

<p>For example, if we want to store the names of 100 people then we can create an array of the string type that can store 100 names.</p>

<pre style="max-height: 600px;"><code class="java hljs">String[] array = <span class="hljs-keyword">new</span> String[<span class="hljs-number">100</span>];</code></pre>

<p>Here, the above array cannot store more than 100 names. The number of values in a Java array is always fixed.</p>

<hr>
<h2 id="declaration">How to declare an array in Java?</h2>

<p>In Java, here is how we can declare an array.</p>

<pre style="max-height: 600px;"><code class="java hljs">dataType[] arrayName;</code></pre>

<ul>
<li><var>dataType</var> - it can be <a href="/java-programming/variables-primitive-data-types#data-types">primitive data types</a> like <code>int</code>, <code>char</code>, <code>double</code>, <code>byte</code>, etc. or <a href="/java-programming/class-objects">Java objects</a></li>
<li><var>arrayName</var> - it is an <a href="/java-programming/keywords-identifiers#identifiers">identifier</a></li>
</ul>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">double</span>[] data;</code></pre>

<p>Here, <var>data</var> is an array that can hold values of type <code>double</code>.</p>

<p><strong>But, how many elements can array this hold?</strong></p>

<p>Good question! To define the number of elements that an array can hold, we have to allocate memory for the array in Java. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// declare an array</span>
<span class="hljs-keyword">double</span>[] data;

<span class="hljs-comment">// allocate memory</span>
data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">10</span>];</code></pre>

<p>Here, the array can store <strong>10</strong> elements. We can also say that the <strong>size or length</strong> of the array is 10.</p>

<p>In Java, we can declare and allocate the memory of an array in one single statement. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">double</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">10</span>];</code></pre>

<hr>
<h2 id="initialization">How to Initialize Arrays in Java?</h2>

<p>In Java, we can initialize arrays during declaration. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">//declare and initialize and array</span>
<span class="hljs-keyword">int</span>[] age = {<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>};</code></pre>

<p>Here, we have created an array named age and initialized it with the values inside the curly brackets.</p>

<p>Note that we have not provided the size of the array. In this case, the Java compiler automatically specifies the size by counting the number of elements in the array (i.e. 5).</p>

<p>In the Java array, each memory location is associated with a number. The number is known as an array index. We can also initialize arrays in Java, using the index number. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// declare an array</span>
<span class="hljs-keyword">int</span>[] age = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];

<span class="hljs-comment">// initialize array</span>
age[<span class="hljs-number">0</span>] = <span class="hljs-number">12</span>;
age[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>;
age[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;
..</code></pre>

<figure><img alt="Elements are stored in the array" height="74" src="assets/images/initialize-array-during-declaration-java.jpg" title="Array initialization" width="300">
<figcaption>Java Arrays initialization</figcaption>
</figure>

<div class="note-tip">
<p><strong>Note</strong>:</p>

<ul>
<li>Array indices always start from 0. That is, the first element of an array is at index 0.</li>
<li>If the size of an array is <var>n</var>, then the last element of the array will be at index <var>n-1</var>.</li>
</ul>
</div>

<hr>
<h2 id="access-array">How to Access Elements of an Array in Java?</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>We can access the element of an array using the index number. Here is the syntax for accessing elements of an array,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// access array elements</span>
array[index]</code></pre>

<p>Let's see an example of accessing array elements using index numbers.</p>

<h3>Example: Access Array Elements</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an array</span>
<span class="hljs-keyword">int</span>[] age = {<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>};

<span class="hljs-comment">// access each array elements</span>
System.out.println(<span class="hljs-string">"Accessing Elements of Array:"</span>);
System.out.println(<span class="hljs-string">"First Element: "</span> + age[<span class="hljs-number">0</span>]);
System.out.println(<span class="hljs-string">"Second Element: "</span> + age[<span class="hljs-number">1</span>]);
System.out.println(<span class="hljs-string">"Third Element: "</span> + age[<span class="hljs-number">2</span>]);
System.out.println(<span class="hljs-string">"Fourth Element: "</span> + age[<span class="hljs-number">3</span>]);
System.out.println(<span class="hljs-string">"Fifth Element: "</span> + age[<span class="hljs-number">4</span>]);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Accessing Elements of Array:
First Element: 12
Second Element: 4
Third Element: 5
Fourth Element: 2
Fifth Element: 5</samp></pre>

<p>In the above example, notice that we are using the index number to access each element of the array.</p>

<p>We can use loops to access all the elements of the array at once.</p>

<hr>
<h2 id="looping-array">Looping Through Array Elements</h2>

<p>In Java, we can also loop through each element of the array. For example,</p>

<h3>Example: Using For Loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an array</span>
<span class="hljs-keyword">int</span>[] age = {<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};

<span class="hljs-comment">// loop through the array</span>
<span class="hljs-comment">// using for loop</span>
System.out.println(<span class="hljs-string">"Using for Loop:"</span>);
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; age.length; i++) {
 System.out.println(age[i]);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Using for Loop:
12
4
5</samp></pre>

<p>In the above example, we are using the <a href="/java-programming/for-loop">for Loop in Java</a> to iterate through each element of the array. Notice the expression inside the loop,</p>

<pre style="max-height: 600px;"><code class="java hljs">age.length</code></pre>

<p>Here, we are using the <code>length</code> property of the array to get the size of the array.</p>

<p>We can also use the <a href="/java-programming/enhanced-for-loop">for-each loop</a> to iterate through the elements of an array. For example,</p>

<h3>Example: Using the for-each Loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an array</span>
<span class="hljs-keyword">int</span>[] age = {<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};

<span class="hljs-comment">// loop through the array</span>
<span class="hljs-comment">// using for loop</span>
System.out.println(<span class="hljs-string">"Using for-each Loop:"</span>);
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : age) {
 System.out.println(a);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Using for-each Loop:
12
4
5</samp></pre>

<hr>
<h2 id="example">Example: Compute Sum and Average of Array Elements</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span>[] numbers = {<span class="hljs-number">2</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">25</span>, <span class="hljs-number">22</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>};
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
Double average;

<span class="hljs-comment">// access all elements using for each loop</span>
<span class="hljs-comment">// add each element in sum</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: numbers) {
 sum += number;
}

<span class="hljs-comment">// get the total number of elements</span>
<span class="hljs-keyword">int</span> arrayLength = numbers.length;

<span class="hljs-comment">// calculate the average</span>
<span class="hljs-comment">// convert the average from int to double</span>
average =  ((<span class="hljs-keyword">double</span>)sum / (<span class="hljs-keyword">double</span>)arrayLength);

System.out.println(<span class="hljs-string">"Sum = "</span> + sum);
System.out.println(<span class="hljs-string">"Average = "</span> + average);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Sum = 36
Average = 3.6</samp></pre>

<p>In the above example, we have created an array of named <var>numbers</var>. We have used the <code>for...each</code> loop to access each element of the array.</p>

<p>Inside the loop, we are calculating the sum of each element. Notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> arrayLength = number.length;</code></pre>

<p>Here, we are using the <a href="http://stackoverflow.com/questions/8755812/array-length-in-java">length attribute</a> of the array to calculate the size of the array. We then calculate the average using:</p>

<pre style="max-height: 600px;"><code class="java hljs">average = ((<span class="hljs-keyword">double</span>)sum / (<span class="hljs-keyword">double</span>)arrayLength);</code></pre>

<p>As you can see, we are converting the <code>int</code> value into <code>double</code>. This is called type casting in Java. To learn more about typecasting, visit <a href="/java-programming/typecasting">Java Type Casting</a>.</p>

<hr>
<h3 id="multidimensional">Multidimensional Arrays</h3>

<p>Arrays we have mentioned till now are called one-dimensional arrays. However, we can declare multidimensional arrays in Java.</p>

<p>A multidimensional array is an array of arrays. That is, each element of a multidimensional array is an array itself. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">double</span>[][] matrix = {{<span class="hljs-number">1.2</span>, <span class="hljs-number">4.3</span>, <span class="hljs-number">4.0</span>}, 
  {<span class="hljs-number">4.1</span>, -<span class="hljs-number">1.1</span>}
};</code></pre>

<p>Here, we have created a multidimensional array named matrix. It is a 2-dimensional array. To learn more, visit the <a href="/java-programming/multidimensional-array">Java multidimensional array</a>.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/copy-arrays">Java Copy Array</a></li>
<li><a href="/java-programming/examples/print-array">Java Program to Print an Array</a></li>
<li><a href="/java-programming/examples/concatenate-two-arrays">Java Program to Concatenate two Arrays</a></li>
<li><a href="/java-programming/examples/convert-list-array">Java ArrayList to Array and Array to ArrayList</a></li>
<li><a href="/java-programming/arraylist">Java Dynamic Array</a></li>
</ul>
</div>
</section>
<section id="four2">
<h1>Java Multidimensional Arrays</h1>
<div class="content">
  <p id="introduction">Before we learn about the multidimensional array, make sure you know about <a href="/java-programming/arrays">Java array</a>.</p>

<p>A multidimensional array is an array of arrays. Each element of a multidimensional array is an array itself. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];</code></pre>

<p>Here, we have created a multidimensional array named <var>a</var>. It is a 2-dimensional array, that can hold a maximum of 12 elements,</p>

<figure><img src="assets/images/java-2d-array.jpg" title="2-dimensional Array" alt="2-dimensional array in Java" width="399" height="275">
<figcaption>2-dimensional Array</figcaption></figure>
<p>Remember, Java uses zero-based indexing, that is, indexing of arrays in Java starts with 0 and not 1.</p>

<p>Let's take another example of the multidimensional array. This time we will be creating a 3-dimensional array. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">String[][][] data = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>][<span class="hljs-number">2</span>];</code></pre>

<p>Here, <var>data</var> is a 3d array that can hold a maximum of 24 (3*4*2) elements of type <a href="/java-programming/string">String</a>.</p>

<hr>
<h2 id="2d">How to initialize a 2d array in Java?</h2>

<p>Here is how we can initialize a 2-dimensional array in Java.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span>[][] a = {
  {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
  {<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
  {<span class="hljs-number">7</span>}, 
};</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>As we can see, each element of the multidimensional array is an array itself. And also, unlike C/C++, each row of the multidimensional array in Java can be of different lengths.</p>

<figure><img src="assets/images/2d-array-variable-length.jpg" title="Initialization of 2-dimensional Array" alt="2d array example in Java with variable length" width="400" height="282">
<figcaption>Initialization of 2-dimensional Array</figcaption></figure>
<h3>Example: 2-dimensional Array</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultidimensionalArray</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// create a 2d array</span>
    <span class="hljs-keyword">int</span>[][] a = {
        {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
        {<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
        {<span class="hljs-number">7</span>}, 
    };
  
    <span class="hljs-comment">// calculate the length of each row</span>
    System.out.println(<span class="hljs-string">"Length of row 1: "</span> + a[<span class="hljs-number">0</span>].length);
    System.out.println(<span class="hljs-string">"Length of row 2: "</span> + a[<span class="hljs-number">1</span>].length);
    System.out.println(<span class="hljs-string">"Length of row 3: "</span> + a[<span class="hljs-number">2</span>].length);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Length of row 1: 3
Length of row 2: 4
Length of row 3: 1</samp></pre>

<p>In the above example, we are creating a multidimensional array named <var>a</var>. Since each component of a multidimensional array is also an array (<code>a[0]</code>, <code>a[1]</code> and <code>a[2]</code> are also arrays).</p>

<p>Here, we are using the <code>length</code> attribute to calculate the length of each row.</p>

<hr>
<h3 id="2d-example">Example: Print all elements of 2d array Using Loop</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultidimensionalArray</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-keyword">int</span>[][] a = {
        {<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
        {-<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
        {<span class="hljs-number">7</span>}, 
    };
  
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; ++i) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].length; ++j) {
            System.out.println(a[i][j]);
        }
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1
-2
3
-4
-5
6
9
7</samp></pre>

<p>We can also use the <a href="/java-programming/enhanced-for-loop">for...each loop</a> to access elements of the multidimensional array. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultidimensionalArray</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// create a 2d array</span>
    <span class="hljs-keyword">int</span>[][] a = {
        {<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
        {-<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
        {<span class="hljs-number">7</span>}, 
    };
  
    <span class="hljs-comment">// first for...each loop access the individual array</span>
    <span class="hljs-comment">// inside the 2d array</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] innerArray: a) {
        <span class="hljs-comment">// second for...each loop access each element inside the row</span>
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> data: innerArray) {
            System.out.println(data);
        }
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1
-2
3
-4
-5
6
9
7</samp></pre>

<p>In the above example, we are have created a 2d array named <var>a</var>. We then used <code>for</code> loop and <code>for...each</code> loop to access each element of the array.</p>

<hr>
<h2 id="3d-array">How to initialize a 3d array in Java?</h2>

<p>Let's see how we can use a 3d array in Java. We can initialize a 3d array similar to the 2d array. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// test is a 3d array</span>
<span class="hljs-keyword">int</span>[][][] test = {
    {
      {<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
      {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
    }, 
    { 
      {-<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
      {<span class="hljs-number">1</span>}, 
      {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
    } 
};</code></pre>

<p>Basically, a 3d array is an array of 2d arrays. The rows of a 3d array can also vary in length just like in a 2d array.</p>

<hr>
<h3 id="3d-example">Example: 3-dimensional Array</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreeArray</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// create a 3d array</span>
    <span class="hljs-keyword">int</span>[][][] test = {
        {
          {<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}, 
          {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
        }, 
        { 
          {-<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>}, 
          {<span class="hljs-number">1</span>}, 
          {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
        } 
    };

    <span class="hljs-comment">// for..each loop to iterate through elements of 3d array</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[][] array2D: test) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] array1D: array2D) {
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> item: array1D) {
                System.out.println(item);
            }
        }
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1
-2
3
2
3
4
-4
-5
6
9
1
2
3</samp></pre>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/examples/add-matrix">Java Program to Add Two Matrix Using Multi-dimensional Arrays</a> </li>
<li><a href="/java-programming/examples/multiply-matrix">Java Program to Multiply Two Matrix Using Multi-dimensional Arrays</a> </li>
</ul>

</div>
</section>
<section id="four3">
<h1>Java Copy Arrays</h1>
<div class="content">
  <p>In Java, we can copy one <a href="/java-programming/arrays">array</a> into another. There are several techniques you can use to copy arrays in Java.</p>

<hr>
<h2 id="assignment">1. Copying Arrays Using Assignment Operator</h2>

<p>Let's take an example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
   
    <span class="hljs-keyword">int</span> [] numbers = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>};
    <span class="hljs-keyword">int</span> [] positiveNumbers = numbers;    <span class="hljs-comment">// copying arrays</span>

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: positiveNumbers) {
        System.out.print(number + <span class="hljs-string">", "</span>);
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>1, 2, 3, 4, 5, 6</samp></pre>

<p>In the above example, we have used the assignment operator (<code>=</code>) to copy an array named <var>numbers</var> to another array named <var>positiveNumbers</var>.</p>

<p>This technique is the easiest one and it works as well. However, there is a problem with this technique. If we change elements of one array, corresponding elements of the other arrays also change. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span> [] numbers = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>};
    <span class="hljs-keyword">int</span> [] positiveNumbers = numbers;    <span class="hljs-comment">// copying arrays</span>
  
    <span class="hljs-comment">// change value of first array</span>
    numbers[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;

    <span class="hljs-comment">// printing the second array</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> number: positiveNumbers) {
        System.out.print(number + <span class="hljs-string">", "</span>);
    }
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>-1, 2, 3, 4, 5, 6</samp></pre>

<p>Here, we can see that we have changed one value of the <var>numbers</var> array. When we print the <var>positiveNumbers</var> array, we can see that the same value is also changed.</p>

<p>It's because both arrays refer to the same array object. This is because of the shallow copy. To learn more about shallow copy, visit <a href="http://stackoverflow.com/questions/1175620/in-java-what-is-a-shallow-copy">shallow copy</a>.</p>

<p>Now, to make new array objects while copying the arrays, we need deep copy rather than a shallow copy.</p>

<hr>
<h2 id="using-loop">2. Using Looping Construct to Copy Arrays</h2>

<p>Let's take an example:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span> [] source = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>};
    <span class="hljs-keyword">int</span> [] destination = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">6</span>];

    <span class="hljs-comment">// iterate and copy elements from source to destination</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; source.length; ++i) {
        destination[i] = source[i];
    }
  
     <span class="hljs-comment">// converting array to string</span>
    System.out.println(Arrays.toString(destination));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>[1, 2, 3, 4, 5, 6]</samp></pre>

<p>In the above example, we have used <a href="/java-programming/for-loop">the for loop</a> to iterate through each element of the source array. In each iteration, we are copying elements from the <var>source</var> array to the <var>destination</var> array.</p>

<p>Here, the source and destination array refer to different objects (deep copy). Hence, if elements of one array are changed, corresponding elements of another array is unchanged.</p>

<p>Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(Arrays.toString(destination));</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, the toString() method is used to convert an array into a string. To learn more, visit the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--">toString() method (official Java documentation)</a>.</p>

<hr>
<h2 id="arraycopy">3. Copying Arrays Using arraycopy() method</h2>

<p>In Java, the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html">System class</a> contains a method named <code>arraycopy()</code> to copy arrays. This method is a better approach to copy arrays than the above two.</p>

<p>The <code>arraycopy()</code> method allows you to copy a specified portion of the source array to the destination array. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">arraycopy(Object src, <span class="hljs-keyword">int</span> srcPos,Object dest, <span class="hljs-keyword">int</span> destPos, <span class="hljs-keyword">int</span> length)</code></pre>

<p>Here,</p>

<ul>
<li><var>src</var> - source array you want to copy</li>
<li><var>srcPos</var> - starting position (index) in the source array</li>
<li><var>dest</var> - destination array where elements will be copied from the source</li>
<li><var>destPos</var> - starting position (index) in the destination array</li>
<li><var>length</var> - number of elements to copy</li>
</ul>

<p>Let's take an example:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// To use Arrays.toString() method</span>
<span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    <span class="hljs-keyword">int</span>[] n1 = {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2</span>};
  
    <span class="hljs-keyword">int</span>[] n3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];

    <span class="hljs-comment">// Creating n2 array of having length of n1 array</span>
    <span class="hljs-keyword">int</span>[] n2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n1.length];
  
    <span class="hljs-comment">// copying entire n1 array to n2</span>
    System.arraycopy(n1, <span class="hljs-number">0</span>, n2, <span class="hljs-number">0</span>, n1.length);
    System.out.println(<span class="hljs-string">"n2 = "</span> + Arrays.toString(n2));  
  
    <span class="hljs-comment">// copying elements from index 2 on n1 array</span>
    <span class="hljs-comment">// copying element to index 1 of n3 array</span>
    <span class="hljs-comment">// 2 elements will be copied</span>
    System.arraycopy(n1, <span class="hljs-number">2</span>, n3, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);
    System.out.println(<span class="hljs-string">"n3 = "</span> + Arrays.toString(n3));  
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>n2 = [2, 3, 12, 4, 12, -2]
n3 = [0, 12, 4, 0, 0]</samp></pre>

<p>In the above example, we have used the <code>arraycopy()</code> method,</p>

<ul>
<li><code>System.arraycopy(n1, 0, n2, 0, n1.length)</code> - entire elements from the <var>n1</var> array are copied to <var>n2</var> array</li>
<li><code>System.arraycopy(n1, 2, n3, 1, 2)</code> - <var>2</var> elements of the <var>n1</var> array starting from index <var>2</var> are copied to the index starting from <var>1</var> of the <var>n3</var> array</li>
</ul>

<p>As you can see, the default initial value of elements of an <var>int</var> type array is 0.</p>

<hr>
<h2 id="copyofrange">4. Copying Arrays Using copyOfRange() method</h2>

<p>We can also use the copyOfRange() method defined in <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html">Java Arrays</a> class to copy arrays. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// To use toString() and copyOfRange() method</span>
<span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArraysCopy</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span>[] source = {<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2</span>};
  
    <span class="hljs-comment">// copying entire source array to destination</span>
    <span class="hljs-keyword">int</span>[] destination1 = Arrays.copyOfRange(source, <span class="hljs-number">0</span>, source.length);      
    System.out.println(<span class="hljs-string">"destination1 = "</span> + Arrays.toString(destination1)); 
  
    <span class="hljs-comment">// copying from index 2 to 5 (5 is not included) </span>
    <span class="hljs-keyword">int</span>[] destination2 = Arrays.copyOfRange(source, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>); 
    System.out.println(<span class="hljs-string">"destination2 = "</span> + Arrays.toString(destination2));   
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>destination1 = [2, 3, 12, 4, 12, -2]
destination2 = [12, 4, 12]</samp></pre>

<p>In the above example, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span>[] destination1 = Arrays.copyOfRange(source, <span class="hljs-number">0</span>, source.length);</code></pre>

<p>Here, we can see that we are creating the <var>destination1</var> array and copying the <var>source</var> array to it at the same time. We are not creating the <var>destination1</var> array before calling the <code>copyOfRange()</code> method. To learn more about the method, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOfRange-boolean:A-int-int-">Java copyOfRange</a>.</p>

<hr>
<h2 id="copying-2d">5. Copying 2d Arrays Using Loop</h2>

<p>Similar to the single-dimensional array, we can also copy the 2-dimensional array using the <code>for</code> loop. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span>[][] source = {
          {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}, 
          {<span class="hljs-number">5</span>, <span class="hljs-number">6</span>},
          {<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>}
          };

    <span class="hljs-keyword">int</span>[][] destination = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[source.length][];

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; destination.length; ++i) {

        <span class="hljs-comment">// allocating space for each row of destination array</span>
        destination[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[source[i].length];

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; destination[i].length; ++j) {
            destination[i][j] = source[i][j];
        }
    }
 
    <span class="hljs-comment">// displaying destination array</span>
    System.out.println(Arrays.deepToString(destination));  
  
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>[[1, 2, 3, 4], [5, 6], [0, 2, 42, -4, 5]]</samp></pre>

<p>In the above program, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(Arrays.deepToString(destination);</code></pre>

<p>Here, the <code>deepToString()</code> method is used to provide a better representation of the 2-dimensional array. To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString(java.lang.Object%5B%5D)">Java deepToString()</a>.</p>

<hr>
<h2 id="arraycopy-2d">Copying 2d Arrays using arraycopy()</h2>

<p>To make the above code more simpler, we can replace the inner loop with <code>System.arraycopy()</code> as in the case of a single-dimensional array. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  
    <span class="hljs-keyword">int</span>[][] source = {
          {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}, 
          {<span class="hljs-number">5</span>, <span class="hljs-number">6</span>},
          {<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>}
          };

    <span class="hljs-keyword">int</span>[][] destination = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[source.length][];

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; source.length; ++i) {

         <span class="hljs-comment">// allocating space for each row of destination array</span>
         destination[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[source[i].length];
         System.arraycopy(source[i], <span class="hljs-number">0</span>, destination[i], <span class="hljs-number">0</span>, destination[i].length);
    }
 
    <span class="hljs-comment">// displaying destination array</span>
    System.out.println(Arrays.deepToString(destination));      
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>[[1, 2, 3, 4], [5, 6], [0, 2, 42, -4, 5]]</samp></pre>

<p>Here, we can see that we get the same output by replacing the inner <code>for</code> loop with the <code>arraycopy()</code> method.</p>

</div>
</section>

<!-- five menu sections -->
<section id="five1">
<h1>Java Class and Objects</h1>
<div class="content">
  <p id="introduction">Java is an object-oriented programming language. The core concept of the object-oriented approach is to break complex problems into smaller objects.</p>

<p>An object is any entity that has a <strong>state</strong> and <strong>behavior</strong>. For example, a <var>bicycle</var> is an object. It has</p>

<ul>
<li><strong>States</strong>: idle, first gear, etc</li>
<li><strong>Behaviors</strong>: braking, accelerating, etc.</li>
</ul>

<p>Before we learn about objects, let's first know about classes in Java.</p>

<hr>
<h2 id="class">Java Class</h2>

<p>A class is a blueprint for the object. Before we create an object, we first need to define the class.</p>

<p>We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.</p>

<p>Since many houses can be made from the same description, we can create many objects from a class.</p>

<hr>
<h2 id="create-class">Create a class in Java</h2>

<p>We can create a class in Java using the class keyword. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span> </span>{
<span class="hljs-comment">// fields</span>
<span class="hljs-comment">// methods</span>
}</code></pre>

<p>Here, <var>fields</var> (<a href="/java-programming/variables-literals">variables</a>) and <a href="/java-programming/methods">methods</a> represent the <strong>state</strong> and <strong>behavior</strong> of the object respectively.</p>

<ul>
<li>fields are used to store data</li>
<li>methods are used to perform some operations</li>
</ul>

<p>For our <var>bicycle</var> object, we can create the class as</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bicycle</span> </span>{

<span class="hljs-comment">// state or field</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> gear = <span class="hljs-number">5</span>;

<span class="hljs-comment">// behavior or method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">braking</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Working of Braking"</span>);
}
}</code></pre>

<p>In the above example, we have created a class named <var>Bicycle</var>. It contains a field named <var>gear</var> and a method named <var>braking()</var>.</p>

<p>Here, <var>Bicycle</var> is a prototype. Now, we can create any number of bicycles using the prototype. And, all the bicycles will share the fields and methods of the prototype.</p>

<p class="note-tip"><strong>Note</strong>: We have used <a href="/java-programming/keywords-identifiers">keywords</a> <code>private</code> and <code>public</code>. These are known as access modifiers. To learn more, visit <a href="/java-programming/access-modifiers">Java access modifiers</a>.</p>

<hr>
<h2 id="objects">Java Objects</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>An object is called an instance of a class. For example, suppose <var>Bicycle</var> is a class then <var>MountainBicycle</var>, <var>SportsBicycle</var>, <var>TouringBicycle</var>, etc can be considered as objects of the class.</p>

<h3>Creating an Object in Java</h3>

<p>Here is how we can create an object of a class.</p>

<pre style="max-height: 600px;"><code class="java hljs">className object = <span class="hljs-keyword">new</span> className();

<span class="hljs-comment">// for Bicycle class</span>
Bicycle sportsBicycle = <span class="hljs-keyword">new</span> Bicycle();

Bicycle touringBicycle = <span class="hljs-keyword">new</span> Bicycle();</code></pre>

<p>We have used the <code>new</code> keyword along with the constructor of the class to create an object. Constructors are similar to methods and have the same name as the class. For example, <code>Bicycle()</code> is the constructor of the <var>Bicycle</var> class. To learn more, visit <a href="/java-programming/constructors">Java Constructors</a>.</p>

<p>Here, <var>sportsBicycle</var> and <var>touringBicycle</var> are the names of objects. We can use them to access fields and methods of the class.</p>

<p>As you can see, we have created two objects of the class. We can create multiple objects of a single class in Java.</p>

<p class="note-tip"><strong>Note</strong>: Fields and methods of a class are also called members of the class.</p>

<hr>
<h2 id="access-members">Access Members of a Class</h2>

<p>We can use the name of objects along with the <code>.</code> operator to access members of a class. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bicycle</span> </span>{

<span class="hljs-comment">// field of class</span>
<span class="hljs-keyword">int</span> gear = <span class="hljs-number">5</span>;

<span class="hljs-comment">// method of class</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">braking</span><span class="hljs-params">()</span> </span>{
...
}
}

<span class="hljs-comment">// create object</span>
Bicycle sportsBicycle = <span class="hljs-keyword">new</span> Bicycle();

<span class="hljs-comment">// access field and method</span>
sportsBicycle.gear;
sportsBicycle.braking();</code></pre>

<p>In the above example, we have created a class named <var>Bicycle</var>. It includes a field named <var>gear</var> and a method named <code>braking()</code>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">Bicycle sportsBicycle = <span class="hljs-keyword">new</span> Bicycle();</code></pre>

<p>Here, we have created an object of <var>Bicycle</var> named <var>sportsBicycle</var>. We then use the object to access the field and method of the class.</p>

<ul>
<li><strong>sportsBicycle.gear</strong> - access the field <var>gear</var></li>
<li><strong>sportsBicycle.braking()</strong> - access the method <code>braking()</code></li>
</ul>

<p>We have mentioned the word <strong>method</strong> quite a few times. You will learn about <a href="/java-programming/methods">Java methods</a> in detail in the next chapter.</p>

<p>Now that we understand what is class and object. Let's see a fully working example.</p>

<hr>
<h2 id="class-objects">Example: Java Class and Objects</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lamp</span> </span>{

<span class="hljs-comment">// stores the value for light</span>
<span class="hljs-comment">// true if light is on</span>
<span class="hljs-comment">// false if light is off</span>
<span class="hljs-keyword">boolean</span> isOn;

<span class="hljs-comment">// method to turn on the light</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span> </span>{
isOn = <span class="hljs-keyword">true</span>;
System.out.println(<span class="hljs-string">"Light on? "</span> + isOn);

}

<span class="hljs-comment">// method to turnoff the light</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">turnOff</span><span class="hljs-params">()</span> </span>{
isOn = <span class="hljs-keyword">false</span>;
System.out.println(<span class="hljs-string">"Light on? "</span> + isOn);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create objects led and halogen</span>
Lamp led = <span class="hljs-keyword">new</span> Lamp();
Lamp halogen = <span class="hljs-keyword">new</span> Lamp();

<span class="hljs-comment">// turn on the light by</span>
<span class="hljs-comment">// calling method turnOn()</span>
led.turnOn();

<span class="hljs-comment">// turn off the light by</span>
<span class="hljs-comment">// calling method turnOff()</span>
halogen.turnOff();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Light on? true
Light on? false</samp></pre>

<p>In the above program, we have created a class named <var>Lamp</var>. It contains a variable: <var>isOn</var> and two methods: <code>turnOn()</code> and <code>turnOff()</code>.</p>

<p>Inside the <var>Main</var> class, we have created two objects: <var>led</var> and <var>halogen</var> of the <var>Lamp</var> class. We then used the objects to call the methods of the class.</p>

<ul>
<li><strong>led.turnOn()</strong> - It sets the <var>isOn</var> variable to <code>true</code> and prints the output.</li>
<li><strong>halogen.turnOff()</strong> - It sets the <var>isOn</var> variable to <code>false</code> and prints the output.</li>
</ul>

<p>The variable <var>isOn</var> defined inside the class is also called an instance variable. It is because when we create an object of the class, it is called an instance of the class. And, each instance will have its own copy of the variable.</p>

<p>That is, <var>led</var> and <var>halogen</var> objects will have their own copy of the <var>isOn</var> variable.</p>

<hr>
<h2 id="example">Example: Create objects inside the same class</h2>

<p>Note that in the previous example, we have created objects inside another class and accessed the members from that class.</p>

<p>However, we can also create objects inside the same class.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lamp</span> </span>{

<span class="hljs-comment">// stores the value for light</span>
<span class="hljs-comment">// true if light is on</span>
<span class="hljs-comment">// false if light is off</span>
<span class="hljs-keyword">boolean</span> isOn;

<span class="hljs-comment">// method to turn on the light</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span> </span>{
isOn = <span class="hljs-keyword">true</span>;
System.out.println(<span class="hljs-string">"Light on? "</span> + isOn);

}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Lamp</span>
Lamp led = <span class="hljs-keyword">new</span> Lamp();

<span class="hljs-comment">// access method using object</span>
led.turnOn();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Light on? true</samp></pre>

<p>Here, we are creating the object inside the <code>main()</code> method of the same class.</p>

</div>
</section>
<section id="five2">
<h1>Java Methods</h1>
<div class="content">
  <p id="introduction">A method is a block of code that performs a specific task.</p>

<p>Suppose you need to create a program to create a circle and color it. You can create two methods to solve this problem:</p>

<ul>
<li>a method to draw the circle</li>
<li>a method to color the circle</li>
</ul>

<p>Dividing a complex problem into smaller chunks makes your program easy to understand and reusable.</p>

<p>In Java, there are two types of methods:</p>

<ul>
<li><strong>User-defined Methods</strong>: We can create our own method based on our requirements.</li>
<li><strong>Standard Library Methods</strong>: These are built-in methods in Java that are available to use.</li>
</ul>

<p>Let's first learn about user-defined methods.</p>

<hr>
<h2 id="declare-method">Declaring a Java Method</h2>

<p>The syntax to declare a method is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function">returnType <span class="hljs-title">methodName</span><span class="hljs-params">()</span> </span>{
<span class="hljs-comment">// method body</span>
}</code></pre>

<p>Here,</p>

<ul>
<li><strong>returnType</strong> - It specifies what type of value a method returns For example if a method has an <code>int</code> return type then it returns an integer value.<br>
<br>
If the method does not return a value, its return type is <code>void</code>.</li>
<li><strong>methodName</strong> - It is an <a href="/java-programming/keywords-identifiers#identifiers">identifier</a> that is used to refer to the particular method in a program.</li>
<li><strong>method body</strong> - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces <code>{ }</code>.</li>
</ul>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addNumbers</span><span class="hljs-params">()</span> </span>{
<span class="hljs-comment">// code</span>
}</code></pre>

<p>In the above example, the name of the method is <code>adddNumbers()</code>. And, the return type is <code>int</code>. We will learn more about return types later in this tutorial.</p>

<p>This is the simple syntax of declaring a method. However, the complete syntax of declaring a method is</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function">modifier <span class="hljs-keyword">static</span> returnType <span class="hljs-title">nameOfMethod</span> <span class="hljs-params">(parameter1, parameter2, ...)</span> </span>{
<span class="hljs-comment">// method body</span>
}</code></pre>

<p>Here,</p>

<ul>
<li><strong>modifier</strong> - It defines access types whether the method is public, private, and so on. To learn more, visit <a href="/java-programming/access-modifiers">Java Access Specifier</a>.</li>
<li><strong>static</strong> - If we use the <code>static</code> keyword, it can be accessed without creating objects.<br>
<br>
For example, the <code>sqrt()</code> method of standard <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html">Math class</a> is static. Hence, we can directly call <code>Math.sqrt()</code> without creating an instance of <code>Math</code> class.</li>
</ul>

<ul>
<li><strong>parameter1/parameter2</strong> - These are values passed to a method. We can pass any number of arguments to a method.</li>
</ul>

<hr>
<h2 id="call-method">Calling a Method in Java</h2>

<p>In the above example, we have declared a method named <code>addNumbers()</code>. Now, to use the method, we need to call it.</p>

<p>Here's is how we can call the <code>addNumbers()</code> method.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// calls the method</span>
addNumbers();</code></pre>

<figure><img src="assets/images/java-method-call.png" title="Working of Java Method Call" alt="Call a method in Java using the name the method followed by a parenthesis" width="420" height="221">
<figcaption>Working of Java Method Call</figcaption></figure>
<hr>
<h2>Example 1: Java Methods</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// create a method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>{
<span class="hljs-keyword">int</span> sum = a + b;
<span class="hljs-comment">// return value</span>
<span class="hljs-keyword">return</span> sum;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">int</span> num1 = <span class="hljs-number">25</span>;
<span class="hljs-keyword">int</span> num2 = <span class="hljs-number">15</span>;

<span class="hljs-comment">// create an object of Main</span>
Main obj = <span class="hljs-keyword">new</span> Main();
<span class="hljs-comment">// calling method</span>
<span class="hljs-keyword">int</span> result = obj.addNumbers(num1, num2);
System.out.println(<span class="hljs-string">"Sum is: "</span> + result);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Sum is: 40</samp></pre>

<p>In the above example, we have created a method named <code>addNumbers()</code>. The method takes two parameters <var>a</var> and <var>b</var>. Notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> result = obj.addNumbers(num1, num2);</code></pre>

<p>Here, we have called the method by passing two arguments <var>num1</var> and <var>num2</var>. Since the method is returning some value, we have stored the value in the <var>result</var> variable.</p>

<p class="note-tip"><strong>Note</strong>: The method is not static. Hence, we are calling the method using the object of the class.</p>

<hr>
<h2 id="return-type">Java Method Return Type</h2>

<p>A Java method may or may not return a value to the function call. We use the <strong>return statement</strong> to return any value. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addNumbers</span><span class="hljs-params">()</span> </span>{
...
<span class="hljs-keyword">return</span> sum;
}</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, we are returning the variable <var>sum</var>. Since the return type of the function is <code>int</code>. The sum variable should be of <code>int</code> type. Otherwise, it will generate an error.</p>

<h3>Example 2: Method Return Type</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// create a method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>{

<span class="hljs-comment">// return statement</span>
<span class="hljs-keyword">return</span> num * num;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">int</span> result;

<span class="hljs-comment">// call the method</span>
<span class="hljs-comment">// store returned value to result</span>
result = square(<span class="hljs-number">10</span>);

System.out.println(<span class="hljs-string">"Squared value of 10 is: "</span> + result);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Squared value of 10 is: 100</samp></pre>

<p>In the above program, we have created a method named <code>square()</code>. The method takes a number as its parameter and returns the square of the number.</p>

<p>Here, we have mentioned the return type of the method as <code>int</code>. Hence, the method should always return an integer value.</p>

<figure><img src="assets/images/java-method-return-value.png" title="Representation of the Java method returning a value" alt="Java method returns a value to the method call" width="420" height="228">
<figcaption>Representation of the Java method returning a value</figcaption></figure>
<div class="note-tip">
<p><strong>Note</strong>: If the method does not return any value, we use the void keyword as the return type of the method. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>{
<span class="hljs-keyword">int</span> square = a * a;
System.out.println(<span class="hljs-string">"Square is: "</span> + square);
}</code></pre>

</div>
<hr>
<h2 id="method-parameters">Method Parameters in Java</h2>

<p>A method parameter is a value accepted by the method. As mentioned earlier, a method can also have any number of parameters. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// method with two parameters</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>{
<span class="hljs-comment">// code</span>
}

<span class="hljs-comment">// method with no parameter</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addNumbers</span><span class="hljs-params">()</span></span>{
<span class="hljs-comment">// code</span>
}</code></pre>

<p>If a method is created with parameters, we need to pass the corresponding values while calling the method. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// calling the method with two parameters</span>
addNumbers(<span class="hljs-number">25</span>, <span class="hljs-number">15</span>);

<span class="hljs-comment">// calling the method with no parameters</span>
addNumbers()</code></pre>

<hr>
<h3>Example 3: Method Parameters</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// method with no parameter</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display1</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Method without parameter"</span>);
}

<span class="hljs-comment">// method with single parameter</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>{
System.out.println(<span class="hljs-string">"Method with a single parameter: "</span> + a);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Main</span>
Main obj = <span class="hljs-keyword">new</span> Main();

<span class="hljs-comment">// calling method with no parameter</span>
obj.display1();

<span class="hljs-comment">// calling method with the single parameter</span>
obj.display2(<span class="hljs-number">24</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Method without parameter
Method with a single parameter: 24</samp></pre>

<p>Here, the parameter of the method is <code>int</code>. Hence, if we pass any other data type instead of <code>int</code>, the compiler will throw an error. It is because Java is a strongly typed language.</p>

<div class="note-tip">
<p><strong>Note</strong>: The argument <var>24</var> passed to the <code>display2()</code> method during the method call is called the actual argument.</p>

<p>The parameter <var>num</var> accepted by the method definition is known as a formal argument. We need to specify the type of formal arguments. And, the type of actual arguments and formal arguments should always match.</p>

</div>
<hr>
<h2 id="standard-library">Standard Library Methods</h2>

<p>The standard library methods are built-in methods in Java that are readily available for use. These standard libraries come along with the Java Class Library (JCL) in a Java archive (*.jar) file with JVM and JRE.</p>

<p>For example,</p>

<ul>
<li><code>print()</code> is a method of <code>java.io.PrintSteam</code>. The <code>print("...")</code> method prints the string inside quotation marks.</li>
<li><a href="/java-programming/library/math/sqrt">sqrt()</a> is a method of <code>Math</code> class. It returns the square root of a number.</li>
</ul>

<p>Here's a working example:</p>

<h3>Example 4: Java Standard Library Method</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// using the sqrt() method</span>
System.out.print(<span class="hljs-string">"Square root of 4 is: "</span> + Math.sqrt(<span class="hljs-number">4</span>));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Square root of 4 is: 2.0</samp></pre>

<p>To learn more about standard library methods, visit <a href="/java-programming/library">Java Library Methods</a>.</p>

<hr>
<h2 id="advantages">What are the advantages of using methods?</h2>

<p><strong>1.</strong> The main advantage is <strong>code reusability</strong>. We can write a method once, and use it multiple times. We do not have to rewrite the entire code each time. Think of it as, "write once, reuse multiple times".</p>

<h3>Example 5: Java Method for Code Reusability</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// method defined</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSquare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>{
<span class="hljs-keyword">return</span> x * x;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) {

  <span class="hljs-comment">// method call</span>
  <span class="hljs-keyword">int</span> result = getSquare(i);
  System.out.println(<span class="hljs-string">"Square of "</span> + i + <span class="hljs-string">" is: "</span> + result);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Square of 1 is: 1
Square of 2 is: 4
Square of 3 is: 9
Square of 4 is: 16
Square of 5 is: 25</samp></pre>

<p>In the above program, we have created the method named <code>getSquare()</code> to calculate the square of a number. Here, the method is used to calculate the square of numbers less than <strong>6</strong>.</p>

<p>Hence, the same method is used again and again.</p>

<p><strong>2.</strong> Methods make code more <strong>readable and easier</strong> to debug. Here, the <code>getSquare()</code> method keeps the code to compute the square in a block. Hence, makes it more readable.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/method-overloading">Java Method Overloading</a> </li>
</ul>

</div>
</section>
<section id="five3">
<h1>Java Method Overloading</h1>
<div class="content">
  <p><a id="introduction" name="introduction"></a>In Java, two or more <a href="/java-programming/methods" title="Java Methods">methods</a> may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading. For example:</p>

<pre>void func() { ... }
void func(int a) { ... }
float func(double a) { ... }
float func(int a, float b) { ... }</pre>

<p>Here, the <code>func()</code> method is overloaded. These methods have the same name but accept different arguments.</p>

<p class="note-tip"><strong>Note</strong>: The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must differ in parameters.</p>

<hr>
<h2><a id="why" name="why"></a>Why method overloading?</h2>

<p>Suppose, you have to perform the addition of given numbers but there can be any number of arguments (let’s say either 2 or 3 arguments for simplicity).</p>

<p>In order to accomplish the task, you can create two methods <code>sum2num(int, int)</code> and <code>sum3num(int, int, int)</code> for two and three parameters respectively. However, other programmers, as well as you in the future may get confused as the behavior of both methods are the same but they differ by name.</p>

<p>The better way to accomplish this task is by overloading methods. And, depending upon the argument passed, one of the overloaded methods is called. This helps to increase the readability of the program.</p>

<hr>
<h2>How to perform method overloading in Java?</h2>

<p>Here are different ways to perform method overloading:</p>

<h3><a id="number-arguments" name="number-arguments"></a>1. Overloading by changing the number of parameters</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodOverloading</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>{
    System.out.println(<span class="hljs-string">"Arguments: "</span> + a);
}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>{
    System.out.println(<span class="hljs-string">"Arguments: "</span> + a + <span class="hljs-string">" and "</span> + b);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    display(<span class="hljs-number">1</span>);
    display(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);
}
}</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong>:</p>

<pre><samp>Arguments: 1
Arguments: 1 and 4</samp></pre>

<h3><a id="type-arguments" name="type-arguments"></a>2. Method Overloading by changing the data type of parameters</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodOverloading</span> </span>{

<span class="hljs-comment">// this method accepts int</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>{
    System.out.println(<span class="hljs-string">"Got Integer data."</span>);
}

<span class="hljs-comment">// this method  accepts String object</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(String a)</span></span>{
    System.out.println(<span class="hljs-string">"Got String object."</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    display(<span class="hljs-number">1</span>);
    display(<span class="hljs-string">"Hello"</span>);
}
}</code>
</pre>

<p><strong>Output</strong>:</p>

<pre><samp>Got Integer data.
Got String object.</samp></pre>

<p>Here, both overloaded methods accept one argument. However, one accepts the argument of type <code>int</code> whereas other accepts <code>String</code> object.</p>

<hr>
<p><a id="example" name="example"></a>Let’s look at a real-world example:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelperService</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>{
    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%d"</span>, value);
}

<span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatNumber</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>{
    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%.3f"</span>, value);
}

<span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatNumber</span><span class="hljs-params">(String value)</span> </span>{
    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%.2f"</span>, Double.parseDouble(value));
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    HelperService hs = <span class="hljs-keyword">new</span> HelperService();
    System.out.println(hs.formatNumber(<span class="hljs-number">500</span>));
    System.out.println(hs.formatNumber(<span class="hljs-number">89.9934</span>));
    System.out.println(hs.formatNumber(<span class="hljs-string">"550"</span>));
}
}</code></pre>

<p>When you run the program, the output will be:</p>

<pre><samp>500
89.993
550.00</samp></pre>

<hr>
<p class="note-tip"><strong>Note</strong>: In Java, you can also overload constructors in a similar way like methods.</p>

<p><strong>Recommended Reading:</strong> <a href="/java-programming/constructors#overloading" title="Java Constructor Overloading">Java Constructor Overloading</a></p>

<hr>
<h3><a id="important-points" name="important-points"></a>Important Points</h3>

<ul>
<li>Two or more methods can have the same name inside the same class if they accept different arguments. This feature is known as method overloading.</li>
<li>Method overloading is achieved by either:
<ul>
  <li>changing the number of arguments.</li>
  <li>or changing the data type of arguments.</li>
</ul>
</li>
<li>It is not method overloading if we only change the return type of methods. There must be differences in the number of parameters.</li>
</ul>
</div>
</section>
<section id="five4">
<h1>Java Constructors</h1>
<div class="content">
  <p id="introduction">A constructor in Java is similar to a method that is invoked when an <a href="/java-programming/class-objects#objects">object</a> of the <a href="/java-programming/class-objects">class</a> is created.</p>

<p>Unlike <a href="/java-programming/methods">Java methods</a>, a constructor has the same name as that of the class and does not have any return type. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
Test() {
<span class="hljs-comment">// constructor body</span>
}
}</code></pre>

<p>Here, <code>Test()</code> is a constructor. It has the same name as that of the class and doesn't have a return type.</p>

<hr>
<h2 id="example">Example: Java Constructor</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-keyword">private</span> String name;

<span class="hljs-comment">// constructor</span>
Main() {
System.out.println(<span class="hljs-string">"Constructor Called:"</span>);
name = <span class="hljs-string">"Programiz"</span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// constructor is invoked while</span>
<span class="hljs-comment">// creating an object of the Main class</span>
Main obj = <span class="hljs-keyword">new</span> Main();
System.out.println(<span class="hljs-string">"The name is "</span> + obj.name);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Constructor Called:
The name is Programiz</samp></pre>

<p>In the above example, we have created a constructor named <code>Main()</code>. </p>

<p>Inside the constructor, we are initializing the value of the <var>name</var> <a href="/java-programming/variables-literals">variable</a>.</p>

<p>Notice the statement creating an object of the <var>Main</var> class.</p>

<pre style="max-height: 600px;"><code class="java hljs">Main obj = <span class="hljs-keyword">new</span> Main();</code></pre>

<p>Here, when the object is created, the <code>Main()</code> constructor is called. And the value of the <var>name</var> variable is initialized.</p>

<p>Hence, the program prints the value of the <var>name</var> variables as <code>Programiz</code>.</p>

<hr>
<h3>Types of Constructor</h3>

<p>In Java, constructors can be divided into three types:</p>

<ol>
<li>No-Arg Constructor</li>
<li>Parameterized Constructor</li>
<li>Default Constructor</li>
</ol>

<hr>
<h2 id="no-arg">1. Java No-Arg Constructors</h2>

<p>Similar to methods, a Java constructor may or may not have any parameters (arguments).</p>

<p>If a constructor does not accept any parameters, it is known as a no-argument constructor. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> </span>{
<span class="hljs-comment">// body of the constructor</span>
}</code></pre>

<h3>Example: Java Private No-arg Constructor</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-keyword">int</span> i;

<span class="hljs-comment">// constructor with no parameter</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span> </span>{
i = <span class="hljs-number">5</span>;
System.out.println(<span class="hljs-string">"Constructor is called"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// calling the constructor without any parameter</span>
Main obj = <span class="hljs-keyword">new</span> Main();
System.out.println(<span class="hljs-string">"Value of i: "</span> + obj.i);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Constructor is called
Value of i: 5</samp></pre>

<p>In the above example, we have created a constructor <code>Main()</code>. </p>

<p>Here, the constructor does not accept any parameters. Hence, it is known as a no-arg constructor.</p>

<p><strong>Notice that we have declared the constructor as private.</strong></p>

<p>Once a constructor is declared <code>private</code>, it cannot be accessed from outside the class. </p>

<p>So, creating objects from outside the class is prohibited using the private constructor.</p>

<p>Here, we are creating the object inside the same class. </p>

<p>Hence, the program is able to access the constructor. To learn more, visit <a href="/java-programming/examples/private-constructor-implementation">Java Implement Private Constructor</a>.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>However, if we want to create objects outside the class, then we need to declare the constructor as <code>public</code>.</p>

<hr>
<h2>Example: Java Public no-arg Constructors</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Company</span> </span>{
String name;

<span class="hljs-comment">// public constructor</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Company</span><span class="hljs-params">()</span> </span>{
name = <span class="hljs-string">"Programiz"</span>;
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// object is created in another class</span>
Company obj = <span class="hljs-keyword">new</span> Company();
System.out.println(<span class="hljs-string">"Company name = "</span> + obj.name);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Company name = Programiz</samp></pre>


<hr>
<h2 id="parameterized">2. Java Parameterized Constructor</h2>

<p>A Java constructor can also accept one or more parameters. Such constructors are known as parameterized constructors (constructors with parameters).</p>

<h3>Example: Parameterized Constructor</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

String languages;

<span class="hljs-comment">// constructor accepting single value</span>
Main(String lang) {
languages = lang;
System.out.println(languages + <span class="hljs-string">" Programming Language"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// call constructor by passing a single value</span>
Main obj1 = <span class="hljs-keyword">new</span> Main(<span class="hljs-string">"Java"</span>);
Main obj2 = <span class="hljs-keyword">new</span> Main(<span class="hljs-string">"Python"</span>);
Main obj3 = <span class="hljs-keyword">new</span> Main(<span class="hljs-string">"C"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Java Programming Language
Python Programming Language
C Programming Language</samp></pre>

<p>In the above example, we have created a constructor named <code>Main()</code>. </p>

<p>Here, the constructor takes a single parameter. Notice the expression:</p>

<pre style="max-height: 600px;"><code class="java hljs">Main obj1 = <span class="hljs-keyword">new</span> Main(<span class="hljs-string">"Java"</span>);</code></pre>

<p>Here, we are passing the single value to the constructor.</p>

<p>Based on the argument passed, the language variable is initialized inside the constructor.</p>

<hr>
<h2 id="default">3. Java Default Constructor</h2>

<p>If we do not create any constructor, the Java compiler automatically creates a no-arg constructor during the execution of the program. </p>

<p>This constructor is called the default constructor.</p>

<h3>Example: Default Constructor</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-keyword">int</span> a;
<span class="hljs-keyword">boolean</span> b;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// calls default constructor</span>
Main obj = <span class="hljs-keyword">new</span> Main();

System.out.println(<span class="hljs-string">"Default Value:"</span>);
System.out.println(<span class="hljs-string">"a = "</span> + obj.a);
System.out.println(<span class="hljs-string">"b = "</span> + obj.b);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Default Value:
a = 0
b = false</samp></pre>

<p>Here, we haven't created any constructors. </p>

<p>Hence, the Java compiler automatically creates the default constructor.</p>

<p>The default constructor initializes any uninitialized instance variables with default values.</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Type</th>
<th>Default Value</th>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>byte</code></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><code>short</code></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><code>int</code></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><code>long</code></td>
<td><strong>0L</strong></td>
</tr>
<tr>
<td><code>char</code></td>
<td><code>\u0000</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td><strong>0.0f</strong></td>
</tr>
<tr>
<td><code>double</code></td>
<td><strong>0.0d</strong></td>
</tr>
<tr>
<td><code>object</code></td>
<td><code>Reference null</code></td>
</tr>
</tbody></table>
</div>

<p>To learn more, visit <a href="/java-programming/variables-primitive-data-types">Java Data Types</a>.</p>

<p>In the above program, the variables <var>a</var> and <var>b</var> are initialized with default value <strong>0</strong> and <code>false</code> respectively.</p>

<p>The above program is equivalent to:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-keyword">int</span> a;
<span class="hljs-keyword">boolean</span> b;

Main() {
a = <span class="hljs-number">0</span>;
b = <span class="hljs-keyword">false</span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-comment">// call the constructor</span>
Main obj = <span class="hljs-keyword">new</span> Main();

System.out.println(<span class="hljs-string">"Default Value:"</span>);
System.out.println(<span class="hljs-string">"a = "</span> + obj.a);
System.out.println(<span class="hljs-string">"b = "</span> + obj.b);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Default Value:
a = 0
b = false</samp></pre>

<hr>
<h2 id="notes">Important Notes on Java Constructors</h2>

<ul>
<li>Constructors are invoked implicitly when you instantiate objects.</li>
<li>The two rules for creating a constructor are:<br>
1. The name of the constructor should be the same as the class.<br>
2. A Java constructor must not have a return type.</li>
<li>If a class doesn't have a constructor, the Java compiler automatically creates a <strong>default constructor</strong> during run-time. The default constructor initializes instance variables with default values. For example, the <code>int</code> variable will be initialized to <code>0</code></li>
<li>Constructor types:<br>
<strong>No-Arg Constructor</strong> - a constructor that does not accept any arguments<br>
<strong>Parameterized constructor</strong> - a constructor that accepts arguments<br>
<strong>Default Constructor</strong> - a constructor that is automatically created by the Java compiler if it is not explicitly defined.</li>
<li>A constructor cannot be <code>abstract</code> or <code>static</code> or <code>final</code>.</li>
<li>A constructor can be overloaded but can not be overridden.</li>
</ul>

<hr>
<h2 id="overloading">Constructors Overloading in Java</h2>

<p>Similar to <a href="/java-programming/method-overloading">Java method overloading</a>, we can also create two or more constructors with different parameters. This is called constructor overloading.</p>

<h3>Example: Java Constructor Overloading</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

String language;

<span class="hljs-comment">// constructor with no parameter</span>
Main() {
<span class="hljs-keyword">this</span>.language = <span class="hljs-string">"Java"</span>;
}

<span class="hljs-comment">// constructor with a single parameter</span>
Main(String language) {
<span class="hljs-keyword">this</span>.language = language;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Programming Language: "</span> + <span class="hljs-keyword">this</span>.language);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// call constructor with no parameter</span>
Main obj1 = <span class="hljs-keyword">new</span> Main();

<span class="hljs-comment">// call constructor with a single parameter</span>
Main obj2 = <span class="hljs-keyword">new</span> Main(<span class="hljs-string">"Python"</span>);

obj1.getName();
obj2.getName();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Programming Language: Java
Programming Language: Python</samp></pre>

<p>In the above example, we have two constructors: <code>Main()</code> and <code>Main(String language)</code>. </p>

<p>Here, both the constructors initialize the value of the variable language with different values.</p>

<p>Based on the parameter passed during object creation, different constructors are called, and different values are assigned.</p>

<p>It is also possible to call one constructor from another constructor. To learn more, visit <a href="/java-programming/examples/call-one-constructor-from-another">Java Call One Constructor from Another</a>.</p>

<p class="note-tip"><strong>Note</strong>: We have used <code>this</code> keyword to specify the variable of the class. To know more about <code>this</code> keyword, visit <a href="/java-programming/this-keyword">Java this keyword</a>.</p>

<hr>
<p><strong>Also Read</strong></p>

<ul>
<li><a href="/java-programming/enum-constructor">Enum Constructor</a></li>
<li><a href="/java-programming/examples/call-one-constructor-from-another">Constructor Call</a></li>
<li><a href="/java-programming/examples/private-constructor-implementation">Private Construction Implementation</a></li>
<li><a href="/java-programming/access-modifiers">Java Access Modifier</a></li>
</ul>

</div>
</section>
<section id="five5">
<h1>Java Static Keyword</h1>
<div class="content">
  <h2 id="what">What is a static keyword in Java?</h2>

<p>In Java, if we want to access class members, we must first create an instance of the class. But there will be situations where we want to access class members without creating any variables.</p>

<p>In those situations, we can use the <code>static</code> keyword in Java. If we want to access class members without creating an instance of the class, we need to declare the class members static.</p>

<p>The <code>Math</code> class in Java has almost all of its members static. So, we can access its members without creating instances of the Math class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{

    <span class="hljs-comment">// accessing the methods of the Math class</span>
    System.out.println(<span class="hljs-string">"Absolute value of -12 =  "</span> + Math.abs(-<span class="hljs-number">12</span>));
    System.out.println(<span class="hljs-string">"Value of PI = "</span> + Math.PI);
    System.out.println(<span class="hljs-string">"Value of E = "</span> + Math.E);
    System.out.println(<span class="hljs-string">"2^2 = "</span> + Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Absolute value of -12 = 12
Value of PI = 3.141592653589793
Value of E = 2.718281828459045
2^2 = 4.0</samp></pre>

<p>In the above example, we have not created any instances of the <code>Math</code> class. But we are able to access its methods: <code>abs()</code> and <code>pow()</code> and variables: <code>PI</code> and <code>E</code>.</p>

<p>It is possible because the methods and variables of the <code>Math</code> class are static.</p>

<hr>
<h2 id="methods">Static Methods</h2>

<p>Static methods are also called class methods. It is because a static method belongs to the class rather than the object of a class.</p>

<p>And we can invoke static methods directly using the class name. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
<span class="hljs-comment">// static method inside the Test class</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>{...}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-comment">// invoking the static method</span>
Test.method();
}</code></pre>

<p>Here, we can see that the static method can be accessed directly from other classes using the class name.</p>

<p>In every Java program, we have declared the <code>main</code> method <code>static</code>. It is because to run the program the JVM should be able to invoke the main method during the initial phase where no objects exist in the memory.</p>

<h3>Example 1: Java static and non-static Methods</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticTest</span> </span>{

<span class="hljs-comment">// non-static method</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>{
    <span class="hljs-keyword">return</span> a * b;
}

<span class="hljs-comment">// static method</span>
<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>{
    <span class="hljs-keyword">return</span> a + b;
}
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{

    <span class="hljs-comment">// create an instance of the StaticTest class</span>
    StaticTest st = <span class="hljs-keyword">new</span> StaticTest();

    <span class="hljs-comment">// call the nonstatic method</span>
    System.out.println(<span class="hljs-string">" 2 * 2 = "</span> + st.multiply(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));

    <span class="hljs-comment">// call the static method</span>
    System.out.println(<span class="hljs-string">" 2 + 3 = "</span> + StaticTest.add(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>2 * 2 = 4
2 + 3 = 5</samp></pre>

<p>In the above program, we have declared a non-static method named <code>multiply()</code> and a static method named <code>add()</code> inside the class <code>StaticTest</code>.</p>

<p>Inside the <var>Main</var> class, we can see that we are calling the non-static method using the object of the class (<code>st.multiply(2, 2)</code>). However, we are calling the static method by using the class name (<code>StaticTest.add(2, 3)</code>).</p>

<hr>
<h2 id="variables">Static Variables</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In Java, when we create objects of a class, then every object will have its own copy of all the variables of the class. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
<span class="hljs-comment">// regular variable</span>
<span class="hljs-keyword">int</span> age;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-comment">// create instances of Test</span>
Test test1 = <span class="hljs-keyword">new</span> Test();
Test test2 = <span class="hljs-keyword">new</span> Test();
}</code></pre>

<p>Here, both the objects test1 and test2 will have separate copies of the variable age. And, they are different from each other.</p>

<p>However, if we declare a variable static, all objects of the class share the same static variable. It is because like static methods, static variables are also associated with the class. And, we don't need to create objects of the class to access the static variables. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
<span class="hljs-comment">// static variable</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> age;
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-comment">// access the static variable</span>
Test.age = <span class="hljs-number">20</span>;
}</code></pre>

<p>Here, we can see that we are accessing the static variable from the other class using the class name.</p>

<h3>Example 2: Java static and non-static Variables</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{

<span class="hljs-comment">// static variable</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> max = <span class="hljs-number">10</span>;

<span class="hljs-comment">// non-static variable</span>
<span class="hljs-keyword">int</span> min = <span class="hljs-number">5</span>;
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
   Test obj = <span class="hljs-keyword">new</span> Test();

   <span class="hljs-comment">// access the non-static variable</span>
   System.out.println(<span class="hljs-string">"min + 1 = "</span> + (obj.min + <span class="hljs-number">1</span>));

   <span class="hljs-comment">// access the static variable</span>
   System.out.println(<span class="hljs-string">"max + 1 = "</span> + (Test.max + <span class="hljs-number">1</span>));
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>min + 1 = 6
max + 1 = 11</samp></pre>

<p>In the above program, we have declared a non-static variable named <var>min</var> and a static variable named <var>max</var> inside the class <var>Test</var>.</p>

<p>Inside the <var>Main</var> class, we can see that we are calling the non-static variable using the object of the class (<code>obj.min + 1</code>). However, we are calling the static variable by using the class name (<code>Test.max + 1</code>).</p>

<p class="note-tip"><strong>Note</strong>: Static variables are rarely used in Java. Instead, the static constants are used. These static constants are defined by <code>static final</code> keyword and represented in uppercase. This is why some people prefer to use uppercase for static variables as well.</p>

<hr>
<h2 id="static-variable-method">Access static Variables and Methods within the Class</h2>

<p>We are accessing the static variable from another class. Hence, we have used the class name to access it. However, if we want to access the static member from inside the class, it can be accessed directly. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// static variable</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> age;
<span class="hljs-comment">// static method</span>
<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
   System.out.println(<span class="hljs-string">"Static Method"</span>);
}
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

   <span class="hljs-comment">// access the static variable</span>
   age = <span class="hljs-number">30</span>;
   System.out.println(<span class="hljs-string">"Age is "</span> + age);

   <span class="hljs-comment">// access the static method</span>
   display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Age is 30
Static Method</samp></pre>

<p>Here, we are able to access the static variable and method directly without using the class name. It is because static variables and methods are by default public. And, since we are accessing from the same class, we don't have to specify the class name.</p>

<hr>
<h2 id="static-block">Static Blocks</h2>

<p>In Java, static blocks are used to initialize the static variables. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
<span class="hljs-comment">// static variable</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> age;

<span class="hljs-comment">// static block</span>
<span class="hljs-keyword">static</span> {
    age = <span class="hljs-number">23</span>;
}
}</code></pre>

<p>Here we can see that we have used a static block with the syntax:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">static</span> {
<span class="hljs-comment">// variable initialization</span>
}</code></pre>

<p>The static block is executed only once when the class is loaded in memory. The class is loaded if either the object of the class is requested in code or the static members are requested in code.</p>

<p>A class can have multiple static blocks and each static block is executed in the same sequence in which they have been written in a program.</p>

<h3>Example 3: Use of static block in java</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-comment">// static variables</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">23</span>;
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b;
<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> max;

<span class="hljs-comment">// static blocks</span>
<span class="hljs-keyword">static</span> {
   System.out.println(<span class="hljs-string">"First Static block."</span>);
   b = a * <span class="hljs-number">4</span>;
}
<span class="hljs-keyword">static</span> {
   System.out.println(<span class="hljs-string">"Second Static block."</span>);
   max = <span class="hljs-number">30</span>;
}

<span class="hljs-comment">// static method</span>
<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{

   System.out.println(<span class="hljs-string">"a = "</span> + a);
   System.out.println(<span class="hljs-string">"b = "</span> + b);
   System.out.println(<span class="hljs-string">"max = "</span> + max);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
   <span class="hljs-comment">// calling the static method</span>
   display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>First Static block.
Second Static block.
a = 23
b = 92
max = 30</samp></pre>

<p>In the above program. as soon as the Main class is loaded,</p>

<ul>
<li>The value of <var>a</var> is set to <code>23</code>.</li>
<li>The first static block is executed. Hence, the string <code>First Static block</code> is printed and the value of <var>b</var> is set to <code>a * 4</code>.</li>
<li>The second static block is executed. Hence, the string <code>Second Static block</code> is printed and the value of <var>max</var> is set to <code>30</code>.</li>
<li>And finally, the print statements inside the method <code>display()</code> are executed.</li>
</ul>

<hr>
<h2 id="static-nested">Nested Static Class</h2>

<p>In Java, we can declare a class inside another class. Such classes are known as nested classes. Nested classes are of 2 types:</p>

<ul>
<li>Static Nested Classes</li>
<li>Non-static Nested Classes</li>
</ul>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>{
<span class="hljs-comment">// static nested class</span>
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedClass</span> </span>{...}

<span class="hljs-comment">// non-static nested class</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>{...}
}</code></pre>

<p>To learn more, visit the <a href="/java-programming/nested-inner-class" title="Java Nested Class">Java Nested Class</a>.</p>
</div>
</section>
<section id="five6">
<h1>Java Strings</h1>
<div class="content">
  <p id="introduction">In Java, a string is a sequence of characters. For example, <code>"hello"</code> is a string containing a sequence of characters <code>'h'</code>, <code>'e'</code>, <code>'l'</code>, <code>'l'</code>, and <code>'o'</code>.</p>

<p>We use <strong>double quotes</strong> to represent a string in Java. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create a string</span>
String type = <span class="hljs-string">"Java programming"</span>;</code></pre>

<p>Here, we have created a string <a href="/java-programming/variables-literals">variable</a> named <var>type</var>. The variable is initialized with the string <code>Java Programming</code>.</p>

<hr>
<h2 id="example">Example: Create a String in Java</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create strings</span>
String first = <span class="hljs-string">"Java"</span>;
String second = <span class="hljs-string">"Python"</span>;
String third = <span class="hljs-string">"JavaScript"</span>;

<span class="hljs-comment">// print strings</span>
System.out.println(first);   <span class="hljs-comment">// print Java</span>
System.out.println(second);  <span class="hljs-comment">// print Python</span>
System.out.println(third);   <span class="hljs-comment">// print JavaScript</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above example, we have created three strings named <var>first</var>, <var>second</var>, and <var>third</var>. </p>

<p>Here, we are directly creating strings like <a href="/java-programming/variables-primitive-data-types">primitive types</a>.</p>

<p>However, there is another way of creating Java strings (using the <code>new</code> keyword). </p>

<p>We will learn about that later in this tutorial.</p>

<div class="note-tip">
<p><strong>Note</strong>: Strings in Java are not primitive types (like <code>int</code>, <code>char</code>, etc). Instead, all strings are objects of a predefined class named <code>String</code>.</p>

<p>And all string variables are instances of the <code>String</code> class.</p>

</div>
<hr>
<h2>Java String Operations</h2>

<p>Java provides various string methods to perform different operations on strings. We will look into some of the commonly used string operations.</p>

<h3 id="string-length">1. Get the Length of a String</h3>

<p>To find the length of a string, we use the <code>length()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create a string</span>
String greet = <span class="hljs-string">"Hello! World"</span>;
System.out.println(<span class="hljs-string">"String: "</span> + greet);

<div class="line-highlight">    <span class="hljs-comment">// get the length of greet</span>
<span class="hljs-keyword">int</span> length = greet.length();</div>
System.out.println(<span class="hljs-string">"Length: "</span> + length);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>String: Hello! World
Length: 12</samp></pre>

<p>In the above example, the <code>length()</code> method calculates the total number of characters in the string and returns it. </p>

<p>To learn more, visit <a href="/java-programming/library/string/length">Java String length()</a>.</p>

<hr>
<h3 id="join-strings">2. Join Two Java Strings</h3>

<p>We can join two strings in Java using the <code>concat()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create first string</span>
String first = <span class="hljs-string">"Java "</span>;
System.out.println(<span class="hljs-string">"First String: "</span> + first);

<span class="hljs-comment">// create second</span>
String second = <span class="hljs-string">"Programming"</span>;
System.out.println(<span class="hljs-string">"Second String: "</span> + second);

<div class="line-highlight">    <span class="hljs-comment">// join two strings</span>
String joinedString = first.concat(second);</div>
System.out.println(<span class="hljs-string">"Joined String: "</span> + joinedString);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>First String: Java 
Second String: Programming     
Joined String: Java Programming</samp></pre>

<p>In the above example, we have created two strings named <var>first</var> and <var>second</var>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">String joinedString = first.concat(second);</code></pre>

<p>Here, the <code>concat()</code> method joins the <var>second</var> string to the <var>first</var> string and assigns it to the <var>joinedString</var> variable.</p>

<p>We can also join two strings using the <code>+</code> operator in Java. </p>

<p>To learn more, visit <a href="/java-programming/library/string/concat">Java String concat()</a>.</p>

<hr>
<h2 id="compare-strings">3. Compare Two Strings</h2>

<p>In Java, we can make comparisons between two strings using the <code>equals()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create 3 strings</span>
String first = <span class="hljs-string">"java programming"</span>;
String second = <span class="hljs-string">"java programming"</span>;
String third = <span class="hljs-string">"python programming"</span>;

<div class="line-highlight">    <span class="hljs-comment">// compare first and second strings</span>
<span class="hljs-keyword">boolean</span> result1 = first.equals(second);</div>
System.out.println(<span class="hljs-string">"Strings first and second are equal: "</span> + result1);

<div class="line-highlight">    <span class="hljs-comment">// compare first and third strings</span>
<span class="hljs-keyword">boolean</span> result2 = first.equals(third);</div>
System.out.println(<span class="hljs-string">"Strings first and third are equal: "</span> + result2);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Strings first and second are equal: true
Strings first and third are equal: false</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we have created <strong>3</strong> strings named <var>first</var>, <var>second</var>, and <var>third</var>.</p>

<p>Here, we are using the <code>equal()</code> method to check if one string is equal to another.</p>

<p>The <code>equals()</code> method checks the content of strings while comparing them. To learn more, visit <a href="/java-programming/library/string/equals">Java String equals()</a>.</p>

<p class="note-tip"><strong>Note</strong>: We can also compare two strings using the <code>==</code> operator in Java. However, this approach is different than the <code>equals()</code> method. To learn more, visit <a href="/java-programming/examples/differentiate-string-equals">Java String == vs equals()</a>.</p>

<hr>
<p id="escape-character">Escape Character in Java Strings</p>

<p>The escape character is used to escape some of the characters present inside a string.</p>

<p>Suppose we need to include double quotes inside a string.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// include double quote </span>
String example = <span class="hljs-string">"This is the "</span>String<span class="hljs-string">" class"</span>;</code></pre>

<p>Since strings are represented by <strong>double quotes</strong>, the compiler will treat <code>"This is the "</code> as the string. Hence, the above code will cause an error.</p>

<p>To solve this issue, we use the escape character <code>\</code> in Java. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// use the escape character</span>
String example = <span class="hljs-string">"This is the \"String\" class."</span>;</code></pre>

<p>Now escape characters tell the compiler to escape <strong>double quotes</strong> and read the whole text.</p>

<hr>
<h2 id="immutable-string">Java Strings are Immutable</h2>

<p>In Java, strings are <a href="/java-programming/examples/create-immutable-class">immutable</a>. This means once we create a string, we cannot change that string.</p>

<p>To understand it more thoroughly, consider an example:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create a string</span>
String example = <span class="hljs-string">"Hello! "</span>;</code></pre>

<p>Here, we have created a string variable named <var>example</var>. The variable holds the string <code>"Hello! "</code>.</p>

<p>Now, suppose we want to change the string.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// add another string "World"</span>
<span class="hljs-comment">// to the previous tring example</span>
example = example.concat(<span class="hljs-string">" World"</span>);</code></pre>

<p>Here, we are using the <code>concat()</code> method to add another string <code>"World"</code> to the previous string.</p>

<p>It looks like we are able to change the value of the previous string. However, this is not <code>true</code>.</p>

<p>Let's see what has happened here:</p>

<ol>
<li><a href="/java-programming/jvm-jre-jdk">JVM</a> takes the first string <code>"Hello! "</code></li>
<li>creates a new string by adding <code>"World"</code> to the first string</li>
<li>assigns the new string <code>"Hello! World"</code> to the <var>example</var> variable</li>
<li>The first string <code>"Hello! "</code> remains unchanged</li>
</ol>

<hr>
<h2 id="new-keyword">Creating Strings Using the New Keyword</h2>

<p>So far, we have created strings like primitive types in Java.</p>

<p>Since strings in Java are objects, we can create strings using the <code>new</code> <a href="/java-programming/keywords-identifiers">keyword</a> as well. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create a string using the new keyword</span>
String name = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"Java String"</span>);</code></pre>

<p>In the above example, we have created a string <var>name</var> using the <code>new</code> keyword.</p>

<p>Here, when we create a string object, the <code>String()</code> constructor is invoked. </p>

<p>To learn more about constructors, visit <a href="/java-programming/constructors">Java Constructor</a>.</p>

<p class="note-tip"><strong>Note</strong>: The <code>String</code> class provides various other constructors to create strings. To learn more, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html">Java String (official Java documentation)</a>.</p>

<h3>Example: Create Java Strings Using the New Keyword</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<div class="line-highlight">    <span class="hljs-comment">// create a string using new</span>
String name = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"Java String"</span>);</div>

System.out.println(name);  <span class="hljs-comment">// print Java String</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<h3 id="string-literal-vs-new">Create String Using Literals vs. New Keyword</h3>

<p>Now that we know how strings are created using <a href="/java-programming/variables-literals#string-literals">string literals</a> and the <code>new</code> keyword, let's see what is the major difference between them.</p>

<p>In Java, the JVM maintains a <strong>string pool</strong> to store all of its strings inside the memory. The string pool helps in reusing the strings.</p>

<p>1. While creating strings using string literals,</p>

<pre style="max-height: 600px;"><code class="java hljs">String example = <span class="hljs-string">"Java"</span>;</code></pre>

<p>Here, we are directly providing the value of the string (<code>Java</code>). Hence, the compiler first checks the string pool to see if the string already exists.</p>

<ul>
<li><strong>If the string already exists</strong>, the new string is not created. Instead, the new reference, <var>example</var> points to the already existing string (<code>Java</code>).</li>
<li><strong>If the string doesn't exist</strong>, a new string (<code>Java)</code> is created.</li>
</ul>

<p>2. While creating strings using the new keyword,</p>

<pre style="max-height: 600px;"><code class="java hljs">String example = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"Java"</span>);</code></pre>

<p>Here, the value of the string is not directly provided. Hence, a new <code>"Java"</code> string is created even though <code>"Java"</code> is already present inside the memory pool.</p>

<hr>
<h2 id="string-methods">Methods of Java String</h2>

<p>Besides those mentioned above, there are various <a href="/java-programming/library/string">string methods</a> present in Java. Here are some of those methods:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Methods</th>
<th>Description</th>
</tr>
<tr>
<td><a href="/java-programming/library/string/contains">contains()</a></td>
<td>Checks whether the string contains a substring.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/substring">substring()</a></td>
<td>Returns the substring of the string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/join">join()</a></td>
<td>Joins the given strings using the delimiter.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/replace">replace()</a></td>
<td>Replaces the specified old character with the specified new character.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/replaceall">replaceAll()</a></td>
<td>Replaces all substrings matching the regex pattern.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/replacefirst">replaceFirst()</a></td>
<td>Replaces the first matching substring.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/charat">charAt()</a></td>
<td>Returns the character present in the specified location.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/getbytes">getBytes()</a></td>
<td>Converts the string to an array of bytes.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/indexof">indexOf()</a></td>
<td>Returns the position of the specified character in the string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/compareto">compareTo()</a></td>
<td>Compares two strings in the dictionary order.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/comparetoignorecase">compareToIgnoreCase()</a></td>
<td>Compares two strings, ignoring case differences.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/trim">trim()</a></td>
<td>Removes any leading and trailing whitespaces.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/format">format()</a></td>
<td>Returns a formatted string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/split">split()</a></td>
<td>Breaks the string into an array of strings.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/tolowercase">toLowerCase()</a></td>
<td>Converts the string to lowercase.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/touppercase">toUpperCase()</a></td>
<td>Converts the string to uppercase.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/valueof">valueOf()</a></td>
<td>Returns the string representation of the specified argument.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/tochararray">toCharArray()</a></td>
<td>Converts the string to a <code>char</code> array.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/matches">matches()</a></td>
<td>Checks whether the string matches the given regex.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/startswith">startsWith()</a></td>
<td>Checks if the string begins with the given string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/endswith">endsWith()</a></td>
<td>Checks if the string ends with the given string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/isempty">isEmpty()</a></td>
<td>Checks whether a string is empty or not.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/intern">intern()</a> </td>
<td>Returns the canonical representation of the string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/contentequals">contentEquals()</a></td>
<td>Checks whether the string is equal to charSequence.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/hashcode">hashCode()</a></td>
<td>Returns a hash code for the string.</td>
</tr>
<tr>
<td><a href="/java-programming/library/string/subsequence">subSequence()</a></td>
<td>Returns a subsequence from the string.</td>
</tr>
</tbody></table>
</div>

</div>
</section>
<section id="five7">
<h1>Java Access Modifiers</h1>
<div class="content">
  <h2 id="introduction">What are Access Modifiers?</h2>

<p>In Java, access modifiers are used to set the accessibility (visibility) of <a href="https://www.programiz.com/java-programming/class-objects">classes</a>, <a href="https://www.programiz.com/java-programming/interfaces">interfaces</a>, <a href="https://www.programiz.com/java-programming/variables-literals">variables</a>, <a href="https://www.programiz.com/java-programming/methods">methods</a>, <a href="https://www.programiz.com/java-programming/constructors">constructors</a>, data members, and the setter methods. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>{...}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>{...}
}</code></pre>

<p>In the above example, we have declared 2 methods: method1() and method2(). Here,</p>

<ul>
<li><var>method1</var> is <code>public</code> - This means it can be accessed by other classes.</li>
<li><var>method2</var> is <code>private</code> - This means it can not be accessed by other classes.</li>
</ul>

<p>Note the keyword <code>public</code> and <code>private</code>. These are access modifiers in Java. They are also known as visibility modifiers.</p>

<p class="note-tip"><strong>Note</strong>: You cannot set the access modifier of getters methods.</p>

<hr>
<h2>Types of Access Modifier</h2>

<p>Before you learn about types of access modifiers, make sure you know about <a href="/java-programming/packages-import" title="Java Packages">Java Packages</a>.</p>

<p>There are four access modifiers keywords in Java and they are:</p>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <td><strong>Modifier</strong></td>
  <td><strong>Description</strong></td>
</tr>
<tr>
  <td>Default</td>
  <td>declarations are visible only within the package (package private)</td>
</tr>
<tr>
  <td>Private</td>
  <td>declarations are visible within the class only</td>
</tr>
<tr>
  <td>Protected</td>
  <td>declarations are visible within the package or all subclasses</td>
</tr>
<tr>
  <td>Public</td>
  <td>declarations are visible everywhere</td>
</tr>
</tbody>
</table></div>

<hr>
<h2 id="default-access-modifiers">Default Access Modifier</h2>

<p>If we do not explicitly specify any access modifier for classes, methods, variables, etc, then by default the default access modifier is considered. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">package</span> defaultPackage;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">message</span><span class="hljs-params">()</span></span>{
    System.out.println(<span class="hljs-string">"This is a message"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Here, the <var>Logger</var> class has the default access modifier. And the class is visible to all the classes that belong to the <var>defaultPackage</var> package. However, if we try to use the <var>Logger</var> class in another class outside of defaultPackage, we will get a compilation error.</p>

<hr>
<h2 id="private-access-modifiers">Private Access Modifier</h2>

<p>When variables and methods are declared <code>private</code>, they cannot be accessed outside of the class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span> </span>{
<span class="hljs-comment">// private variable</span>
<span class="hljs-keyword">private</span> String name;
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] main)</span></span>{

    <span class="hljs-comment">// create an object of Data</span>
    Data d = <span class="hljs-keyword">new</span> Data();

    <span class="hljs-comment">// access private variable and field from another class</span>
    d.name = <span class="hljs-string">"Programiz"</span>;
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above example, we have declared a private variable named <var>name</var>. When we run the program, we will get the following error:</p>

<pre style="max-height: 600px;"><code class="java hljs">Main.java:<span class="hljs-number">18</span>: error: name has <span class="hljs-keyword">private</span> access in Data
    d.name = <span class="hljs-string">"Programiz"</span>;
     ^</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The error is generated because we are trying to access the private variable of the <var>Data</var> class from the <var>Main</var> class.</p>

<p>You might be wondering what if we need to access those private variables. In this case, we can use the getters and setters method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span> </span>{
<span class="hljs-keyword">private</span> String name;

<span class="hljs-comment">// getter method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;
}
<span class="hljs-comment">// setter method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{
    <span class="hljs-keyword">this</span>.name= name;
}
}
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] main)</span></span>{
    Data d = <span class="hljs-keyword">new</span> Data();

    <span class="hljs-comment">// access the private variable using the getter and setter</span>
    d.setName(<span class="hljs-string">"Programiz"</span>);
    System.out.println(d.getName());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>The name is Programiz</samp></pre>

<p>In the above example, we have a private variable named <var>name</var>. In order to access the variable from the outer class, we have used methods: <code>getName()</code> and <code>setName()</code>. These methods are called getter and setter in Java.</p>

<p>Here, we have used the setter method (<code>setName()</code>) to assign value to the variable and the getter method (<code>getName()</code>) to access the variable.</p>

<p>We have used <code>this</code> keyword inside the setName() to refer to the variable of the class. To learn more on this keyword, visit <a href="/java-programming/this-keyword" title="Java this Keyword">Java this Keyword</a>.</p>

<p class="note-tip"><strong>Note</strong>: We cannot declare classes and interfaces private in Java. However, the nested classes can be declared private. To learn more, visit <a href="/java-programming/nested-inner-class" title="Java Nested and Inner Class">Java Nested and Inner Class</a>.</p>

<hr>
<h3 id="protected-access-modifiers">Protected Access Modifier</h3>

<p>When methods and data members are declared <code>protected</code>, we can access them within the same package as well as from subclasses. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-comment">// protected method</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
    System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// create an object of Dog class</span>
    Dog dog = <span class="hljs-keyword">new</span> Dog();
     <span class="hljs-comment">// access protected method</span>
    dog.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am an animal</samp></pre>

<p>In the above example, we have a protected method named <code>display()</code> inside the <var>Animal</var> class. The <var>Animal</var> class is inherited by the <var>Dog</var> class. To learn more about inheritance, visit <a href="/java-programming/inheritance" title="Java Inheritance">Java Inheritance</a>.</p>

<p>We then created an object <var>dog</var> of the <var>Dog</var> class. Using the object we tried to access the protected method of the parent class.</p>

<p>Since protected methods can be accessed from the child classes, we are able to access the method of <var>Animal</var> class from the <var>Dog</var> class.</p>

<p class="note-tip"><strong>Note</strong>: We cannot declare classes or interfaces <code>protected</code> in Java.</p>

<hr>
<h3 id="public-access-modifiers">Public Access Modifier</h3>

<p>When methods, variables, classes, and so on are declared <code>public</code>, then we can access them from anywhere. The public access modifier has no scope restriction. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Animal.java file</span>
<span class="hljs-comment">// public class</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-comment">// public variable</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> legCount;

<span class="hljs-comment">// public method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
    System.out.println(<span class="hljs-string">"I am an animal."</span>);
    System.out.println(<span class="hljs-string">"I have "</span> + legCount + <span class="hljs-string">" legs."</span>);
}
}

<span class="hljs-comment">// Main.java</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{
    <span class="hljs-comment">// accessing the public class</span>
    Animal animal = <span class="hljs-keyword">new</span> Animal();

    <span class="hljs-comment">// accessing the public variable</span>
    animal.legCount = <span class="hljs-number">4</span>;
    <span class="hljs-comment">// accessing the public method</span>
    animal.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am an animal.
I have 4 legs.</samp></pre>

<p>Here,</p>

<ul>
<li>The public class <var>Animal</var> is accessed from the <var>Main</var> class.</li>
<li>The public variable <var>legCount</var> is accessed from the <var>Main</var> class.</li>
<li>The public method <code>display()</code> is accessed from the <var>Main</var> class.</li>
</ul>

<hr>
<h2 id="figure">Access Modifiers Summarized in one figure</h2>

<figure><img alt="Accessibility of all Access Modifiers in Java" height="512" src="assets/images/java-access-modifiers-public-private-protected-default_0.jpg" title="Accessibility of all Access Modifiers in Java" width="512">
<figcaption>Accessibility of all Access Modifiers in Java</figcaption>
</figure>

<p>Access modifiers are mainly used for encapsulation. It can help us to control what part of a program can access the members of a class. So that misuse of data can be prevented. To learn more about encapsulation, visit <a href="/java-programming/encapsulation" title="Java Encapsulation">Java Encapsulation</a>.</p>
</div>
</section>
<section id="five8">
<h1>Java this Keyword</h1>
<div class="content">
  <p id="introduction">In Java, this keyword is used to refer to the current object inside a <a href="/java-programming/methods">method</a> or a <a href="/java-programming/constructors">constructor</a>. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-keyword">int</span> instVar;

Main(<span class="hljs-keyword">int</span> instVar){
    <span class="hljs-keyword">this</span>.instVar = instVar;
    System.out.println(<span class="hljs-string">"this reference = "</span> + <span class="hljs-keyword">this</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    Main obj = <span class="hljs-keyword">new</span> Main(<span class="hljs-number">8</span>);
    System.out.println(<span class="hljs-string">"object reference = "</span> + obj);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>this reference = Main@23fc625e
object reference = Main@23fc625e</samp></pre>

<p>In the above example, we created an object named <var>obj</var> of the class <var>Main</var>. We then print the reference to the object <var>obj</var> and <code>this</code> keyword of the class.</p>

<p>Here, we can see that the reference of both <var>obj</var> and <code>this</code> is the same. It means this is nothing but the reference to the current object.</p>

<hr>
<h2>Use of this Keyword</h2>

<p>There are various situations where <code>this</code> keyword is commonly used.</p>

<h2 id="disambiguate-reference">1. Using this for Ambiguity Variable Names</h2>

<p>In Java, it is not allowed to declare two or more <a href="/java-programming/variables-literals">variables</a> having the same name inside a scope (class scope or method scope). However, instance variables and parameters may have the same name. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>{
<span class="hljs-comment">// instance variable</span>
<span class="hljs-keyword">int</span> age;

<span class="hljs-comment">// parameter</span>
MyClass(<span class="hljs-keyword">int</span> age){
    age = age;
}
}</code></pre>

<p>In the above program, the instance variable and the parameter have the same name: age. Here, the Java compiler is confused due to name ambiguity.</p>

<p>In such a situation, we use this keyword. For example,</p>

<p>First, let's see an example without using <code>this</code> keyword:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-keyword">int</span> age;
Main(<span class="hljs-keyword">int</span> age){
    age = age;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    Main obj = <span class="hljs-keyword">new</span> Main(<span class="hljs-number">8</span>);
    System.out.println(<span class="hljs-string">"obj.age = "</span> + obj.age);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>obj.age = 0</samp></pre>

<p>In the above example, we have passed <code>8</code> as a value to the constructor. However, we are getting <code>0</code> as an output. This is because the Java compiler gets confused because of the ambiguity in names between instance the variable and the parameter.</p>

<p>Now, let's rewrite the above code using <code>this</code> keyword.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-keyword">int</span> age;
Main(<span class="hljs-keyword">int</span> age){
    <span class="hljs-keyword">this</span>.age = age;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    Main obj = <span class="hljs-keyword">new</span> Main(<span class="hljs-number">8</span>);
    System.out.println(<span class="hljs-string">"obj.age = "</span> + obj.age);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>obj.age = 8</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Now, we are getting the expected output. It is because when the constructor is called, <code>this</code> inside the constructor is replaced by the object <var>obj</var> that has called the constructor. Hence the <var>age</var> variable is assigned value <var>8</var>.</p>

<p>Also, if the name of the parameter and instance variable is different, the compiler automatically appends this keyword. For example, the code:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-keyword">int</span> age;

Main(<span class="hljs-keyword">int</span> i) {
    age = i;
}
}</code></pre>

<p>is equivalent to:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-keyword">int</span> age;

Main(<span class="hljs-keyword">int</span> i) {
    <span class="hljs-keyword">this</span>.age = i;
}
}</code></pre>

<hr>
<h3 id="getter-setter">2. this with Getters and Setters</h3>

<p>Another common use of <code>this</code> keyword is in <em>setters and getters methods</em> of a class. For example:</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
String name;

<span class="hljs-comment">// setter method</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">( String name )</span> </span>{
   <span class="hljs-keyword">this</span>.name = name;
}

<span class="hljs-comment">// getter method</span>
<span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>{
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{
   Main obj = <span class="hljs-keyword">new</span> Main();

   <span class="hljs-comment">// calling the setter and the getter method</span>
   obj.setName(<span class="hljs-string">"Toshiba"</span>);
   System.out.println(<span class="hljs-string">"obj.name: "</span>+obj.getName());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>obj.name: Toshiba</samp></pre>

<p>Here, we have used <code>this</code> keyword:</p>

<ul>
<li>to assign value inside the setter method</li>
<li>to access value inside the getter method</li>
</ul>

<hr>
<h2 id="constructor-overloading">3. Using this in Constructor Overloading</h2>

<p>While working with <a href="/java-programming/constructors#overloading">constructor overloading</a>, we might have to invoke one constructor from another constructor. In such a case, we cannot call the constructor explicitly. Instead, we have to use <code>this</code> keyword.</p>

<p>Here, we use a different form of this keyword. That is, <code>this()</code>. Let's take an example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span> </span>{

<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a, b;

<span class="hljs-comment">// constructor with 2 parameters</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Complex</span><span class="hljs-params">( <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j )</span></span>{
    <span class="hljs-keyword">this</span>.a = i;
    <span class="hljs-keyword">this</span>.b = j;
}

<span class="hljs-comment">// constructor with single parameter</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Complex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>{
    <span class="hljs-comment">// invokes the constructor with 2 parameters</span>
    <span class="hljs-keyword">this</span>(i, i); 
}

<span class="hljs-comment">// constructor with no parameter</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Complex</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">// invokes the constructor with single parameter</span>
    <span class="hljs-keyword">this</span>(<span class="hljs-number">0</span>);
}

<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.a + <span class="hljs-string">" + "</span> + <span class="hljs-keyword">this</span>.b + <span class="hljs-string">"i"</span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{

    <span class="hljs-comment">// creating object of Complex class</span>
    <span class="hljs-comment">// calls the constructor with 2 parameters</span>
    Complex c1 = <span class="hljs-keyword">new</span> Complex(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); 

    <span class="hljs-comment">// calls the constructor with a single parameter</span>
    Complex c2 = <span class="hljs-keyword">new</span> Complex(<span class="hljs-number">3</span>);

    <span class="hljs-comment">// calls the constructor with no parameters</span>
    Complex c3 = <span class="hljs-keyword">new</span> Complex();

    <span class="hljs-comment">// print objects</span>
    System.out.println(c1);
    System.out.println(c2);
    System.out.println(c3);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>2 + 3i
3 + 3i
0 + 0i</samp></pre>

<p>In the above example, we have used <code>this</code> keyword,</p>

<ul>
<li>to call the constructor <code>Complex(int i, int j)</code> from the constructor <code>Complex(int i)</code></li>
<li>to call the constructor <code>Complex(int i)</code> from the constructor <code>Complex()</code></li>
</ul>

<p>Notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">System.out.println(c1);</code></pre>

<p>Here, when we print the object <var>c1</var>, the object is converted into a <a href="/java-programming/string">string</a>. In this process, the <a href="/java-programming/library/object/tostring">toString()</a> is called. Since we override the <code>toString()</code> method inside our class, we get the output according to that method.</p>

<p>One of the huge advantages of <code>this()</code> is to reduce the amount of duplicate code. However, we should be always careful while using <code>this()</code>.</p>

<p>This is because calling constructor from another constructor adds overhead and it is a slow process. Another huge advantage of using <code>this()</code> is to reduce the amount of duplicate code.</p>

<p class="note-tip"><strong>Note</strong>: Invoking one constructor from another constructor is called explicit constructor invocation.</p>

<hr>
<h3 id="argument">Passing this as an Argument</h3>

<p>We can use <code>this</code> keyword to pass the current object as an argument to a method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThisExample</span> </span>{
<span class="hljs-comment">// declare variables</span>
<span class="hljs-keyword">int</span> x;
<span class="hljs-keyword">int</span> y;

ThisExample(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) {
   <span class="hljs-comment">// assign values of variables inside constructor</span>
    <span class="hljs-keyword">this</span>.x = x;
    <span class="hljs-keyword">this</span>.y = y;

    <span class="hljs-comment">// value of x and y before calling add()</span>
    System.out.println(<span class="hljs-string">"Before passing this to addTwo() method:"</span>);
    System.out.println(<span class="hljs-string">"x = "</span> + <span class="hljs-keyword">this</span>.x + <span class="hljs-string">", y = "</span> + <span class="hljs-keyword">this</span>.y);

    <span class="hljs-comment">// call the add() method passing this as argument</span>
    add(<span class="hljs-keyword">this</span>);

    <span class="hljs-comment">// value of x and y after calling add()</span>
    System.out.println(<span class="hljs-string">"After passing this to addTwo() method:"</span>);
    System.out.println(<span class="hljs-string">"x = "</span> + <span class="hljs-keyword">this</span>.x + <span class="hljs-string">", y = "</span> + <span class="hljs-keyword">this</span>.y);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ThisExample o)</span></span>{
    o.x += <span class="hljs-number">2</span>;
    o.y += <span class="hljs-number">2</span>;
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span> </span>{
    ThisExample obj = <span class="hljs-keyword">new</span> ThisExample(<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Before passing this to addTwo() method:
x = 1, y = -2
After passing this to addTwo() method:
x = 3, y = 0</samp></pre>

<p>In the above example, inside the constructor <code>ThisExample()</code>, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">add(<span class="hljs-keyword">this</span>);</code></pre>

<p>Here, we are calling the <code>add()</code> method by passing this as an argument. Since this keyword contains the reference to the object <var>obj</var> of the class, we can change the value of <var>x</var> and <var>y</var> inside the <code>add()</code> method.</p>

</div>
</section>
<section id="five9">
<h1>Java final keyword</h1>
<div class="content">
  <p id="introduction">In Java, the <code>final</code> keyword is used to denote constants. It can be used with <a href="/java-programming/variables-literals">variables</a>, <a href="/java-programming/methods">methods</a>, and <a href="/java-programming/class-objects">classes</a>.</p>

<p>Once any entity (variable, method or class) is declared <code>final</code>, it can be assigned only once. That is,</p>

<ul>
<li>the final variable cannot be reinitialized with another value</li>
<li>the final method cannot be overridden</li>
<li>the final class cannot be extended</li>
</ul>

<hr>
<h2 id="final-variable">1. Java final Variable</h2>

<p>In Java, we cannot change the value of a final variable. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create a final variable</span>
<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> AGE = <span class="hljs-number">32</span>;

<span class="hljs-comment">// try to change the final variable</span>
AGE = <span class="hljs-number">45</span>;
System.out.println(<span class="hljs-string">"Age: "</span> + AGE);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above program, we have created a final variable named <var>age</var>. And we have tried to change the value of the final variable.</p>

<p>When we run the program, we will get a compilation error with the following message.</p>

<pre style="max-height: 600px;"><code class="java hljs">cannot assign a value to <span class="hljs-keyword">final</span> variable AGE
AGE = <span class="hljs-number">45</span>;
^</code></pre>

<p class="note-tip"><strong>Note</strong>: It is recommended to use uppercase to declare final variables in Java.</p>

<hr>
<h2 id="final-method">2. Java final Method</h2>

<p>Before you learn about final methods and final classes, make sure you know about the <a href="/java-programming/inheritance">Java Inheritance</a>.</p>

<p>In Java, the <code>final</code> method cannot be overridden by the child class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalDemo</span> </span>{
<span class="hljs-comment">// create a final method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"This is a final method."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FinalDemo</span> </span>{
<span class="hljs-comment">// try to override final method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"The final method is overridden."</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Main obj = <span class="hljs-keyword">new</span> Main();
obj.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we have created a final method named <code>display()</code> inside the <code>FinalDemo</code> class. Here, the <var>Main</var> class inherits the <var>FinalDemo</var> class.</p>

<p>We have tried to override the final method in the <var>Main</var> class. When we run the program, we will get a compilation error with the following message.</p>

<pre style="max-height: 600px;"><code class="java hljs"> display() <span class="hljs-function">in Main cannot override <span class="hljs-title">display</span><span class="hljs-params">()</span> in FinalDemo
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
                ^
overridden method is <span class="hljs-keyword">final</span></code></pre>

<hr>
<h2 id="final-class">3. Java final Class</h2>

<p>In Java, the final class cannot be inherited by another class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create a final class</span>
<span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalClass</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"This is a final method."</span>);
}
}

<span class="hljs-comment">// try to extend the final class</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FinalClass</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"The final method is overridden."</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Main obj = <span class="hljs-keyword">new</span> Main();
obj.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above example, we have created a final class named <var>FinalClass</var>. Here, we have tried to inherit the final class by the <var>Main</var> class.</p>

<p>When we run the program, we will get a compilation error with the following message.</p>

<pre style="max-height: 600px;"><code class="java hljs">cannot inherit from <span class="hljs-keyword">final</span> FinalClass
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FinalClass</span> </span>{
               ^</code></pre>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/static-keyword">Java Static Keyword</a></li>
</ul>

</div>
</section>
<section id="five10">
<h1>Java Recursion</h1>
<div class="content">
  <p id="introduction">In Java, a <a href="/java-programming/methods">method</a> that calls itself is known as a recursive method. And, this process is known as recursion.</p>

<p>A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.</p>

<hr>
<h3 id="how-works">How Recursion works?</h3>

<figure><img src="assets/images/java-recursive-call.jpg" title="Working of Java Recursion" alt="A function is calling itself" width="416" height="247">
<figcaption>Working of Java Recursion</figcaption></figure>
<p>In the above example, we have called the <code>recurse()</code> method from inside the <code>main</code> method (normal method call). And, inside the recurse() method, we are again calling the same recurse method. This is a recursive call.</p>

<p>In order to stop the recursive call, we need to provide some conditions inside the method. Otherwise, the method will be called infinitely.</p>

<p>Hence, we use the <a href="/java-programming/if-else-statement">if...else statement</a> (or similar approach) to terminate the recursive call inside the method.</p>

<hr>
<h2 id="example">Example: Factorial of a Number Using Recursion</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factorial</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">( <span class="hljs-keyword">int</span> n )</span> </span>{
    <span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span>)  <span class="hljs-comment">// termination condition</span>
        <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>); <span class="hljs-comment">// recursive call</span>
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    <span class="hljs-keyword">int</span> number = <span class="hljs-number">4</span>, result;
    result = factorial(number);
    System.out.println(number + <span class="hljs-string">" factorial = "</span> + result);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>4 factorial = 24</samp></pre>

<p>In the above example, we have a method named <code>factorial()</code>. The <code>factorial()</code> is called from the <code>main()</code> method with the <var>number</var> variable passed as an argument.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>);</code></pre>

<p>The <code>factorial()</code> method is calling itself. Initially, the value of n is 4 inside <code>factorial()</code>. During the next recursive call, 3 is passed to the <code>factorial()</code> method. This process continues until <var>n</var> is equal to 0.</p>

<p>When <var>n</var> is equal to 0, the <code>if</code> statement returns false hence 1 is returned. Finally, the accumulated result is passed to the <code>main()</code> method.</p>

<hr>
<h2 id="factorial-program">Working of Factorial Program</h2>

<p>The image below will give you a better idea of how the factorial program is executed using recursion.</p>

<figure><img src="assets/images/how-recursion-works-java.jpg" title="Factorial Program using Recursion" alt="Finding the factorial of a number using recursion" width="456" height="1017">
<figcaption>Factorial Program using Recursion</figcaption></figure>
<hr>
<h2 id="advantages-disadvantages">Advantages and Disadvantages of Recursion</h2>

<p>When a recursive call is made, new storage locations for <a href="/java-programming/variables-literals">variables</a> are allocated on the stack. As, each recursive call returns, the old variables and parameters are removed from the stack. Hence, recursion generally uses more memory and is generally slow.</p>

<p>On the other hand, a recursive solution is much simpler and takes less time to write, debug and maintain.</p>




</div>
</section>
<section id="five11">
<h1>Java instanceof Operator</h1>
<div class="content">
  <p id="introduction">The <code>instanceof</code> operator in Java is used to check whether an object is an instance of a particular class or not.</p>

<p>Its syntax is</p>

<pre style="max-height: 600px;"><code class="java hljs">objectName instanceOf className;</code></pre>

<p>Here, if <var>objectName</var> is an instance of <var>className</var>, the <a href="/java-programming/operators">operator</a> returns <code>true</code>. Otherwise, it returns <code>false</code>.</p>

<hr>
<h3 id="example">Example: Java instanceof</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create a variable of string type</span>
String name = <span class="hljs-string">"Programiz"</span>;

<span class="hljs-comment">// checks if name is instance of String</span>
<span class="hljs-keyword">boolean</span> result1 = name <span class="hljs-keyword">instanceof</span> String;
System.out.println(<span class="hljs-string">"name is an instance of String: "</span> + result1);

<span class="hljs-comment">// create an object of Main</span>
Main obj = <span class="hljs-keyword">new</span> Main();

<span class="hljs-comment">// checks if obj is an instance of Main</span>
<span class="hljs-keyword">boolean</span> result2 = obj <span class="hljs-keyword">instanceof</span> Main;
System.out.println(<span class="hljs-string">"obj is an instance of Main: "</span> + result2);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>name is an instance of String: true
obj is an instance of Main: true</samp></pre>

<p>In the above example, we have created a variable <var>name</var> of the <code>String</code> type and an object <var>obj</var> of the <var>Main</var> class.</p>

<p>Here, we have used the <code>instanceof</code> operator to check whether <var>name</var> and <var>obj</var> are instances of the <code>String</code> and <var>Main</var> class respectively. And, the operator returns <code>true</code> in both cases.</p>

<p class="note-tip"><strong>Note</strong>: In Java, <code>String</code> is a class rather than a primitive data type. To learn more, visit <a href="/java-programming/string">Java String</a>.</p>

<hr>
<h2 id="inheritance">Java instanceof during Inheritance</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>We can use the <code>instanceof</code> operator to check if objects of the subclass is also an instance of the superclass. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java Program to check if an object of the subclass</span>
<span class="hljs-comment">// is also an instance of the superclass</span>

<span class="hljs-comment">// superclass</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
}

<span class="hljs-comment">// subclass</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the subclass</span>
Dog d1 = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// checks if d1 is an instance of the subclass</span>
System.out.println(d1 <span class="hljs-keyword">instanceof</span> Dog);        <span class="hljs-comment">// prints true</span>

<span class="hljs-comment">// checks if d1 is an instance of the superclass</span>
System.out.println(d1 <span class="hljs-keyword">instanceof</span> Animal);     <span class="hljs-comment">// prints true</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above example, we have created a subclass <var>Dog</var> that inherits from the superclass <var>Animal</var>. We have created an object <var>d1</var> of the <var>Dog</var> class.</p>

<p>Inside the print statement, notice the expression,</p>

<pre style="max-height: 600px;"><code class="java hljs">d1 <span class="hljs-keyword">instanceof</span> Animal</code></pre>

<p>Here, we are using the <code>instanceof</code> operator to check whether <var>d1</var> is also an instance of the superclass <var>Animal</var>.</p>

<hr>
<h2 id="interface">Java instanceof in Interface</h2>

<p>The <code>instanceof</code> operator is also used to check whether an object of a class is also an instance of the interface implemented by the class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Java program to check if an object of a class is also</span>
<span class="hljs-comment">//  an instance of the interface implemented by the class</span>

<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Animal</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Animal</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the Dog class</span>
Dog d1 = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// checks if the object of Dog</span>
<span class="hljs-comment">// is also an instance of Animal</span>
System.out.println(d1 <span class="hljs-keyword">instanceof</span> Animal);  <span class="hljs-comment">// returns true</span>
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>In the above example, the <var>Dog</var> class implements the <var>Animal</var> interface. Inside the print statement, notice the expression,</p>

<pre style="max-height: 600px;"><code class="java hljs">d1 <span class="hljs-keyword">instanceof</span> Animal</code></pre>

<p>Here, <var>d1</var> is an instance of <var>Dog</var> class. The <code>instanceof</code> operator checks if <var>d1</var> is also an instance of the interface <var>Animal</var>.</p>

<div class="note-tip">
<p><strong>Note</strong>: In Java, all the classes are inherited from the <code>Object</code> class. So, instances of all the classes are also an instance of the <code>Object</code> class.</p>

<p>In the previous example, if we check,</p>

<pre style="max-height: 600px;"><code class="java hljs">d1 <span class="hljs-keyword">instanceof</span> Object</code></pre>

<p>The result will be <code>true</code>.</p>

</div>
<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/examples/get-class-of-object">Java Program to Determine the class of an object</a> </li>
</ul>

</div>
</section>


<!-- six menu sections -->
<section id="six1">
<h1>Java Inheritance</h1>
<div class="content">
  <p id="introduction">Inheritance is one of the key features of OOP that allows us to create a new class from an existing class.</p>

<p>The new class that is created is known as <strong>subclass</strong> (child or derived class) and the existing class from where the child class is derived is known as <strong>superclass</strong> (parent or base class).</p>

<p>The <code>extends</code> keyword is used to perform inheritance in Java. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-comment">// methods and fields</span>
}

<span class="hljs-comment">// use of extends keyword</span>
<span class="hljs-comment">// to perform inheritance</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// methods and fields of Animal</span>
<span class="hljs-comment">// methods and fields of Dog</span>
}</code></pre>

<p>In the above example, the <var>Dog</var> class is created by inheriting the <a href="/java-programming/methods">methods</a> and fields from the <var>Animal</var> class.</p>

<p>Here, <var>Dog</var> is the subclass and <var>Animal</var> is the superclass.</p>

<hr>
<h3 id="example">Example 1: Java Inheritance</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// field and method of the parent class</span>
String name;
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can eat"</span>);
}
}

<span class="hljs-comment">// inherit from Animal</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// new method in subclass</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"My name is "</span> + name);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the subclass</span>
Dog labrador = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// access field of superclass</span>
labrador.name = <span class="hljs-string">"Rohu"</span>;
labrador.display();

<span class="hljs-comment">// call method of superclass</span>
<span class="hljs-comment">// using object of subclass</span>
labrador.eat();

}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>My name is Rohu
I can eat</samp></pre>

<p>In the above example, we have derived a subclass <var>Dog</var> from superclass <var>Animal</var>. Notice the statements,</p>

<pre style="max-height: 600px;"><code class="java hljs">labrador.name = <span class="hljs-string">"Rohu"</span>;

labrador.eat();</code></pre>

<p>Here, <var>labrador</var> is an object of <var>Dog</var>. However, <var>name</var> and <code>eat()</code> are the members of the <var>Animal</var> class.</p>

<p>Since <var>Dog</var> inherits the field and method from <var>Animal</var>, we are able to access the field and method using the object of the <var>Dog</var>.</p>

<figure><img src="assets/images/java-inheritance-implementation.png" title="Java Inheritance Implementation" alt="Subclass Dog can access the field and method of the superclass Animal." width="460" height="290">
<figcaption>Java Inheritance Implementation</figcaption></figure>
<hr>
<h2 id="is-a">is-a relationship</h2>

<p>In Java, inheritance is an <strong>is-a</strong> relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example,</p>

<ul>
<li><strong>Car</strong> is a <strong>Vehicle</strong></li>
<li><strong>Orange</strong> is a <strong>Fruit</strong></li>
<li><strong>Surgeon</strong> is a <strong>Doctor</strong></li>
<li><strong>Dog</strong> is an <strong>Animal</strong></li>
</ul>

<p>Here, <strong>Car</strong> can inherit from <strong>Vehicle</strong>, <strong>Orange</strong> can inherit from <strong>Fruit</strong>, and so on.</p>

<hr>
<h2 id="method-overriding">Method Overriding in Java Inheritance</h2>

<p>In <strong>Example 1</strong>, we see the object of the subclass can access the method of the superclass.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>However, if the same method is present in both the superclass and subclass, what will happen?</strong></p>

<p>In this case, the method in the subclass overrides the method in the superclass. This concept is known as method overriding in Java.</p>

<h3>Example 2: Method overriding in Java Inheritance</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// method in the superclass</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can eat"</span>);
}
}

<span class="hljs-comment">// Dog inherits Animal</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overriding the eat() method</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I eat dog food"</span>);
}

<span class="hljs-comment">// new method in subclass</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can bark"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the subclass</span>
Dog labrador = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// call the eat() method</span>
labrador.eat();
labrador.bark();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I eat dog food
I can bark</samp></pre>

<p>In the above example, the <code>eat()</code> method is present in both the superclass <var>Animal</var> and the subclass <var>Dog</var>.</p>

<p>Here, we have created an object <var>labrador</var> of <var>Dog</var>.</p>

<p>Now when we call <code>eat()</code> using the object <var>labrador</var>, the method inside <var>Dog</var> is called. This is because the method inside the derived class overrides the method inside the base class.</p>

<p>This is called method overriding. To learn more, visit <a href="/java-programming/method-overriding">Java Method Overriding</a>.</p>

<p class="note-tip"><strong>Note</strong>: We have used the <code>@Override</code> annotation to tell the compiler that we are overriding a method. However, the annotation is not mandatory. To learn more, visit <a href="/java-programming/annotations">Java Annotations</a>.</p>

<hr>
<h2 id="super">super Keyword in Java Inheritance</h2>

<p>Previously we saw that the same method in the subclass overrides the method in superclass.</p>

<p>In such a situation, the <code>super</code> keyword is used to call the method of the parent class from the method of the child class.</p>

<h3>Example 3: super Keyword in Inheritance</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// method in the superclass</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can eat"</span>);
}
}

<span class="hljs-comment">// Dog inherits Animal</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overriding the eat() method</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{

<span class="hljs-comment">// call method of superclass</span>
<span class="hljs-keyword">super</span>.eat();
System.out.println(<span class="hljs-string">"I eat dog food"</span>);
}

<span class="hljs-comment">// new method in subclass</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can bark"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the subclass</span>
Dog labrador = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// call the eat() method</span>
labrador.eat();
labrador.bark();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I can eat
I eat dog food
I can bark </samp></pre>

<p>In the above example, the <code>eat()</code> method is present in both the base class <var>Animal</var> and the derived class <var>Dog</var>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">super</span>.eat();</code></pre>

<p>Here, the <code>super</code> keyword is used to call the <code>eat()</code> method present in the superclass.</p>

<p>We can also use the <code>super</code> keyword to call the <a href="/java-programming/constructors">constructor</a> of the superclass from the constructor of the subclass. To learn more, visit <a href="/java-programming/super-keyword">Java super keyword</a><strong>.</strong></p>

<hr>
<h2 id="protected-keyword">protected Members in Inheritance</h2>

<p>In Java, if a class includes <code>protected</code> fields and methods, then these fields and methods are accessible from the subclass of the class.</p>

<h3>Example 4: protected Members in Inheritance</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-keyword">protected</span> String name;

<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am an animal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"My name is "</span> + name);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the subclass</span>
Dog labrador = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// access protected field and method</span>
<span class="hljs-comment">// using the object of subclass</span>
labrador.name = <span class="hljs-string">"Rocky"</span>;
labrador.display();

labrador.getInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I am an animal.
My name is Rocky</samp></pre>

<p>In the above example, we have created a class named Animal. The class includes a protected field: <var>name</var> and a method: <code>display()</code>.</p>

<p>We have inherited the <var>Dog</var> class inherits <var>Animal</var>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">labrador.name = <span class="hljs-string">"Rocky"</span>;
labrador.display();</code></pre>

<p>Here, we are able to access the protected field and method of the superclass using the <var>labrador</var> object of the subclass.</p>

<hr>
<h2 id="advantage">Why use inheritance?</h2>

<ul>
<li>The most important use of inheritance in Java is code reusability. The code that is present in the parent class can be directly used by the child class.</li>
<li>Method overriding is also known as runtime polymorphism. Hence, we can achieve Polymorphism in Java with the help of inheritance.</li>
</ul>

<hr>
<h2 id="types">Types of inheritance</h2>

<p>There are five types of inheritance.</p>

<h3>1. Single Inheritance</h3>

<p>In single inheritance, a single subclass extends from a single superclass. For example,</p>

<figure><img src="assets/images/java-single-inheritance.png" title="Java Single Inheritance" alt="Class A inherits from class B." width="200" height="212">
<figcaption>Java Single Inheritance</figcaption></figure>
<hr>
<h3>2. Multilevel Inheritance</h3>

<p>In multilevel inheritance, a subclass extends from a superclass and then the same subclass acts as a superclass for another class. For example,</p>

<figure><img src="assets/images/java-multilevel-inheritance.png" title="Java Multilevel Inheritance" alt="Class B inherits from class A and class C inherits from class B." width="240" height="386">
<figcaption>Java Multilevel Inheritance</figcaption></figure>
<hr>
<h3>3. Hierarchical Inheritance</h3>

<p>In hierarchical inheritance, multiple subclasses extend from a single superclass. For example,</p>

<figure><img src="assets/images/java-hierarchical-inheritance.png" title="Java Hierarchical Inheritance" alt="Both classes B and C inherit from the single class A." width="340" height="237">
<figcaption>Java Hierarchical Inheritance</figcaption></figure>
<hr>
<h3>4. Multiple Inheritance</h3>

<p>In multiple inheritance, a single subclass extends from multiple superclasses. For example,</p>

<figure><img src="assets/images/java-multiple-inheritance.png" title="Java Multiple Inheritance" alt="Class C inherits from both classes A and B." width="360" height="251">
<figcaption>Java Multiple Inheritance</figcaption></figure>
<p class="note-tip"><strong>Note</strong>: Java doesn't support multiple inheritance. However, we can achieve multiple inheritance using interfaces. To learn more, visit <a href="/java-programming/examples/implement-multiple-inheritance">Java implements multiple inheritance</a>.</p>

<hr>
<h3>5. Hybrid Inheritance</h3>

<p>Hybrid inheritance is a combination of two or more types of inheritance. For example,</p>

<figure><img src="assets/images/java-hybrid-inheritance.png" title="Java Hybrid Inheritance" alt="Class B and C inherit from a single class A and class D inherits from both the class B and C." width="360" height="411">
<figcaption>Java Hybrid Inheritance</figcaption></figure>
<p>Here, we have combined hierarchical and multiple inheritance to form a hybrid inheritance.</p>

</div>
</section>
<section id="six2">
<h1>Java Method Overriding</h1>
<div class="content">
  <p id="introduction">In the last tutorial, we learned about inheritance. Inheritance is an OOP property that allows us to derive a new class (subclass) from an existing class (superclass). The subclass inherits the attributes and methods of the superclass.</p>

<p>Now, if the same method is defined in both the superclass and the subclass, then the method of the subclass class overrides the method of the superclass. This is known as method overriding.</p>

<hr>
<h3 id="example-1">Example 1: Method Overriding</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"I am an animal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"I am a dog."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Dog d1 = <span class="hljs-keyword">new</span> Dog();
  d1.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am a dog.</samp></pre>

<p>In the above program, the <code>displayInfo()</code> method is present in both the <var>Animal</var> superclass and the <var>Dog</var> subclass.</p>

<p>When we call <code>displayInfo()</code> using the <var>d1</var> object (object of the subclass), the method inside the subclass <var>Dog</var> is called. The <code>displayInfo()</code> method of the subclass overrides the same method of the superclass.</p>

<figure><img src="assets/images/method-overriding-in-java.png" title="Method Overriding in Java" alt="Working of method overriding in Java." width="450" height="289">
</figure>
<p>Notice the use of the <code>@Override</code> annotation in our example. In Java, annotations are the metadata that we used to provide information to the compiler. Here, the <code>@Override</code> annotation specifies the compiler that the method after this annotation overrides the method of the superclass.</p>

<p>It is not mandatory to use <code>@Override</code>. However, when we use this, the method should follow all the rules of overriding. Otherwise, the compiler will generate an error.</p>

<hr>
<h2 id="rules">Java Overriding Rules</h2>

<ul>
<li>Both the superclass and the subclass must have the same method name, the same return type and the same parameter list.</li>
<li>We cannot override the method declared as <code>final</code> and <code>static</code>.</li>
<li>We should always override abstract methods of the superclass (will be discussed in later tutorials).</li>
</ul>

<hr>
<h2 id="super">super Keyword in Java Overriding</h2>

<p>A common question that arises while performing overriding in Java is:</p>

<p><strong>Can we access the method of the superclass after overriding?</strong> </p>

<p>Well, the answer is <strong>Yes</strong>. To access the method of the superclass from the subclass, we use the <code>super</code> keyword.</p>

<h3>Example 2: Use of super Keyword</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"I am an animal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">super</span>.displayInfo();
  System.out.println(<span class="hljs-string">"I am a dog."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Dog d1 = <span class="hljs-keyword">new</span> Dog();
  d1.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am an animal.
I am a dog.</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, the subclass <var>Dog</var> overrides the method <code>displayInfo()</code> of the superclass <var>Animal</var>.</p>

<p>When we call the method <code>displayInfo()</code> using the <var>d1</var> object of the <var>Dog</var> subclass, the method inside the <var>Dog</var> subclass is called; the method inside the superclass is not called.</p>

<p>Inside <code>displayInfo()</code> of the <var>Dog</var> subclass, we have used <code>super.displayInfo()</code> to call <code>displayInfo()</code> of the superclass.</p>

<hr>
<p>It is important to note that <a href="/java-programming/constructors">constructors</a> in Java are not inherited. Hence, there is no such thing as constructor overriding in Java.</p>

<p>However, we can call the constructor of the superclass from its subclasses. For that, we use <code>super()</code>. To learn more, visit <a href="/java-programming/super-keyword">Java super keyword</a>.</p>

<hr>
<h2 id="access-specifier">Access Specifiers in Method Overriding</h2>

<p>The same method declared in the superclass and its subclasses can have different access specifiers. However, there is a restriction.</p>

<p>We can only use those access specifiers in subclasses that provide larger access than the access specifier of the superclass. For example,</p>

<p>Suppose, a method <code>myClass()</code> in the superclass is declared <code>protected</code>. Then, the same method <code>myClass()</code> in the subclass can be either <code>public</code> or <code>protected</code>, but not <code>private</code>.</p>

<h3>Example 3: Access Specifier in Overriding</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"I am an animal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"I am a dog."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Dog d1 = <span class="hljs-keyword">new</span> Dog();
  d1.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am a dog.</samp></pre>

<p>In the above example, the subclass <var>Dog</var> overrides the method <code>displayInfo()</code> of the superclass <var>Animal</var>.</p>

<p>Whenever we call <code>displayInfo()</code> using the <var>d1</var> (object of the subclass), the method inside the subclass is called.</p>

<p>Notice that, the <code>displayInfo()</code> is declared <code>protected</code> in the <var>Animal</var> superclass. The same method has the <code>public</code> access specifier in the <var>Dog</var> subclass. This is possible because the <code>public</code> provides larger access than the <code>protected</code>.</p>

<hr>
<h2>Overriding Abstract Methods</h2>

<p>In Java, abstract classes are created to be the superclass of other classes. And, if a class contains an abstract method, it is mandatory to override it.</p>

<p>We will learn more about abstract classes and overriding of abstract methods in later tutorials.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/method-overloading">Java Method Overloading</a></li>
</ul>

</div>
</section>
<section id="six3">
<h1>Java super</h1>
<div class="content">
  <p>The <code>super</code> keyword in Java is used in subclasses to access superclass members (attributes, <a href="/java-programming/constructors">constructors</a> and <a href="/java-programming/methods%5C">methods</a>).</p>

<p>Before we learn about the <code>super</code> keyword, make sure to know about <a href="/java-programming/inheritance">Java inheritance</a>.</p>

<hr>
<h2 id="uses">Uses of super keyword</h2>

<ol>
<li>To call methods of the superclass that is overridden in the subclass.</li>
<li>To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name.</li>
<li>To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor.</li>
</ol>

<p>Let's understand each of these uses.</p>

<hr>
<h2 id="access-superclass-methods">1. Access Overridden Methods of the superclass</h2>

<p>If methods with the same name are defined in both superclass and subclass, the method in the subclass overrides the method in the superclass. This is called <a href="/java-programming/method-overriding">method overriding</a>.</p>

<h3>Example 1: Method overriding</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overridden method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overriding method</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am a dog"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">()</span></span>{
display();
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
dog1.printMessage();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I am a dog</samp></pre>

<p>In this example, by making an object <var>dog1</var> of <var>Dog</var> class, we can call its method <var>printMessage()</var> which then executes the <code>display()</code> statement.</p>

<p>Since <code>display()</code> is defined in both the classes, the method of subclass <var>Dog</var> overrides the method of superclass <var>Animal</var>. Hence, the <code>display()</code> of the subclass is called.</p>

<figure><img src="assets/images/java-overriding-example.png" title="" alt="Java overriding example" width="500" height="391">
</figure>
<p><strong>What if the overridden method of the superclass has to be called?</strong> </p>

<p>We use <code>super.display()</code> if the overridden method <code>display()</code> of superclass <var>Animal</var> needs to be called.</p>

<h3>Example 2: super to Call Superclass Method</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overridden method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overriding method</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am a dog"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">()</span></span>{

<span class="hljs-comment">// this calls overriding method</span>
display();

<span class="hljs-comment">// this calls overridden method</span>
<span class="hljs-keyword">super</span>.display();
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
dog1.printMessage();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I am a dog
I am an animal</samp></pre>

<p>Here, how the above program works.</p>

<figure><img src="assets/images/call-superclass-method.png" title="" alt="Working of super in Java" width="500" height="393">
</figure>
<hr>
<h2 id="access-superclass-attributes">2. Access Attributes of the Superclass</h2>

<p>The superclass and subclass can have attributes with the same name. We use the <code>super</code> keyword to access the attribute of the superclass.</p>

<h3>Example 3: Access superclass attribute</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-keyword">protected</span> String type=<span class="hljs-string">"animal"</span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-keyword">public</span> String type=<span class="hljs-string">"mammal"</span>;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printType</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am a "</span> + type);
System.out.println(<span class="hljs-string">"I am an "</span> + <span class="hljs-keyword">super</span>.type);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
dog1.printType();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am a mammal
I am an animal</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In this example, we have defined the same instance field <var>type</var> in both the superclass <var>Animal</var> and the subclass <var>Dog</var>.</p>

<p>We then created an object <var>dog1</var> of the <var>Dog</var> class. Then, the <code>printType()</code> method is called using this object.</p>

<p>Inside the <code>printType()</code> function,</p>

<ul>
<li><var>type</var> refers to the attribute of the subclass <var>Dog</var>.</li>
<li><var>super.type</var> refers to the attribute of the superclass Animal.</li>
</ul>

<p>Hence, <code>System.out.println("I am a " + type);</code> prints <samp>I am a mammal</samp>. And, <code>System.out.println("I am an " + super.type);</code> prints <samp>I am an animal</samp>.</p>

<hr>
<h2>3. Use of super() to access superclass constructor</h2>

<p>As we know, when an object of a class is created, its default constructor is automatically called.</p>

<p>To explicitly call the superclass constructor from the subclass constructor, we use <code>super()</code>. It's a special form of the <code>super</code> keyword.</p>

<p><code>super()</code> can be used only inside the subclass constructor and must be the first statement.</p>

<h3>Example 4: Use of super()</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// default or no-arg constructor of class Animal</span>
Animal() {
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// default or no-arg constructor of class Dog</span>
Dog() {

<span class="hljs-comment">// calling default constructor of the superclass</span>
<span class="hljs-keyword">super</span>();

System.out.println(<span class="hljs-string">"I am a dog"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong> </p>

<pre><samp>I am an animal
I am a dog</samp></pre>

<p>Here, when an object <var>dog1</var> of <var>Dog</var> class is created, it automatically calls the default or no-arg constructor of that class.</p>

<p>Inside the subclass constructor, the <code>super()</code> statement calls the constructor of the superclass and executes the statements inside it. Hence, we get the output <samp>I am an animal</samp>.</p>

<figure><img src="assets/images/super%28%29-example.png" title="" alt="Working of super() in Java" width="450" height="422">
</figure>
<p>The flow of the program then returns back to the subclass constructor and executes the remaining statements. Thus, <samp>I am a dog</samp> will be printed.</p>

<p>However, using <code>super()</code> is not compulsory. Even if <code>super()</code> is not used in the subclass constructor, the compiler implicitly calls the default constructor of the superclass.</p>

<p><strong>So, why use redundant code if the compiler automatically invokes super()?</strong> </p>

<p>It is required if the <strong>parameterized constructor (a constructor that takes arguments)</strong> of the superclass has to be called from the subclass constructor.</p>

<p>The parameterized <code>super()</code> must always be the first statement in the body of the constructor of the subclass, otherwise, we get a compilation error.</p>

<h3 id="access-superclass-constructors">Example 5: Call Parameterized Constructor Using super()</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// default or no-arg constructor</span>
Animal() {
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}

<span class="hljs-comment">// parameterized constructor</span>
Animal(String type) {
System.out.println(<span class="hljs-string">"Type: "</span>+type);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// default constructor</span>
Dog() {

<span class="hljs-comment">// calling parameterized constructor of the superclass</span>
<span class="hljs-keyword">super</span>(<span class="hljs-string">"Animal"</span>);

System.out.println(<span class="hljs-string">"I am a dog"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Type: Animal
I am a dog</samp></pre>

<p>The compiler can automatically call the no-arg constructor. However, it cannot call parameterized constructors.</p>

<p>If a parameterized constructor has to be called, we need to explicitly define it in the subclass constructor.</p>

<figure><img src="assets/images/parameterized-super-example.png" title="" alt="Working of super in case of parameterized constructor." width="450" height="375">
</figure>
<p>Note that in the above example, we explicitly called the parameterized constructor <code>super("Animal")</code>. The compiler does not call the default constructor of the superclass in this case.</p>

</div>
</section>
<section id="six4">
<h1>Java Abstract Class and Abstract Methods</h1>
<div class="content">
  <h2 id="abstract-class">Java Abstract Class</h2>

<p>The abstract class in Java cannot be instantiated (we cannot create objects of abstract classes). We use the <code>abstract</code> keyword to declare an abstract class. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an abstract class</span>
<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Language</span> </span>{
<span class="hljs-comment">// fields and methods</span>
}
...

<span class="hljs-comment">// try to create an object Language</span>
<span class="hljs-comment">// throws an error</span>
Language obj = <span class="hljs-keyword">new</span> Language(); </code></pre>

<p>An abstract class can have both the regular methods and abstract methods. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-comment">// abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;

<span class="hljs-comment">// regular method</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"This is regular method"</span>);
}
}</code></pre>

<p>To know about the non-abstract methods, visit <a href="/java-programming/methods">Java methods</a>. Here, we will learn about abstract methods.</p>

<hr>
<h2 id="abstract-method">Java Abstract Method</h2>

<p>A method that doesn't have its body is known as an abstract method. We use the same <code>abstract</code> keyword to create abstract methods. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;</code></pre>

<p>Here, <code>display()</code> is an abstract method. The body of <code>display()</code> is replaced by <code>;</code>.</p>

<p>If a class contains an abstract method, then the class should be declared abstract. Otherwise, it will generate an error. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// error</span>
<span class="hljs-comment">// class should be abstract</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-comment">// abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;
}</code></pre>

<hr>
<h3 id="example">Example: Java Abstract Class and Method</h3>

<p>Though abstract classes cannot be instantiated, we can create subclasses from it. We can then access members of the abstract class using the object of the subclass. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-comment">// method of abstract class</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"This is Java Programming"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Main</span>
Main obj = <span class="hljs-keyword">new</span> Main();

<span class="hljs-comment">// access method of abstract class</span>
<span class="hljs-comment">// using object of Main class</span>
obj.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>This is Java programming</samp></pre>

<p>In the above example, we have created an abstract class named <var>Language</var>. The class contains a regular method <code>display()</code>.</p>

<p>We have created the Main class that inherits the abstract class. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">obj.display();</code></pre>

<p>Here, <var>obj</var> is the object of the child class <var>Main</var>. We are calling the method of the abstract class using the object <var>obj</var>.</p>

<hr>
<h2 id="implement">Implementing Abstract Methods</h2>

<p>If the abstract class includes any abstract method, then all the child classes inherited from the abstract superclass must provide the implementation of the abstract method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSound</span><span class="hljs-params">()</span></span>;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can eat."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// provide implementation of abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSound</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Bark bark"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Dog class</span>
Dog d1 = <span class="hljs-keyword">new</span> Dog();

d1.makeSound();
d1.eat();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Bark bark
I can eat.</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we have created an abstract class <var>Animal</var>. The class contains an abstract method <code>makeSound()</code> and a non-abstract method <code>eat()</code>.</p>

<p>We have inherited a subclass <var>Dog</var> from the superclass <var>Animal</var>. Here, the subclass <var>Dog</var> provides the implementation for the abstract method <code>makeSound()</code>.</p>

<p>We then used the object <var>d1</var> of the <var>Dog</var> class to call methods <code>makeSound()</code> and <code>eat()</code>.</p>

<p class="note-tip"><strong>Note</strong>: If the <var>Dog</var> class doesn't provide the implementation of the abstract method <code>makeSound()</code>, <var>Dog</var> should also be declared as abstract. This is because the subclass <var>Dog</var> inherits <code>makeSound()</code> from <var>Animal</var>.</p>

<hr>
<h3 id="access-constructor">Accesses Constructor of Abstract Classes</h3>

<p>An abstract class can have <a href="/java-programming/constructors">constructors</a> like the regular class. And, we can access the constructor of an abstract class from the subclass using the <code>super</code> keyword. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
Animal() {
  ….
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
Dog() {
  <span class="hljs-keyword">super</span>();
  ...
}
}</code></pre>

<p>Here, we have used the <code>super()</code> inside the constructor of <var>Dog</var> to access the constructor of the <var>Animal</var>.</p>

<p>Note that the <code>super</code> should always be the first statement of the subclass constructor. Visit <a href="/java-programming/super-keyword">Java super keyword</a> to learn more.</p>

<hr>
<h2 id="abstraction">Java Abstraction</h2>

<p>The major use of abstract classes and methods is to achieve abstraction in Java.</p>

<p>Abstraction is an important concept of object-oriented programming that allows us to hide unnecessary details and only show the needed information.</p>

<p>This allows us to manage complexity by omitting or hiding details with a simpler, higher-level idea.</p>

<p>A practical example of abstraction can be motorbike brakes. We know what brake does. When we apply the brake, the motorbike will stop. However, the working of the brake is kept hidden from us.</p>

<p>The major advantage of hiding the working of the brake is that now the manufacturer can implement brake differently for different motorbikes, however, what brake does will be the same.</p>

<p>Let's take an example that helps us to better understand Java abstraction.</p>

<h3>Example 3: Java Abstraction</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MotorBike</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brake</span><span class="hljs-params">()</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SportsBike</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MotorBike</span> </span>{

<span class="hljs-comment">// implementation of abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brake</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"SportsBike Brake"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MountainBike</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MotorBike</span> </span>{

<span class="hljs-comment">// implementation of abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brake</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"MountainBike Brake"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
MountainBike m1 = <span class="hljs-keyword">new</span> MountainBike();
m1.brake();
SportsBike s1 = <span class="hljs-keyword">new</span> SportsBike();
s1.brake();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>MountainBike Brake
SportsBike Brake</samp></pre>

<p>In the above example, we have created an abstract super class <var>MotorBike</var>. The superclass <var>MotorBike</var> has an abstract method <code>brake()</code>.</p>

<p>The <code>brake()</code> method cannot be implemented inside <var>MotorBike</var>. It is because every bike has different implementation of brakes. So, all the subclasses of <var>MotorBike</var> would have different implementation of <code>brake()</code>.</p>

<p>So, the implementation of <code>brake()</code> in <var>MotorBike</var> is kept hidden.</p>

<p>Here, <var>MountainBike</var> makes its own implementation of <code>brake()</code> and <var>SportsBike</var> makes its own implementation of <code>brake()</code>.</p>

<p class="note-tip"><strong>Note</strong>: We can also use interfaces to achieve abstraction in Java. To learn more, visit <a href="/java-programming/interfaces">Java Interface</a>.</p>

<hr>
<h2 id="key-points">Key Points to Remember</h2>

<ul>
<li>We use the <code>abstract</code> keyword to create abstract classes and methods.</li>
<li>An abstract method doesn't have any implementation (method body).</li>
<li>A class containing abstract methods should also be abstract.</li>
<li>We cannot create objects of an abstract class.</li>
<li>To implement features of an abstract class, we inherit subclasses from it and create objects of the subclass.</li>
<li>A subclass must override all abstract methods of an abstract class. However, if the subclass is declared abstract, it's not mandatory to override abstract methods.</li>
<li>We can access the static attributes and methods of an abstract class using the reference of the abstract class. For example,
<pre style="max-height: 600px;"><code class="java hljs">Animal.staticMethod();</code></pre>

</li>
</ul>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/class-objects">Java Class and Objects</a></li>
</ul>

</div>
</section>
<section id="six5">
<h1>Java Interface</h1>
<div class="content">
  <p id="introduction">An interface is a fully <a href="/java-programming/abstract-classes-methods">abstract class</a>. It includes a group of <a href="/java-programming/abstract-classes-methods">abstract methods</a> (<a href="/java-programming/methods">methods</a> without a body).</p>

<p>We use the <code>interface</code> <a href="/java-programming/keywords-identifiers">keyword</a> to create an interface in Java. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Language</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getType</span><span class="hljs-params">()</span></span>;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getVersion</span><span class="hljs-params">()</span></span>;
}</code></pre>

<p>Here,</p>

<ul>
<li><var>Language</var> is an interface.</li>
<li>It includes abstract methods: <code>getType()</code> and <code>getVersion()</code>.</li>
</ul>

<h2 id="implement">Implementing an Interface</h2>

<p>Like abstract classes, we cannot create objects of interfaces.</p>

<p>To use an interface, other classes must implement it. We use the <code>implements</code> keyword to implement an interface.</p>

<h3>Example 1: Java Interface</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> breadth)</span></span>;
}

<span class="hljs-comment">// implement the Polygon interface</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Polygon</span> </span>{

<span class="hljs-comment">// implementation of abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> breadth)</span> </span>{
System.out.println(<span class="hljs-string">"The area of the rectangle is "</span> + (length * breadth));
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Rectangle r1 = <span class="hljs-keyword">new</span> Rectangle();
r1.getArea(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>The area of the rectangle is 30</samp></pre>

<p>In the above example, we have created an interface named <var>Polygon</var>. The interface contains an abstract method <code>getArea()</code>.</p>

<p>Here, the <var>Rectangle</var> class implements <var>Polygon</var>. And, provides the implementation of the <code>getArea()</code> method.</p>

<h3 id="example">Example 2: Java Interface</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an interface</span>
<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Language</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">(String name)</span></span>;
}

<span class="hljs-comment">// class implements interface</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgrammingLanguage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-comment">// implementation of abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">(String name)</span> </span>{
System.out.println(<span class="hljs-string">"Programming Language: "</span> + name);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
ProgrammingLanguage language = <span class="hljs-keyword">new</span> ProgrammingLanguage();
language.getName(<span class="hljs-string">"Java"</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Programming Language: Java</samp></pre>

<p>In the above example, we have created an interface named <var>Language</var>. The interface includes an abstract method <code>getName()</code>.</p>

<p>Here, the <var>ProgrammingLanguage</var> class implements the interface and provides the implementation for the method.</p>

<hr>
<h2>Implementing Multiple Interfaces</h2>

<p>In Java, a <a href="/java-programming/class-objects">class</a> can also implement multiple interfaces. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>{
<span class="hljs-comment">// members of A</span>
}

<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>{
<span class="hljs-comment">// members of B</span>
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span> </span>{
<span class="hljs-comment">// abstract members of A</span>
<span class="hljs-comment">// abstract members of B</span>
}</code></pre>

<hr>
<h2 id="extend">Extending an Interface</h2>

<p>Similar to classes, interfaces can extend other interfaces. The <code>extends</code> keyword is used for extending interfaces. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Line</span> </span>{
<span class="hljs-comment">// members of Line interface</span>
}

<span class="hljs-comment">// extending interface</span>
<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Line</span> </span>{
<span class="hljs-comment">// members of Polygon interface</span>
<span class="hljs-comment">// members of Line interface</span>
}</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, the <var>Polygon</var> interface extends the <var>Line</var> interface. Now, if any class implements <var>Polygon</var>, it should provide implementations for all the abstract methods of both <var>Line</var> and <var>Polygon</var>.</p>

<hr>
<h3>Extending Multiple Interfaces</h3>

<p>An interface can extend multiple interfaces. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>{
...
}
<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>{
... 
}

<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span> </span>{
...
}</code></pre>

<hr>
<h2 id="advantage">Advantages of Interface in Java</h2>

<p>Now that we know what interfaces are, let's learn about why interfaces are used in Java.</p>

<ul>
<li>Similar to abstract classes, interfaces help us to achieve <strong>abstraction in Java</strong>.<br>
<br>
Here, we know <code>getArea()</code> calculates the area of polygons, but the way area is calculated is different for different polygons. Hence, the implementation of <code>getArea()</code> is independent of one another.</li>
<li>Interfaces <strong>provide specifications</strong> that a class (which implements it) must follow.<br>
<br>
In our previous example, we used <code>getArea()</code> as a specification inside the interface <var>Polygon</var>. This is like setting a rule that we should be able to get the area of every polygon.<br>
<br>
Now any class that implements the <var>Polygon</var> interface must provide an implementation for the <code>getArea()</code> method.</li>
<li>Interfaces are also used to achieve <a href="/java-programming/examples/implement-multiple-inheritance">multiple inheritance</a> in Java. For example,</li>
</ul>

<p></p><pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Line</span> </span>{
…
}

<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> </span>{
…
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Line</span>, <span class="hljs-title">Polygon</span> </span>{
…
}</code></pre>

<br>
<br>
<br>
Here, the class <var>Rectangle</var> is implementing two different interfaces. This is how we achieve multiple inheritance in Java.

<div class="note-tip">
<p><strong>Note</strong>: All the methods inside an interface are implicitly <code>public</code> and all fields are implicitly <code>public static final</code>. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Language</span> </span>{

<span class="hljs-comment">// by default public static final</span>
String type = <span class="hljs-string">"programming language"</span>;

<span class="hljs-comment">// by default public</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;
}</code></pre>

</div>
<hr>
<h2 id="default-methods">default methods in Java Interfaces</h2>

<p>With the release of Java 8, we can now add methods with implementation inside an interface. These methods are called default methods.</p>

<p>To declare default methods inside interfaces, we use the <code>default</code> keyword. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSides</span><span class="hljs-params">()</span> </span>{
<span class="hljs-comment">// body of getSides()</span>
}</code></pre>

<h3>Why default methods?</h3>

<p>Let's take a scenario to understand why default methods are introduced in Java.</p>

<p>Suppose, we need to add a new method in an interface.</p>

<p>We can add the method in our interface easily without implementation. However, that's not the end of the story. All our classes that implement that interface must provide an implementation for the method.</p>

<p>If a large number of classes were implementing this interface, we need to track all these classes and make changes to them. This is not only tedious but error-prone as well.</p>

<p>To resolve this, Java introduced default methods. Default methods are inherited like ordinary methods.</p>

<p>Let's take an example to have a better understanding of default methods.</p>

<hr>
<h2>Example: Default Method in Java Interface</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>;

<span class="hljs-comment">// default method </span>
<span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSides</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I can get sides of a polygon."</span>);
}
}

<span class="hljs-comment">// implements the interface</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">int</span> length = <span class="hljs-number">6</span>;
<span class="hljs-keyword">int</span> breadth = <span class="hljs-number">5</span>;
<span class="hljs-keyword">int</span> area = length * breadth;
System.out.println(<span class="hljs-string">"The area of the rectangle is "</span> + area);
}

<span class="hljs-comment">// overrides the getSides()</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSides</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I have 4 sides."</span>);
}
}

<span class="hljs-comment">// implements the interface</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">int</span> length = <span class="hljs-number">5</span>;
<span class="hljs-keyword">int</span> area = length * length;
System.out.println(<span class="hljs-string">"The area of the square is "</span> + area);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Rectangle</span>
Rectangle r1 = <span class="hljs-keyword">new</span> Rectangle();
r1.getArea();
r1.getSides();

<span class="hljs-comment">// create an object of Square</span>
Square s1 = <span class="hljs-keyword">new</span> Square();
s1.getArea();
s1.getSides();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>The area of the rectangle is 30
I have 4 sides.
The area of the square is 25
I can get sides of a polygon.</samp></pre>

<p>In the above example, we have created an interface named <var>Polygon</var>. It has a default method <code>getSides()</code> and an abstract method <code>getArea()</code>.</p>

<p>Here, we have created two classes, <var>Rectangle</var> and <var>Square</var>, that implement <var>Polygon</var>.</p>

<p>The <var>Rectangle</var> class provides the implementation of the <code>getArea()</code> method and overrides the <code>getSides()</code> method. However, the <var>Square</var> class only provides the implementation of the <code>getArea()</code> method.</p>

<p>Now, while calling the <code>getSides()</code> method using the <var>Rectangle</var> object, the overridden method is called. However, in the case of the <var>Square</var> object, the default method is called.</p>

<hr>
<h2 id="private-static-methods">private and static Methods in Interface</h2>

<p>The <strong>Java 8</strong> also added another feature to include <a href="/java-programming/static-keyword#methods">static methods</a> inside an interface.</p>

<p>Similar to a class, we can access static methods of an interface using its references. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an interface</span>
<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> </span>{
staticMethod(){..}
}

<span class="hljs-comment">// access static method</span>
Polygon.staticMethod();</code></pre>

<div class="note-tip">
<p><strong>Note</strong>: With the release of Java <strong>9</strong>, private methods are also supported in interfaces.</p>

<p>We cannot create objects of an interface. Hence, private methods are used as helper methods that provide support to other methods in interfaces.</p>

</div>
<hr>
<h3 id="practical-example">Practical Example of Interface</h3>

<p>Let's see a more practical example of Java Interface.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// To use the sqrt function</span>
<span class="hljs-keyword">import</span> java.lang.Math;

<span class="hljs-class"><span class="hljs-keyword">interface</span>  <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>;

<span class="hljs-comment">// calculate the perimeter of a Polygon</span>
<span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... sides)</span> </span>{
  <span class="hljs-keyword">int</span> perimeter = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> side: sides) {
     perimeter += side;
  }

System.out.println(<span class="hljs-string">"Perimeter: "</span> + perimeter);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a, b, c;
<span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> s, area;

<span class="hljs-comment">// initializing sides of a triangle</span>
Triangle(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c) {
  <span class="hljs-keyword">this</span>.a = a;
  <span class="hljs-keyword">this</span>.b = b;
  <span class="hljs-keyword">this</span>.c = c;
  s = <span class="hljs-number">0</span>;
}

<span class="hljs-comment">// calculate the area of a triangle</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>{
  s = (<span class="hljs-keyword">double</span>) (a + b + c)/<span class="hljs-number">2</span>;
  area = Math.sqrt(s*(s-a)*(s-b)*(s-c));
  System.out.println(<span class="hljs-string">"Area: "</span> + area);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Triangle t1 = <span class="hljs-keyword">new</span> Triangle(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);

<span class="hljs-comment">// calls the method of the Triangle class</span>
  t1.getArea();

<span class="hljs-comment">// calls the method of Polygon</span>
  t1.getPerimeter(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Area: 2.9047375096555625
Perimeter: 9</samp></pre>

<p>In the above program, we have created an interface named <var>Polygon</var>. It includes a default method <code>getPerimeter()</code> and an abstract method <code>getArea()</code>.</p>

<p>We can calculate the perimeter of all polygons in the same manner so we implemented the body of <code>getPerimeter()</code> in <var>Polygon</var>.</p>

<p>Now, all polygons that implement <var>Polygon</var> can use <code>getPerimeter()</code> to calculate perimeter.</p>

<p>However, the rule for calculating the area is different for different polygons. Hence, <code>getArea()</code> is included without implementation.</p>

<p>Any class that implements <var>Polygon</var> must provide an implementation of <code>getArea()</code>.</p>

</div>
</section>
<section id="six6">
<h1>Java Polymorphism</h1>
<div class="content">
  <p id="introduction">Polymorphism is an important concept of object-oriented programming. It simply means more than one form.</p>

<p>That is, the same entity (<a href="/java-programming/methods">method</a> or <a href="/java-programming/operators">operator</a> or <a href="/java-programming/class-objects#objects">object</a>) can perform different operations in different scenarios.</p>

<hr>
<h2 id="example">Example: Java Polymorphism</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Polygon</span> </span>{

<span class="hljs-comment">// method to render a shape</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Rendering Polygon..."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Polygon</span> </span>{

<span class="hljs-comment">// renders Square</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Rendering Square..."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Polygon</span> </span>{

<span class="hljs-comment">// renders circle</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Rendering Circle..."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Square</span>
Square s1 = <span class="hljs-keyword">new</span> Square();
s1.render();

<span class="hljs-comment">// create an object of Circle</span>
Circle c1 = <span class="hljs-keyword">new</span> Circle();
c1.render();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Rendering Square...
Rendering Circle...</samp></pre>

<p>In the above example, we have created a superclass: <var>Polygon</var> and two subclasses: <var>Square</var> and <var>Circle</var>. Notice the use of the <code>render()</code> method.</p>

<p>The main purpose of the <code>render()</code> method is to render the shape. However, the process of rendering a square is different than the process of rendering a circle.</p>

<p>Hence, the <code>render()</code> method behaves differently in different classes. Or, we can say <code>render()</code> is polymorphic.</p>

<hr>
<h3 id="why">Why Polymorphism?</h3>

<p>Polymorphism allows us to create consistent code. In the previous example, we can also create different methods: <code>renderSquare()</code> and <code>renderCircle()</code> to render <var>Square</var> and <var>Circle</var>, respectively.</p>

<p>This will work perfectly. However, for every shape, we need to create different methods. It will make our code inconsistent.</p>

<p>To solve this, polymorphism in Java allows us to create a single method <code>render()</code> that will behave differently for different shapes.</p>

<p class="note-tip"><strong>Note</strong>: The <code>print()</code> method is also an example of polymorphism. It is used to print values of different types like <code>char</code>, <code>int</code>, <code>string</code>, etc.</p>

<hr>
<p>We can achieve polymorphism in Java using the following ways:</p>

<ol>
<li><a href="/java-programming/method-overriding">Method Overriding</a></li>
<li><a href="/java-programming/method-overloading">Method Overloading</a></li>
<li>Operator Overloading</li>
</ol>

<hr>
<h2 id="overriding">1. Java Method Overriding</h2>

<p>During <a href="/java-programming/inheritance">inheritance in Java</a>, if the same method is present in both the superclass and the subclass. Then, the method in the subclass overrides the same method in the superclass. This is called method overriding.</p>

<p>In this case, the same method will perform one operation in the superclass and another operation in the subclass. For example,</p>

<h3>Example 1: Polymorphism using method overriding</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Language</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Common English Language"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Language</span> </span>{
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Java Programming Language"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Java class</span>
Java j1 = <span class="hljs-keyword">new</span> Java();
j1.displayInfo();

<span class="hljs-comment">// create an object of Language class</span>
Language l1 = <span class="hljs-keyword">new</span> Language();
l1.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Java Programming Language
Common English Language</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we have created a superclass named <var>Language</var> and a subclass named <var>Java</var>. Here, the method <code>displayInfo()</code> is present in both <var>Language</var> and <var>Java</var>.</p>

<p>The use of <code>displayInfo()</code> is to print the information. However, it is printing different information in <var>Language</var> and <var>Java</var>.</p>

<p>Based on the object used to call the method, the corresponding information is printed.</p>

<figure><img src="assets/images/java-polymorphism-implementation.png" title="Java Polymorphism Implementation" alt="displayInfo() method prints Common English Language when called using l1 object and when using j1 object, it prints Java Programming Language" width="520" height="257">
<figcaption>Working of Java Polymorphism</figcaption></figure>
<p class="note-tip"><strong>Note</strong>: The method that is called is determined during the execution of the program. Hence, method overriding is a <strong>run-time polymorphism</strong>.</p>

<hr>
<h2 id="method-overloading">2. Java Method Overloading</h2>

<p>In a Java class, we can create methods with the same name if they differ in parameters. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">float</span> b)</span> </span>{ ... }</code></pre>

<p>This is known as method overloading in Java. Here, the same method will perform different operations based on the parameter.</p>

<h3>Example 3: Polymorphism using method overloading</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pattern</span> </span>{

<span class="hljs-comment">// method without parameter</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
  System.out.print(<span class="hljs-string">"*"</span>);
}
}

<span class="hljs-comment">// method with single parameter</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">char</span> symbol)</span> </span>{
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
  System.out.print(symbol);
}
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Pattern d1 = <span class="hljs-keyword">new</span> Pattern();

<span class="hljs-comment">// call method without any argument</span>
d1.display();
System.out.println(<span class="hljs-string">"\n"</span>);

<span class="hljs-comment">// call method with a single argument</span>
d1.display(<span class="hljs-string">'#'</span>);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>**********

##########</samp></pre>

<p>In the above example, we have created a class named <var>Pattern</var>. The class contains a method named <code>display()</code> that is overloaded.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// method with no arguments</span>
display() {...}

<span class="hljs-comment">// method with a single char type argument</span>
display(<span class="hljs-keyword">char</span> symbol) {...}</code></pre>

<p>Here, the main function of <code>display()</code> is to print the pattern. However, based on the arguments passed, the method is performing different operations:</p>

<ul>
<li>prints a pattern of <code>*</code>, if no argument is passed or</li>
<li>prints pattern of the parameter, if a single <code>char</code> type argument is passed.</li>
</ul>

<p class="note-tip"><strong>Note</strong>: The method that is called is determined by the compiler. Hence, it is also known as compile-time polymorphism.</p>

<hr>
<h2 id="operator-overloading">3. Java Operator Overloading</h2>

<p>Some operators in Java behave differently with different operands. For example,</p>

<ul>
<li><code>+</code> operator is overloaded to perform numeric addition as well as <a href="/java-programming/string">string</a> concatenation, and</li>
<li>operators like <code>&amp;</code>, <code>|</code>, and <code>!</code> are overloaded for logical and bitwise operations.</li>
</ul>

<p>Let's see how we can achieve polymorphism using operator overloading.</p>

<p>The <code>+</code> operator is used to add two entities. However, in Java, the <code>+</code> operator performs two operations.</p>

<p>1. When <code>+</code> is used with numbers (integers and floating-point numbers), it performs mathematical addition. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> a = <span class="hljs-number">5</span>;
<span class="hljs-keyword">int</span> b = <span class="hljs-number">6</span>;

<span class="hljs-comment">// + with numbers</span>
<span class="hljs-keyword">int</span> sum = a + b;  <span class="hljs-comment">// Output = 11</span></code></pre>

<p>2. When we use the <code>+</code> operator with strings, it will perform string concatenation (join two strings). For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">String first = <span class="hljs-string">"Java "</span>;
String second = <span class="hljs-string">"Programming"</span>;

<span class="hljs-comment">// + with strings</span>
name = first + second;  <span class="hljs-comment">// Output = Java Programming</span></code></pre>

<p>Here, we can see that the <code>+</code> operator is overloaded in Java to perform two operations: <strong>addition</strong> and <strong>concatenation</strong>.</p>

<p class="note-tip"><strong>Note</strong>: In languages like C++, we can define operators to work differently for different operands. However, Java doesn't support user-defined operator overloading.</p>

<hr>
<h2 id="polymorphic-variable">Polymorphic Variables</h2>

<p>A <a href="/java-programming/variables-literals">variable</a> is called polymorphic if it refers to different values under different conditions.</p>

<p>Object variables (instance variables) represent the behavior of polymorphic variables in Java. It is because object variables of a class can refer to objects of its class as well as objects of its subclasses.</p>

<h3>Example: Polymorphic Variables</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgrammingLanguage</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am Programming Language."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ProgrammingLanguage</span> </span>{
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am Object-Oriented Programming Language."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// declare an object variable</span>
ProgrammingLanguage pl;

<span class="hljs-comment">// create object of ProgrammingLanguage</span>
pl = <span class="hljs-keyword">new</span> ProgrammingLanguage();
pl.display();

<span class="hljs-comment">// create object of Java class</span>
pl = <span class="hljs-keyword">new</span> Java();
pl.display();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>I am Programming Language.
I am Object-Oriented Programming Language.</samp></pre>

<p>In the above example, we have created an object variable <var>pl</var> of the <var>ProgrammingLanguage</var> class. Here, <var>pl</var> is a polymorphic variable. This is because,</p>

<ul>
<li>In statement <code>pl = new ProgrammingLanguage()</code>, <var>pl</var> refer to the object of the <var>ProgrammingLanguage</var> class.</li>
<li>And, in statement <code>pl = new Java()</code>, <var>pl</var> refer to the object of the <var>Java</var> class.</li>
</ul>

</div>
</section>
<section id="six7">
<h1>Java Encapsulation</h1>
<div class="content">
  <h2 id="introduction">Java Encapsulation</h2>

<p>Encapsulation is one of the key features of object-oriented programming. Encapsulation refers to the bundling of fields and <a href="/java-programming/methods">methods</a> inside a single class.</p>

<p>It prevents outer classes from accessing and changing fields and methods of a class. This also helps to achieve <strong>data hiding</strong>.</p>

<hr>
<h3 id="example">Example 1: Java Encapsulation</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Area</span> </span>{

<span class="hljs-comment">// fields to calculate area</span>
<span class="hljs-keyword">int</span> length;
<span class="hljs-keyword">int</span> breadth;

<span class="hljs-comment">// constructor to initialize values</span>
Area(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> breadth) {
<span class="hljs-keyword">this</span>.length = length;
<span class="hljs-keyword">this</span>.breadth = breadth;
}

<span class="hljs-comment">// method to calculate area</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">int</span> area = length * breadth;
System.out.println(<span class="hljs-string">"Area: "</span> + area);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create object of Area</span>
<span class="hljs-comment">// pass value of length and breadth</span>
Area rectangle = <span class="hljs-keyword">new</span> Area(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);
rectangle.getArea();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Area: 30</samp></pre>

<p>In the above example, we have created a class named <var>Area</var>. The main purpose of this class is to calculate the area.</p>

<p>To calculate an area, we need two <a href="/java-programming/variables-literals">variables</a>: <var>length</var> and <var>breadth</var> and a method: <code>getArea()</code>. Hence, we bundled these fields and methods inside a single class.</p>

<p>Here, the fields and methods can be accessed from other classes as well. Hence, this is not <strong>data hiding</strong>.</p>

<p>This is only <strong>encapsulation</strong>. We are just keeping similar codes together.</p>

<div class="note-tip">
<p><strong>Note</strong>: People often consider encapsulation as data hiding, but that's not entirely true.</p>

<p>Encapsulation refers to the bundling of related fields and methods together. This can be used to achieve data hiding. Encapsulation in itself is not data hiding.</p>

</div>
<hr>
<h2 id="why">Why Encapsulation?</h2>

<ul>
<li>In Java, encapsulation helps us to keep related fields and methods together, which makes our code cleaner and easy to read.</li>
<li>It helps to control the values of our data fields. For example,
<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{
<span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">0</span>) {
  <span class="hljs-keyword">this</span>.age = age;
}
}
}</code></pre>

<br>
<br>
Here, we are making the <var>age</var> variable <code>private</code> and applying logic inside the <code>setAge()</code> method. Now, <var>age</var> cannot be negative.</li>
<li>The getter and setter methods provide <strong>read-only</strong> or <strong>write-only</strong> access to our class fields. For example,
<pre style="max-height: 600px;"><code class="java hljs">getName()  <span class="hljs-comment">// provides read-only access</span>
setName() <span class="hljs-comment">// provides write-only access</span></code></pre>

</li>
<li>It helps to decouple components of a system. For example, we can encapsulate code into multiple bundles.<br>
<br>
These decoupled components (bundle) can be developed, tested, and debugged independently and concurrently. And, any changes in a particular component do not have any effect on other components.</li>
<li>We can also achieve data hiding using encapsulation. In the above example, if we change the length and breadth variable into private, then the access to these fields is restricted.<br>
<br>
And, they are kept hidden from outer classes. This is called <strong>data hiding</strong>.</li>
</ul>

<hr>
<h2 id="data-hiding">Data Hiding</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Data hiding is a way of restricting the access of our data members by hiding the implementation details. Encapsulation also provides a way for data hiding.</p>

<p>We can use <a href="/java-programming/access-modifiers">access modifiers</a> to achieve data hiding. For example,</p>

<h3>Example 2: Data hiding using the private specifier</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{

<span class="hljs-comment">// private field</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;

<span class="hljs-comment">// getter method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">return</span> age;
}

<span class="hljs-comment">// setter method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{
<span class="hljs-keyword">this</span>.age = age;
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of Person</span>
Person p1 = <span class="hljs-keyword">new</span> Person();

<span class="hljs-comment">// change age using setter</span>
p1.setAge(<span class="hljs-number">24</span>);

<span class="hljs-comment">// access age using getter</span>
System.out.println(<span class="hljs-string">"My age is "</span> + p1.getAge());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>My age is 24</samp></pre>

<p>In the above example, we have a <code>private</code> field <var>age</var>. Since it is <code>private</code>, it cannot be accessed from outside the class.</p>

<p>In order to access <var>age</var>, we have used <code>public</code> methods: <code>getAge()</code> and <code>setAge()</code>. These methods are called getter and setter methods.</p>

<p>Making <var>age</var> private allowed us to restrict unauthorized access from outside the class. This is <strong>data hiding</strong>.</p>

<p>If we try to access the <var>age</var> field from the <var>Main</var> class, we will get an error.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// error: age has private access in Person</span>
p1.age = <span class="hljs-number">24</span>;</code></pre>

</div>
</section>


<!-- seven menu sections -->
<section id="seven1">
<h1>Java Nested and Inner Class</h1>
<div class="content">
  <p id="introduction">In Java, you can define a class within another class. Such class is known as <code>nested class</code>. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>{
<span class="hljs-comment">// ...</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedClass</span> </span>{
    <span class="hljs-comment">// ...</span>
}
}</code></pre>

<p>There are two types of nested classes you can create in Java.</p>

<ul>
<li>Non-static nested class (inner class)</li>
<li>Static nested class</li>
</ul>

<p>Let's first look at non-static nested classes.</p>

<hr>
<h2 id="inner-class">Non-Static Nested Class (Inner Class)</h2>

<p>A non-static nested class is a class within another class. It has access to members of the enclosing class (outer class). It is commonly known as <code>inner class</code>.</p>

<p>Since the <code>inner class</code> exists within the outer class, you must instantiate the outer class first, in order to instantiate the inner class.</p>

<p>Here's an example of how you can declare inner classes in Java.</p>

<h3>Example 1: Inner class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span> </span>{
<span class="hljs-keyword">double</span> price;
<span class="hljs-comment">// nested class</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Processor</span></span>{

    <span class="hljs-comment">// members of nested class</span>
    <span class="hljs-keyword">double</span> cores;
    String manufacturer;

    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getCache</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-number">4.3</span>;
    }
}

<span class="hljs-comment">// nested protected class</span>
<span class="hljs-keyword">protected</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RAM</span></span>{

    <span class="hljs-comment">// members of protected nested class</span>
    <span class="hljs-keyword">double</span> memory;
    String manufacturer;

    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getClockSpeed</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-number">5.5</span>;
    }
}
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// create object of Outer class CPU</span>
    CPU cpu = <span class="hljs-keyword">new</span> CPU();

   <span class="hljs-comment">// create an object of inner class Processor using outer class</span>
    CPU.Processor processor = cpu.<span class="hljs-keyword">new</span> Processor();

    <span class="hljs-comment">// create an object of inner class RAM using outer class CPU</span>
    CPU.RAM ram = cpu.<span class="hljs-keyword">new</span> RAM();
    System.out.println(<span class="hljs-string">"Processor Cache = "</span> + processor.getCache());
    System.out.println(<span class="hljs-string">"Ram Clock speed = "</span> + ram.getClockSpeed());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Processor Cache = 4.3
Ram Clock speed = 5.5</samp></pre>

<p>In the above program, there are two nested classes: <var>Processor</var> and <var>RAM</var> inside the outer class: <var>CPU</var>. We can declare the inner class as protected. Hence, we have declared the RAM class as protected.</p>

<p>Inside the Main class,</p>

<ul>
<li>we first created an instance of an outer class <var>CPU</var> named <var>cpu</var>.</li>
<li>Using the instance of the outer class, we then created objects of inner classes:<br>
<pre style="max-height: 600px;"><code class="java hljs">CPU.Processor processor = cpu.<span class="hljs-keyword">new</span> Processor;

CPU.RAM ram = cpu.<span class="hljs-keyword">new</span> RAM();</code></pre>

</li>
</ul>

<p class="note-tip"><strong>Note</strong>: We use the dot (<code>.</code>) operator to create an instance of the inner class using the outer class.</p>

<hr>
<h3 id="accessing-members-outer-inner-class">Accessing Members of Outer Class within Inner Class</h3>

<p>We can access the members of the outer class by using this keyword. If you want to learn about this keyword, visit <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html">Java this keyword</a>. </p>

<h3>Example 2: Accessing Members</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>{
String carName;
String carType;

<span class="hljs-comment">// assign values using constructor</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String name, String type)</span> </span>{
    <span class="hljs-keyword">this</span>.carName = name;
    <span class="hljs-keyword">this</span>.carType = type;
}

<span class="hljs-comment">// private method</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCarName</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.carName;
}

<span class="hljs-comment">// inner class</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Engine</span> </span>{
    String engineType;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setEngine</span><span class="hljs-params">()</span> </span>{

       <span class="hljs-comment">// Accessing the carType property of Car</span>
        <span class="hljs-keyword">if</span>(Car.<span class="hljs-keyword">this</span>.carType.equals(<span class="hljs-string">"4WD"</span>)){

            <span class="hljs-comment">// Invoking method getCarName() of Car</span>
            <span class="hljs-keyword">if</span>(Car.<span class="hljs-keyword">this</span>.getCarName().equals(<span class="hljs-string">"Crysler"</span>)) {
                <span class="hljs-keyword">this</span>.engineType = <span class="hljs-string">"Smaller"</span>;
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">this</span>.engineType = <span class="hljs-string">"Bigger"</span>;
            }

        }<span class="hljs-keyword">else</span>{
            <span class="hljs-keyword">this</span>.engineType = <span class="hljs-string">"Bigger"</span>;
        }
    }
    <span class="hljs-function">String <span class="hljs-title">getEngineType</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.engineType;
    }
}
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create an object of the outer class Car</span>
    Car car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"Mazda"</span>, <span class="hljs-string">"8WD"</span>);

    <span class="hljs-comment">// create an object of inner class using the outer class</span>
    Car.Engine engine = car1.<span class="hljs-keyword">new</span> Engine();
    engine.setEngine();
    System.out.println(<span class="hljs-string">"Engine Type for 8WD= "</span> + engine.getEngineType());

    Car car2 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"Crysler"</span>, <span class="hljs-string">"4WD"</span>);
    Car.Engine c2engine = car2.<span class="hljs-keyword">new</span> Engine();
    c2engine.setEngine();
    System.out.println(<span class="hljs-string">"Engine Type for 4WD = "</span> + c2engine.getEngineType());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Engine Type for 8WD= Bigger
Engine Type for 4WD = Smaller</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above program, we have the inner class named <var>Engine</var> inside the outer class <var>Car</var>. Here, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span>(Car.<span class="hljs-keyword">this</span>.carType.equals(<span class="hljs-string">"4WD"</span>)) {...}</code></pre>

<p>We are using <code>this</code> keyword to access the <var>carType</var> variable of the outer class. You may have noticed that instead of using <code>this.carType</code> we have used <code>Car.this.carType</code>.</p>

<p>It is because if we had not mentioned the name of the outer class <var>Car</var>, then <code>this</code> keyword will represent the member inside the inner class.</p>

<p>Similarly, we are also accessing the method of the outer class from the inner class.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (Car.<span class="hljs-keyword">this</span>.getCarName().equals(<span class="hljs-string">"Crysler"</span>) {...}</code></pre>

<p>It is important to note that, although the <code>getCarName()</code> is a <code>private</code> method, we are able to access it from the inner class.</p>

<hr>
<h2 id="static-inner-class">Static Nested Class</h2>

<p>In Java, we can also define a <code>static</code> class inside another class. Such class is known as <code>static nested class</code>. Static nested classes are not called static inner classes.</p>

<p>Unlike inner class, a static nested class cannot access the member <a href="/java-programming/variables-literals">variables</a> of the outer class. It is because the <strong>static nested class</strong> doesn't require you to create an instance of the outer class.</p>

<pre style="max-height: 600px;"><code class="java hljs">OuterClass.NestedClass obj = <span class="hljs-keyword">new</span> OuterClass.NestedClass();</code></pre>

<p>Here, we are creating an object of the <strong>static nested class</strong> by simply using the class name of the outer class. Hence, the outer class cannot be referenced using <code>OuterClass.this</code>.</p>

<h3>Example 3: Static Inner Class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MotherBoard</span> </span>{

<span class="hljs-comment">// static nested class</span>
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USB</span></span>{
   <span class="hljs-keyword">int</span> usb2 = <span class="hljs-number">2</span>;
   <span class="hljs-keyword">int</span> usb3 = <span class="hljs-number">1</span>;
   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPorts</span><span class="hljs-params">()</span></span>{
       <span class="hljs-keyword">return</span> usb2 + usb3;
   }
}

}
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

   <span class="hljs-comment">// create an object of the static nested class</span>
   <span class="hljs-comment">// using the name of the outer class</span>
   MotherBoard.USB usb = <span class="hljs-keyword">new</span> MotherBoard.USB();
   System.out.println(<span class="hljs-string">"Total Ports = "</span> + usb.getTotalPorts());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong>:</p>

<pre><samp>Total Ports = 3</samp></pre>

<p>In the above program, we have created a static class named <var>USB</var> inside the class <var>MotherBoard</var>. Notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs">MotherBoard.USB usb = <span class="hljs-keyword">new</span> MotherBoard.USB();</code></pre>

<p>Here, we are creating an object of <var>USB</var> using the name of the outer class.</p>

<p>Now, let's see what would happen if you try to access the members of the outer class:</p>

<hr>
<h3>Example 4: Accessing members of Outer class inside Static Inner Class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MotherBoard</span> </span>{
String model;
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MotherBoard</span><span class="hljs-params">(String model)</span> </span>{
   <span class="hljs-keyword">this</span>.model = model;
}

<span class="hljs-comment">// static nested class</span>
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USB</span></span>{
   <span class="hljs-keyword">int</span> usb2 = <span class="hljs-number">2</span>;
   <span class="hljs-keyword">int</span> usb3 = <span class="hljs-number">1</span>;
   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPorts</span><span class="hljs-params">()</span></span>{
       <span class="hljs-comment">// accessing the variable model of the outer classs</span>
       <span class="hljs-keyword">if</span>(MotherBoard.<span class="hljs-keyword">this</span>.model.equals(<span class="hljs-string">"MSI"</span>)) {
           <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;
       }
       <span class="hljs-keyword">else</span> {
           <span class="hljs-keyword">return</span> usb2 + usb3;
       }
   }
}
}
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

   <span class="hljs-comment">// create an object of the static nested class</span>
   MotherBoard.USB usb = <span class="hljs-keyword">new</span> MotherBoard.USB();
   System.out.println(<span class="hljs-string">"Total Ports = "</span> + usb.getTotalPorts());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>When we try to run the program, we will get an error:</p>

<pre><samp>error: non-static variable this cannot be referenced from a static context</samp></pre>

<p>This is because we are not using the object of the outer class to create an object of the inner class. Hence, there is no reference to the outer class <code>Motherboard</code> stored in <code>Motherboard.this</code>.</p>

<hr>
<h3 id="key-points">Key Points to Remember</h3>

<ul>
<li>Java treats the inner class as a regular member of a class. They are just like <a href="/java-programming/methods">methods</a> and variables declared inside a class.</li>
<li>Since inner classes are members of the outer class, you can apply any access modifiers like <code>private</code>, <code>protected</code> to your inner class which is not possible in normal classes.</li>
<li>Since the nested class is a member of its enclosing outer class, you can use the dot (<code>.</code>) notation to access the nested class and its members.</li>
<li>Using the nested class will make your code more readable and provide better encapsulation.</li>
<li>Non-static nested classes (inner classes) have access to other members of the outer/enclosing class, even if they are declared private.</li>
</ul>

<hr>
<p><strong>Also Read</strong>:</p>

<ul>
<li><a href="/java-programming/access-modifiers">Java Access Modifiers</a></li>
<li><a href="/java-programming/static-keyword">Java Static Keyword</a></li>
<li><a href="/java-programming/static-class">Java Nested Static Class</a> </li>
<li><a href="/java-programming/anonymous-class">Java Anonymous Class</a></li>
</ul>

</div>
</section>
<section id="seven2">
<h1>Java Nested Static Class</h1>
<div class="content">
  <p id="introduction">As learned in previous tutorials, we can have a class inside another class in Java. Such classes are known as nested classes. In Java, nested classes are of two types:</p>

<ul>
<li>Nested non-static class (Inner class)</li>
<li>Nested static class.</li>
</ul>

<p>We have already discussed inner classes in the previous tutorial. Visit <a href="/java-programming/nested-inner-class">Java Nested Class</a> if you want to learn about inner classes.</p>

<p>In this tutorial, we will learn about nested static classes.</p>

<hr>
<h2 id="nested-static">Java Nested Static Class</h2>

<p>We use the keyword <code>static</code> to make our nested class static.</p>

<p class="note-tip"><strong>Note:</strong> In Java, only nested classes are allowed to be static.</p>

<p>Like regular classes, static nested classes can include both static and non-static fields and methods. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Class Animal {
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span> </span>{
  <span class="hljs-comment">// static and non-static members of Mammal</span>
}
<span class="hljs-comment">// members of Animal</span>
} </code></pre>

<p>Static nested classes are associated with the outer class.</p>

<p>To access the static nested class, we don't need objects of the outer class.</p>

<hr>
<h3>Example: Static Nested Class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// inner class</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reptile</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
    System.out.println(<span class="hljs-string">"I am a reptile."</span>);
  }
}

<span class="hljs-comment">// static class</span>
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
    System.out.println(<span class="hljs-string">"I am a mammal."</span>);
  }
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  <span class="hljs-comment">// object creation of the outer class</span>
  Animal animal = <span class="hljs-keyword">new</span> Animal();

  <span class="hljs-comment">// object creation of the non-static class</span>
  Animal.Reptile reptile = animal.<span class="hljs-keyword">new</span> Reptile();
  reptile.displayInfo();

  <span class="hljs-comment">// object creation of the static nested class</span>
  Animal.Mammal mammal = <span class="hljs-keyword">new</span> Animal.Mammal();
  mammal.displayInfo();

}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I am a reptile.
I am a mammal.</samp></pre>

<p>In the above program, we have two nested class <var>Mammal</var> and <var>Reptile</var> inside a class <var>Animal</var>.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>To create an object of the non-static class Reptile, we have used</p>

<pre style="max-height: 600px;"><code class="java hljs">Animal.Reptile reptile = animal.<span class="hljs-keyword">new</span> Reptile()</code></pre>

<p>To create an object of the static class <var>Mammal</var>, we have used</p>

<pre style="max-height: 600px;"><code class="java hljs">Animal.Mammal mammal = <span class="hljs-keyword">new</span> Animal.Mammal()</code></pre>

<hr>
<h2 id="access-outer-class">Accessing Members of Outer Class</h2>

<p>In Java, static nested classes are associated with the outer class. This is why static nested classes can only access the class members (static fields and methods) of the outer class.</p>

<p>Let's see what will happen if we try to access non-static fields and methods of the outer class.</p>

<h3>Example: Accessing Non-static members</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
 System.out.println(<span class="hljs-string">"I am a mammal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reptile</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
 System.out.println(<span class="hljs-string">"I am a reptile."</span>);
}
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I eat food."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Animal animal = <span class="hljs-keyword">new</span> Animal();
Animal.Reptile reptile = animal.<span class="hljs-keyword">new</span> Reptile();
reptile.displayInfo();

Animal.Mammal mammal = <span class="hljs-keyword">new</span> Animal.Mammal();
mammal.displayInfo();
mammal.eat();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Main.java:28: error: cannot find symbol
mammal.eat();
      ^
symbol:   method eat()
location: variable mammal of type Mammal
1 error
compiler exit status 1</samp></pre>

<p>In the above example, we have created a non-static method <code>eat()</code> inside the class <var>Animal</var>.</p>

<p>Now, if we try to access <code>eat()</code> using the object <var>mammal</var>, the compiler shows an error.</p>

<p>It is because <var>mammal</var> is an object of a static class and we cannot access non-static methods from static classes.</p>

<hr>
<h2 id="top-level">Static Top-level Class</h2>

<p>As mentioned above, only nested classes can be static. We cannot have static top-level classes.</p>

<p>Let's see what will happen if we try to make a top-level class static.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Animal.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Main.java:1: error: modifier static not allowed here
static class Animal {
   ^
1 error
compiler exit status 1</samp></pre>

<p>In the above example, we have tried to create a static class <var>Animal</var>. Since Java doesn't allow static top-level class, we will get an error.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/static-keyword">Java Static Keyword</a></li>
</ul>

</div>
</section>
<section id="seven3">
<h1>Java Anonymous Class</h1>
<div class="content">
  <p id="introduction">In Java, a class can contain another class known as nested class. It's possible to create a nested class without giving any name.</p>

<p>A nested class that doesn't have any name is known as an anonymous class.</p>

<p>An anonymous class must be defined inside another class. Hence, it is also known as an anonymous inner class. Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">outerClass</span> </span>{

<span class="hljs-comment">// defining anonymous class</span>
object1 = <span class="hljs-keyword">new</span> Type(parameterList) {
     <span class="hljs-comment">// body of the anonymous class</span>
};
}</code></pre>

<p>Anonymous classes usually extend subclasses or implement interfaces.</p>

<p>Here, <strong>Type</strong> can be</p>

<ol>
<li>a superclass that an anonymous class extends</li>
<li>an interface that an anonymous class implements</li>
</ol>

<p>The above code creates an object, <code>object1</code>, of an anonymous class at runtime.</p>

<p class="note-tip"><strong>Note:</strong> Anonymous classes are defined inside an expression. So, the semicolon is used at the end of anonymous classes to indicate the end of the expression.</p>

<hr>
<h3 id="example-1">Example 1: Anonymous Class Extending a Class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"Inside the Polygon class"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnonymousDemo</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createClass</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-comment">// creation of anonymous class extending class Polygon</span>
  Polygon p1 = <span class="hljs-keyword">new</span> Polygon() {
     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
        System.out.println(<span class="hljs-string">"Inside an anonymous class."</span>);
     }
  };
  p1.display();
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
   AnonymousDemo an = <span class="hljs-keyword">new</span> AnonymousDemo();
   an.createClass();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong></p>

<pre><samp>Inside an anonymous class.</samp></pre>

<p>In the above example, we have created a class <var>Polygon</var>. It has a single method <code>display()</code>.</p>

<p>We then created an anonymous class that extends the class <var>Polygon</var> and overrides the <code>display()</code> method.</p>

<p>When we run the program, an object <var>p1</var> of the anonymous class is created. The object then calls the <code>display()</code> method of the anonymous class.</p>

<hr>
<h3 id="example-2">Example 2: Anonymous Class Implementing an Interface</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Polygon</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnonymousDemo</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createClass</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-comment">// anonymous class implementing interface</span>
  Polygon p1 = <span class="hljs-keyword">new</span> Polygon() {
     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
        System.out.println(<span class="hljs-string">"Inside an anonymous class."</span>);
     }
  };
  p1.display();
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  AnonymousDemo an = <span class="hljs-keyword">new</span> AnonymousDemo();
  an.createClass();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Inside an anonymous class.</samp></pre>

<p>In the above example, we have created an anonymous class that implements the <code>Polygon</code> interface.</p>

<hr>
<h2 id="advantages">Advantages of Anonymous Classes</h2>

<p>In anonymous classes, objects are created whenever they are required. That is, objects are created to perform some specific tasks. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Object = <span class="hljs-keyword">new</span> Example() {
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
  System.out.println(<span class="hljs-string">"Anonymous class overrides the method display()."</span>);
}
};</code></pre>

<p>Here, an object of the anonymous class is created dynamically when we need to override the <code>display()</code> method.</p>

<p>Anonymous classes also help us to make our code concise.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/nested-inner-class">Java Nested and Inner Class</a></li>
<li><a href="/java-programming/static-class">Java Nested Static Class</a></li>
</ul>

</div>
</section>
<section id="seven4">
<h1>Java Singleton Class</h1>
<div class="content">
  <p id="introduction">In Java, Singleton is a design pattern that ensures that a <a href="/java-programming/class-objects">class</a> can only have one object.</p>

<p>To create a singleton class, a class must implement the following properties:</p>

<ul>
<li>Create a <code>private</code> constructor of the class to restrict object creation outside of the class.</li>
<li>Create a <code>private</code> attribute of the class type that refers to the single object.</li>
<li>Create a <code>public static</code> method that allows us to create and access the object we created. Inside the method, we will create a condition that restricts us from creating more than one object.</li>
</ul>

<hr>
<h3 id="example">Example: Java Singleton Class Syntax</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonExample</span> </span>{

<span class="hljs-comment">// private field that refers to the object</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonExample singleObject;
                                          
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonExample</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-comment">// constructor of the SingletonExample class</span>
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonExample <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-comment">// write code that allows us to create only one object</span>
  <span class="hljs-comment">// access the object as per our need</span>
}
}</code></pre>

<p>In the above example,</p>

<ul>
<li><code>private static SingletonExample singleObject</code> - a reference to the object of the class.</li>
<li><code>private SingletonExample()</code> - a private <a href="/java-programming/constructors">constructor</a> that restricts creating objects outside of the class.</li>
<li><code>public static SingletonExample getInstance()</code> - this method returns the reference to the only object of the class. Since the method <var>static</var>, it can be accessed using the class name.</li>
</ul>

<hr>
<h2 id="use">Use of Singleton in Java</h2>

<p>Singletons can be used while working with databases. They can be used to create a connection pool to access the database while reusing the same connection for all the clients. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Database</span> </span>{
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Database dbObject;

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Database</span><span class="hljs-params">()</span> </span>{      
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Database <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-comment">// create object if it's not already created</span>
  <span class="hljs-keyword">if</span>(dbObject == <span class="hljs-keyword">null</span>) {
     dbObject = <span class="hljs-keyword">new</span> Database();
  }

   <span class="hljs-comment">// returns the singleton object</span>
   <span class="hljs-keyword">return</span> dbObject;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>{
   System.out.println(<span class="hljs-string">"You are now connected to the database."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Database db1;

  <span class="hljs-comment">// refers to the only object of Database</span>
  db1= Database.getInstance();
  
  db1.getConnection();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>When we run the program, the output will be:</p>

<pre><samp>You are now connected to the database.</samp></pre>

<p>In our above example,</p>

<ul>
<li>We have created a singleton class <var>Database</var>.</li>
<li>The <var>dbObject</var> is a class type field. This will refer to the object of the class <var>Database</var>.</li>
<li>The private constructor <code>Database()</code> prevents object creation outside of the class.</li>
<li>The static class type method <code>getInstance()</code> returns the instance of the class to the outside world.</li>
<li>In the <var>Main</var> class, we have class type variable <var>db1</var>. We are calling <code>getInstance()</code> using <var>db1</var> to get the only object of the <var>Database</var>.</li>
<li>The method <code>getConnection()</code> can only be accessed using the object of the <var>Database</var>.</li>
<li>Since the <var>Database</var> can have only one object, all the clients can access the database through a single connection.</li>
</ul>

<p class="note-tip">Singleton is a design pattern rather than a feature specific to Java. A design pattern is like our code library that includes various coding techniques shared by programmers around the world.</p>

<hr>
<p>It's important to note that, there are only a few scenarios (like logging) where singletons make sense. We recommend you avoid using singletons completely if you are not sure whether to use them or not. Learn more: <a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">What is so bad about Singleton?</a></p>

</div>
</section>
<section id="seven5">
<h1>Java enums</h1>
<div class="content">
  <p id="introduction">In Java, an enum (short for enumeration) is a type that has a fixed set of constant values. We use the <code>enum</code> keyword to declare enums. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size { 
SMALL, MEDIUM, LARGE, EXTRALARGE 
}</code></pre>

<p>Here, we have created an enum named <var>Size</var>. It contains fixed values <var>SMALL</var>, <var>MEDIUM</var>, <var>LARGE</var>, and <var>EXTRALARGE</var>.</p>

<p>These values inside the braces are called enum constants (values).</p>

<p class="note-tip"><strong>Note:</strong> The enum constants are usually represented in uppercase.</p>

<hr>
<h3 id="example">Example 1: Java Enum</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
SMALL, MEDIUM, LARGE, EXTRALARGE
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  System.out.println(Size.SMALL);
  System.out.println(Size.MEDIUM);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>SMALL
MEDIUM</samp></pre>

<p>As we can see from the above example, we use the enum name to access the constant values.</p>

<p>Also, we can create <a href="/java-programming/variables-literals">variables</a> of enum types. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Size pizzaSize;</code></pre>

<p>Here, <var>pizzaSize</var> is a variable of the <var>Size</var> type. It can only be assigned with 4 values.</p>

<pre style="max-height: 600px;"><code class="java hljs">pizzaSize = Size.SMALL;
pizzaSize = Size.MEDIUM;
pizzaSize = Size.LARGE;
pizzaSize = Size.EXTRALARGE;</code></pre>

<hr>
<h3 id="example-with-switch">Example 2: Java Enum with the switch statement</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
SMALL, MEDIUM, LARGE, EXTRALARGE
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{
Size pizzaSize;
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">(Size pizzaSize)</span> </span>{
<span class="hljs-keyword">this</span>.pizzaSize = pizzaSize;
}
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">orderPizza</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">switch</span>(pizzaSize) {
 <span class="hljs-keyword">case</span> SMALL:
   System.out.println(<span class="hljs-string">"I ordered a small size pizza."</span>);
   <span class="hljs-keyword">break</span>;
 <span class="hljs-keyword">case</span> MEDIUM:
   System.out.println(<span class="hljs-string">"I ordered a medium size pizza."</span>);
   <span class="hljs-keyword">break</span>;
 <span class="hljs-keyword">default</span>:
   System.out.println(<span class="hljs-string">"I don't know which one to order."</span>);
   <span class="hljs-keyword">break</span>;
}
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Test t1 = <span class="hljs-keyword">new</span> Test(Size.MEDIUM);
t1.orderPizza();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I ordered a medium size pizza.</samp></pre>

<p>In the above program, we have created an enum type <var>Size</var>. We then declared a variable <var>pizzaSize</var> of the <var>Size</var> type.</p>

<p>Here, the variable <var>pizzaSize</var> can only be assigned with 4 values (<var>SMALL</var>, <var>MEDIUM</var>, <var>LARGE</var>, <var>EXTRALARGE</var>).</p>

<p>Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">Test t1 = <span class="hljs-keyword">new</span> Test(Size.MEDIUM);</code></pre>

<p>It will call the <code>Test()</code> constructor inside the <var>Test</var> class. Now, the variable <var>pizzaSize</var> is assigned with the <var>MEDIUM</var> constant.</p>

<p>Based on the value, one of the cases of the <a href="/java-programming/switch-statement">switch case statement</a> is executed.</p>

<hr>
<h2 id="enum-class">Enum Class in Java</h2>

<p>In Java, enum types are considered to be a special type of class. It was introduced with the release of Java 5.</p>

<p>An enum class can include methods and fields just like regular classes.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
constant1, constant2, …, constantN;

<span class="hljs-comment">// methods and fields	</span>
}</code></pre>

<p>When we create an enum class, the compiler will create instances (objects) of each enum constants. Also, all enum constant is always <code>public static final</code> by default.</p>

<hr>
<h3 id="enum-class-example">Example 3: Java Enum Class</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size{
SMALL, MEDIUM, LARGE, EXTRALARGE;

<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>{

<span class="hljs-comment">// this will refer to the object SMALL</span>
<span class="hljs-keyword">switch</span>(<span class="hljs-keyword">this</span>) {
  <span class="hljs-keyword">case</span> SMALL:
    <span class="hljs-keyword">return</span> <span class="hljs-string">"small"</span>;

  <span class="hljs-keyword">case</span> MEDIUM:
    <span class="hljs-keyword">return</span> <span class="hljs-string">"medium"</span>;

  <span class="hljs-keyword">case</span> LARGE:
    <span class="hljs-keyword">return</span> <span class="hljs-string">"large"</span>;

  <span class="hljs-keyword">case</span> EXTRALARGE:
    <span class="hljs-keyword">return</span> <span class="hljs-string">"extra large"</span>;

  <span class="hljs-keyword">default</span>:
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
  }
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// call getSize()</span>
<span class="hljs-comment">// using the object SMALL</span>
System.out.println(<span class="hljs-string">"The size of the pizza is "</span> + Size.SMALL.getSize());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong></p>

<pre><samp>The size of the pizza is small</samp></pre>

<p>In the above example, we have created an enum class <var>Size</var>. It has four constants <var>SMALL</var>, <var>MEDIUM</var>, <var>LARGE</var> and <var>EXTRALARGE</var>.</p>

<p>Since <var>Size</var> is an enum class, the compiler automatically creates instances for each enum constants.</p>

<p>Here inside the <code>main()</code> method, we have used the instance <var>SMALL</var> to call the <code>getSize()</code> method.</p>

<p class="note-tip"><strong>Note</strong>: Like regular classes, an enum class also may include constructors. To learn more about it, visit <a href="/java-programming/enum-constructor">Java enum constructor</a>.</p>

<hr>
<h2 id="enum-methods">Methods of Java Enum Class</h2>

<p>There are some predefined methods in enum classes that are readily available for use.</p>

<h3>1. Java Enum ordinal()</h3>

<p>The <code>ordinal()</code> method returns the position of an enum constant. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">ordinal(SMALL) 
<span class="hljs-comment">// returns 0</span></code></pre>

<h3>2. Enum compareTo()</h3>

<p>The <code>compareTo()</code> method compares the enum constants based on their ordinal value. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Size.SMALL.compareTo(Size.MEDIUM)
<span class="hljs-comment">// returns ordinal(SMALL) - ordinal(MEDIUM)</span></code></pre>

<h3>3. Enum toString()</h3>

<p>The <code>toString()</code> method returns the <a href="/java-programming/string">string</a> representation of the enum constants. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">SMALL.toString()
<span class="hljs-comment">// returns "SMALL"</span></code></pre>

<h3>4. Enum name()</h3>

<p>The <code>name()</code> method returns the defined name of an enum constant in string form. The returned value from the <code>name()</code> method is <code>final</code>. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">name(SMALL)
<span class="hljs-comment">// returns "SMALL"</span></code></pre>

<h3>5. Java Enum valueOf()</h3>

<p>The <code>valueOf()</code> method takes a string and returns an enum constant having the same string name. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Size.valueOf(<span class="hljs-string">"SMALL"</span>)
<span class="hljs-comment">// returns constant SMALL.</span></code></pre>

<h3>6. Enum values()</h3>

<p>The <code>values()</code> method returns an array of enum type containing all the enum constants. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Size[] enumArray = Size.value();</code></pre>

<hr>
<h2 id="why">Why Java Enums?</h2>

<p>In Java, enum was introduced to <strong>replace the use of int constants</strong>.</p>

<p>Suppose we have used a collection of <code>int</code> constants.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Size</span> </span>{
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SMALL = <span class="hljs-number">1</span>;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MEDIUM = <span class="hljs-number">2</span>;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> LARGE = <span class="hljs-number">3</span>;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> EXTRALARGE = <span class="hljs-number">4</span>;
}</code></pre>

<p>Here, the problem arises if we print the constants. It is because only the number is printed which might not be helpful.</p>

<p>So, instead of using int constants, we can simply use enums. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
SMALL, MEDIUM, LARGE, EXTRALARGE
}</code></pre>

<p>This makes our code more intuitive.</p>

<p>Also, enum provides <strong>compile-time type safety</strong>.</p>

<p>If we declare a variable of the <var>Size</var> type. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">Size size;</code></pre>

<p>Here, it is guaranteed that the variable will hold one of the four values. Now, If we try to pass values other than those four values, the compiler will generate an error.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/enum-string">Java enum Strings</a></li>
<li><a href="/java-programming/enum-inheritance">Java enum Inheritance and Interface</a></li>
<li><a href="/java-programming/examples/create-enum-class">Java Program to Create an enum class</a></li>
</ul>

</div>
</section>
<section id="seven6">
<h1>Java enum Constructor</h1>
<div class="content">
  <p id="introduction">Before you learn about enum constructors, make sure to know about <a href="/java-programming/enums">Java enums</a>.</p>

<p>In Java, an enum class may include a <a href="/java-programming/constructors">constructor</a> like a regular class. These enum constructors are either</p>

<ul>
<li><strong>private</strong> - accessible within the class<br>
or</li>
<li><strong>package-private</strong> - accessible within the package</li>
</ul>

<hr>
<h2 id="example-1">Example: enum Constructor</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {

<span class="hljs-comment">// enum constants calling the enum constructors </span>
SMALL(<span class="hljs-string">"The size is small."</span>),
MEDIUM(<span class="hljs-string">"The size is medium."</span>),
LARGE(<span class="hljs-string">"The size is large."</span>),
EXTRALARGE(<span class="hljs-string">"The size is extra large."</span>);

<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String pizzaSize;

<span class="hljs-comment">// private enum constructor</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Size</span><span class="hljs-params">(String pizzaSize)</span> </span>{
  <span class="hljs-keyword">this</span>.pizzaSize = pizzaSize;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> pizzaSize;
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Size size = Size.SMALL;
  System.out.println(size.getSize());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>The size is small.</samp></pre>

<p>In the above example, we have created an enum <var>Size</var>. It includes a <code>private</code> enum constructor. The constructor takes a <a href="/java-programming/string">string value</a> as a parameter and assigns value to the variable <var>pizzaSize</var>.</p>

<p>Since the constructor is <code>private</code>, we cannot access it from outside the class. However, we can use enum constants to call the constructor.</p>

<p>In the <var>Main</var> class, we assigned SMALL to an enum variable <var>size</var>. The constant <var>SMALL</var> then calls the constructor <var>Size</var> with string as an argument.</p>

<p>Finally, we called <code>getSize()</code> using <var>size</var>.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/enumset">Java EnumSet</a> </li>
<li><a href="/java-programming/enum-inheritance">Java enum Inheritance and Interface</a></li>
</ul>

</div>
</section>
<section id="seven7">
<h1>Java enum Strings</h1>
<div class="content">
  <h2 id="enum-strings">Java enum Strings</h2>

<p>Before you learn about enum strings, make sure to know about <a href="/java-programming/enums">Java enum</a>.</p>

<p>In Java, we can get the <a href="/java-programming/string">string</a> representation of enum constants using the <code>toString()</code> method or the <code>name()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
SMALL, MEDIUM, LARGE, EXTRALARGE
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

  System.out.println(<span class="hljs-string">"string value of SMALL is "</span> + Size.SMALL.toString());
  System.out.println(<span class="hljs-string">"string value of MEDIUM is "</span> + Size.MEDIUM.name());

}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong> </p>

<pre><samp>string value of SMALL is SMALL
string value of MEDIUM is MEDIUM</samp></pre>

<p>In the above example, we have seen the default string representation of an enum constant is the name of the same constant.</p>

<hr>
<h2 id="change-default-string">Change Default String Value of enums</h2>

<p>We can change the default string representation of enum constants by overriding the <code>toString()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">enum</span> Size {
SMALL {

  <span class="hljs-comment">// overriding toString() for SMALL</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">"The size is small."</span>;
  }
},

MEDIUM {

 <span class="hljs-comment">// overriding toString() for MEDIUM</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">"The size is medium."</span>;
  }
};
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  System.out.println(Size.MEDIUM.toString());
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong> </p>

<pre><samp>The size is medium.</samp></pre>

<p>In the above program, we have created an enum <var>Size</var>. And we have overridden the <code>toString()</code> method for enum constants <code>SMALL</code> and <code>MEDIUM</code>.</p>

<p class="note-tip"><strong>Note:</strong> We cannot override the <code>name()</code> method. It is because the <code>name()</code> method is <code>final</code>.</p>

<p>To learn more, visit <a href="https://stackoverflow.com/questions/3978654/best-way-to-create-enum-of-strings">best ways to create enum String</a>.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/examples/create-enum-class">Java Program to Create an enum class</a> </li>
<li><a href="/java-programming/examples/enum-by-string-value">Java Program to Lookup enum by String value</a></li>
</ul>

</div>
</section>
<section id="seven8">
<h1>Java Reflection</h1>
<div class="content">
  <p id="introduction">In Java, reflection allows us to inspect and manipulate <a href="/java-programming/class-objects">classes</a>, <a href="/java-programming/interfaces">interfaces</a>, <a href="/java-programming/constructors">constructors</a>, <a href="/java-programming/methods">methods</a>, and fields at run time.</p>

<p>There is a class in Java named <code>Class</code> that keeps all the information about objects and classes at runtime. The object of <var>Class</var> can be used to perform reflection.</p>

<hr>
<h2 id="class">Reflection of Java Classes</h2>

<p>In order to reflect a Java class, we first need to create an object of <var>Class</var>.</p>

<p>And, using the object we can call various methods to get information about methods, fields, and constructors present in a class.</p>

<p>There exists three ways to create objects of Class:</p>

<p><strong>1. Using forName() method</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{...}

<span class="hljs-comment">// create object of Class</span>
<span class="hljs-comment">// to reflect the Dog class</span>
Class a = Class.forName(<span class="hljs-string">"Dog"</span>);</code></pre>

<p>Here, the <code>forName()</code> method takes the name of the class to be reflected as its argument.</p>

<p><strong>2. Using getClass() method</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an object of Dog class</span>
Dog d1 = <span class="hljs-keyword">new</span> Dog();

<span class="hljs-comment">// create an object of Class</span>
<span class="hljs-comment">// to reflect Dog</span>
Class b = d1.getClass();</code></pre>

<p>Here, we are using the object of the <var>Dog</var> class to create an object of <var>Class</var>.</p>

<p><strong>3. Using .class extension</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// create an object of Class</span>
<span class="hljs-comment">// to reflect the Dog class</span>
Class c = Dog<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;</code></pre>

<p>Now that we know how we can create objects of the <code>Class</code>. We can use this object to get information about the corresponding class at runtime.</p>

<hr>
<h2 id="example">Example: Java Class Reflection</h2>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.lang.Class;
<span class="hljs-keyword">import</span> java.lang.reflect.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
}

<span class="hljs-comment">// put this class in different Dog.java file</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am a dog."</span>);
}
}

<span class="hljs-comment">// put this in Main.java file</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// create an object of Dog</span>
  Dog d1 = <span class="hljs-keyword">new</span> Dog();

  <span class="hljs-comment">// create an object of Class</span>
  <span class="hljs-comment">// using getClass()</span>
  Class obj = d1.getClass();

  <span class="hljs-comment">// get name of the class</span>
  String name = obj.getName();
  System.out.println(<span class="hljs-string">"Name: "</span> + name);

  <span class="hljs-comment">// get the access modifier of the class</span>
  <span class="hljs-keyword">int</span> modifier = obj.getModifiers();

  <span class="hljs-comment">// convert the access modifier to string</span>
  String mod = Modifier.toString(modifier);
  System.out.println(<span class="hljs-string">"Modifier: "</span> + mod);

  <span class="hljs-comment">// get the superclass of Dog</span>
  Class superClass = obj.getSuperclass();
  System.out.println(<span class="hljs-string">"Superclass: "</span> + superClass.getName());
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.printStackTrace();
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Name: Dog
Modifier: public
Superclass: Animal</samp></pre>

<p>In the above example, we have created a superclass: <var>Animal</var> and a subclass: <var>Dog</var>. Here, we are trying to inspect the class <var>Dog</var>.</p>

<p>Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">Class obj = d1.getClass();</code></pre>

<p>Here, we are creating an object <var>obj</var> of <var>Class</var> using the <code>getClass()</code> method. Using the object, we are calling different methods of <var>Class</var>.</p>

<ul>
<li><strong>obj.getName()</strong> - returns the name of the class</li>
<li><strong>obj.getModifiers()</strong> - returns the access modifier of the class</li>
<li><strong>obj.getSuperclass()</strong> - returns the super class of the class</li>
</ul>

<p>To learn more about <code>Class</code>, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html">Java Class (official Java documentation)</a>.</p>

<p class="note-tip"><strong>Note</strong>: We are using the <code>Modifier</code> class to convert the integer access modifier to a <a href="/java-programming/string">string</a>.</p>

<hr>
<h2>Reflecting Fields, Methods, and Constructors</h2>

<p>The package <code>java.lang.reflect</code> provides classes that can be used for manipulating class members. For example,</p>

<ul>
<li><strong>Method class</strong> - provides information about methods in a class</li>
<li><strong>Field class</strong> - provides information about fields in a class</li>
<li><strong>Constructor class</strong> - provides information about constructors in a class</li>
</ul>

<hr>
<h2 id="methods">1. Reflection of Java Methods</h2>

<p>The <code>Method</code> class provides various methods that can be used to get information about the methods present in a class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.lang.Class;
<span class="hljs-keyword">import</span> java.lang.reflect.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{

<span class="hljs-comment">// methods of the class</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am a dog."</span>);
}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSound</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Bark Bark"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {

  <span class="hljs-comment">// create an object of Dog</span>
  Dog d1 = <span class="hljs-keyword">new</span> Dog();

  <span class="hljs-comment">// create an object of Class</span>
  <span class="hljs-comment">// using getClass()</span>
  Class obj = d1.getClass();

  <span class="hljs-comment">// using object of Class to</span>
  <span class="hljs-comment">// get all the declared methods of Dog</span>
  Method[] methods = obj.getDeclaredMethods();

  <span class="hljs-comment">// create an object of the Method class</span>
  <span class="hljs-keyword">for</span> (Method m : methods) {

    <span class="hljs-comment">// get names of methods</span>
    System.out.println(<span class="hljs-string">"Method Name: "</span> + m.getName());

    <span class="hljs-comment">// get the access modifier of methods</span>
    <span class="hljs-keyword">int</span> modifier = m.getModifiers();
    System.out.println(<span class="hljs-string">"Modifier: "</span> + Modifier.toString(modifier));

    <span class="hljs-comment">// get the return types of method</span>
    System.out.println(<span class="hljs-string">"Return Types: "</span> + m.getReturnType());
    System.out.println(<span class="hljs-string">" "</span>);
  }
}
<span class="hljs-keyword">catch</span> (Exception e) {
  e.printStackTrace();
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Method Name: display
Modifier: public
Return Types: void

Method Name: makeSound
Modifier: private
Return Types: void</samp></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, we are trying to get information about the methods present in the <var>Dog</var> class. As mentioned earlier, we have first created an object <var>obj</var> of <code>Class</code> using the <code>getClass()</code> method.</p>

<p>Notice the expression,</p>

<pre style="max-height: 600px;"><code class="java hljs">Method[] methods = obj.getDeclaredMethod();</code></pre>

<p>Here, the <code>getDeclaredMethod()</code> returns all the methods present inside the class.</p>

<p>Also, we have created an object <var>m</var> of the <code>Method</code> class. Here,</p>

<ul>
<li><strong>m.getName()</strong> - returns the name of a method</li>
<li><strong>m.getModifiers()</strong> - returns the access modifier of methods in integer form</li>
<li><strong>m.getReturnType()</strong> - returns the return type of methods</li>
</ul>

<p>The <code>Method</code> class also provides various other methods that can be used to inspect methods at run time. To learn more, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html">the Java Method class (official Java documentation)</a>.</p>

<hr>
<h2 id="fields">2. Reflection of Java Fields</h2>

<p>Like methods, we can also inspect and modify different fields of a class using the methods of the <code>Field</code> class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.lang.Class;
<span class="hljs-keyword">import</span> java.lang.reflect.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{
<span class="hljs-keyword">public</span> String type;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// create an object of Dog</span>
  Dog d1 = <span class="hljs-keyword">new</span> Dog();

  <span class="hljs-comment">// create an object of Class</span>
  <span class="hljs-comment">// using getClass()</span>
  Class obj = d1.getClass();

  <span class="hljs-comment">// access and set the type field</span>
  Field field1 = obj.getField(<span class="hljs-string">"type"</span>);
  field1.set(d1, <span class="hljs-string">"labrador"</span>);

  <span class="hljs-comment">// get the value of the field type</span>
  String typeValue = (String) field1.get(d1);
  System.out.println(<span class="hljs-string">"Value: "</span> + typeValue);

  <span class="hljs-comment">// get the access modifier of the field type</span>
  <span class="hljs-keyword">int</span> mod = field1.getModifiers();

  <span class="hljs-comment">// convert the modifier to String form</span>
  String modifier1 = Modifier.toString(mod);
  System.out.println(<span class="hljs-string">"Modifier: "</span> + modifier1);
  System.out.println(<span class="hljs-string">" "</span>);
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.printStackTrace();
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Value: labrador
Modifier: public</samp></pre>

<p>In the above example, we have created a class named <var>Dog</var>. It includes a public field named <var>type</var>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">Field field1 = obj.getField(<span class="hljs-string">"type"</span>);</code></pre>

<p>Here, we are accessing the public field of the <var>Dog</var> class and assigning it to the object <var>field1</var> of the <var>Field</var> class.</p>

<p>We then used various methods of the <code>Field</code> class:</p>

<ul>
<li><strong>field1.set()</strong> - sets the value of the field</li>
<li><strong>field1.get()</strong> - returns the value of field</li>
<li><strong>field1.getModifiers()</strong> - returns the value of the field in integer form</li>
</ul>

<p>Similarly, we can also access and modify private fields as well. However, the reflection of private field is little bit different than the public field. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.lang.Class;
<span class="hljs-keyword">import</span> java.lang.reflect.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{
<span class="hljs-keyword">private</span> String color;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// create an object of Dog</span>
  Dog d1 = <span class="hljs-keyword">new</span> Dog();

  <span class="hljs-comment">// create an object of Class</span>
  <span class="hljs-comment">// using getClass()</span>
  Class obj = d1.getClass();

  <span class="hljs-comment">// access the private field color</span>
  Field field1 = obj.getDeclaredField(<span class="hljs-string">"color"</span>);

  <span class="hljs-comment">// allow modification of the private field</span>
  field1.setAccessible(<span class="hljs-keyword">true</span>);

  <span class="hljs-comment">// set the value of color</span>
  field1.set(d1, <span class="hljs-string">"brown"</span>);

  <span class="hljs-comment">// get the value of field color</span>
  String colorValue = (String) field1.get(d1);
  System.out.println(<span class="hljs-string">"Value: "</span> + colorValue);

  <span class="hljs-comment">// get the access modifier of color</span>
  <span class="hljs-keyword">int</span> mod2 = field1.getModifiers();

  <span class="hljs-comment">// convert the access modifier to string</span>
  String modifier2 = Modifier.toString(mod2);
  System.out.println(<span class="hljs-string">"Modifier: "</span> + modifier2);
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.printStackTrace();
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Value: brown
Modifier: private</samp></pre>

<p>In the above example, we have created a class named <var>Dog</var>. The class contains a private field named <var>color</var>. Notice the statement.</p>

<pre style="max-height: 600px;"><code class="java hljs">Field field1 = obj.getDeclaredField(<span class="hljs-string">"color"</span>);

field1.setAccessible(<span class="hljs-keyword">true</span>);</code></pre>

<p>Here, we are accessing <var>color</var> and assigning it to the object <var>field1</var> of the <code>Field</code> class. We then used <var>field1</var> to modify the accessibility of <var>color</var> and allows us to make changes to it.</p>

<p>We then used field1 to perform various operations on the private field color.</p>

<p>To learn more about the different methods of <var>Field</var>, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html">Java Field Class (official Java documentation)</a>.</p>

<hr>
<h2 id="constructor">3. Reflection of Java Constructor</h2>

<p>We can also inspect different constructors of a class using various methods provided by the <code>Constructor</code> class. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.lang.Class;
<span class="hljs-keyword">import</span> java.lang.reflect.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{

<span class="hljs-comment">// public constructor without parameter</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span> </span>{

}

<span class="hljs-comment">// private constructor with a single parameter</span>
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Dog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{

}

}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// create an object of Dog</span>
  Dog d1 = <span class="hljs-keyword">new</span> Dog();

  <span class="hljs-comment">// create an object of Class</span>
  <span class="hljs-comment">// using getClass()</span>
  Class obj = d1.getClass();

  <span class="hljs-comment">// get all constructors of Dog</span>
  Constructor[] constructors = obj.getDeclaredConstructors();

  <span class="hljs-keyword">for</span> (Constructor c : constructors) {

    <span class="hljs-comment">// get the name of constructors</span>
    System.out.println(<span class="hljs-string">"Constructor Name: "</span> + c.getName());

    <span class="hljs-comment">// get the access modifier of constructors</span>
    <span class="hljs-comment">// convert it into string form</span>
    <span class="hljs-keyword">int</span> modifier = c.getModifiers();
    String mod = Modifier.toString(modifier);
    System.out.println(<span class="hljs-string">"Modifier: "</span> + mod);

    <span class="hljs-comment">// get the number of parameters in constructors</span>
    System.out.println(<span class="hljs-string">"Parameters: "</span> + c.getParameterCount());
    System.out.println(<span class="hljs-string">""</span>);
  }
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.printStackTrace();
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Constructor Name: Dog
Modifier: public     
Parameters: 0        

Constructor Name: Dog
Modifier: private    
Parameters: 1</samp></pre>

<p>In the above example, we have created a class named <var>Dog</var>. The class includes two constructors.</p>

<p>We are using reflection to find the information about the constructors of the class. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">Constructor[] constructors = obj.getDeclaredConstructor();</code></pre>

<p>Here, the we are accessing all the constructors present in <var>Dog</var> and assigning them to an array <var>constructors</var> of the <code>Constructor</code> type.</p>

<p>We then used object <var>c</var> to get different informations about the constructor.</p>

<ul>
<li><strong>c.getName()</strong> - returns the name of the constructor</li>
<li><strong>c.getModifiers()</strong> - returns the access modifiers of the constructor in integer form</li>
<li><strong>c.getParameterCount()</strong> - returns the number of parameters present in each constructor</li>
</ul>

<p>To learn about more methods of the <code>Constructor</code> class, visit <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html">Constructor class</a></p>

</div>
</section>
<section id="seven9">
<h1>Java Package</h1>
<div class="content">
  <h2 id="package">Java Package</h2>

<p>A package is simply a container that groups related types (Java classes, interfaces, enumerations, and annotations). For example, in core Java, the <code>ResultSet</code> interface belongs to the <code>java.sql</code> package. The package contains all the related types that are needed for the SQL query and database connection.</p>

<p>If you want to use the <code>ResultSet</code> interface in your code, just import the <strong>java.sql</strong> package (Importing packages will be discussed later in the article).</p>

<hr>
<p>As mentioned earlier, packages are just containers for Java classes, interfaces and so on. These packages help you to reserve the class namespace and create a maintainable code.</p>

<p>For example, you can find two <code>Date</code> classes in Java. However, the rule of thumb in Java programming is that only one unique class name is allowed in a Java project.</p>

<p><strong>How did they manage to include two classes with the same name Date in JDK?</strong></p>

<p>This was possible because these two <code>Date</code> classes belong to two different packages:</p>

<ul>
<li><code>java.util.Date</code> - this is a normal Date class that can be used anywhere.</li>
<li><code>java.sql.Date</code> - this is a SQL Date used for the SQL query and such.</li>
</ul>

<hr>
<p>Based on whether the package is defined by the user or not, packages are divided into two categories:</p>

<h2 id="built-in">Built-in Package</h2>

<p>Built-in packages are existing java packages that come along with the <a href="https://www.programiz.com/java-programming/jvm-jre-jdk#jdk">JDK</a>. For example, <code>java.lang</code>, <code>java.util</code>, <code>java.io</code>, etc. For example:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.ArrayList;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListUtilization</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    ArrayList&lt;Integer&gt; myList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">3</span>);
    myList.add(<span class="hljs-number">3</span>);
    myList.add(<span class="hljs-number">2</span>);
    myList.add(<span class="hljs-number">1</span>);

    System.out.println(myList);
}
}
</code></pre>

<p><strong>Output</strong>:</p>

<pre><samp>myList = [3, 2, 1]
</samp></pre>

<p>The <code>ArrayList</code> class belongs to <code>java.util package</code>. To use it, we have to import the package first using the <code>import</code> statement.</p>

<pre>import java.util.ArrayList;
</pre>

<hr>
<h2 id="user-defined">User-defined Package</h2>

<p>Java also allows you to create packages as per your need. These packages are called user-defined packages.</p>

<h3 id="define">How to define a Java package?</h3>

<p>To define a package in Java, you use the keyword <code>package</code>.</p>

<pre>package packageName;
</pre>

<p>Java uses file system directories to store packages. Let's create a Java file inside another directory.</p>

<p>For example:</p>

<pre>└── com
└── test
└── Test.java
</pre>

<p>Now, edit <strong>Test.java</strong> file, and at the beginning of the file, write the package statement as:</p>

<pre>package com.test;
</pre>

<p>Here, any class that is declared within the test directory belongs to the <strong>com.test</strong> package.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here's the code:</p>

<pre>package com.test;

class Test {
public static void main(String[] args){
    System.out.println("Hello World!");
}
}
</pre>

<p><strong>Output</strong>:</p>

<pre><samp>Hello World!
</samp></pre>

<p>Here, the <var>Test</var> class now belongs to the <strong>com.test</strong> package.</p>

<hr>
<h3 id="naming-convention">Package Naming convention</h3>

<p>The package name must be <strong>unique</strong> (like a domain name). Hence, there's a convention to create a package as a domain name, but in reverse order. For example, <strong>com.company.name</strong></p>

<p>Here, each level of the package is a directory in your file system. Like this:</p>

<pre>└── com
└── company
└── name
</pre>

<p>And, there is no limitation on how many subdirectories (package hierarchy) you can create.</p>

<hr>
<h3 id="create-intellij-idea">How to create a package in Intellij IDEA?</h3>

<p>In IntelliJ IDEA, here's how you can create a package:</p>

<ol>
<li>Right-click on the source folder.</li>
<li>Go to <strong>new</strong> and then <strong>package</strong>.
<figure><img alt="New package in Intellij IDEA" height="293" src="assets/images/new-package.png" title="" width="645">
  <figcaption>&nbsp;</figcaption>
</figure>
</li>
<li>A pop-up box will appear where you can enter the package name.
<figure><img alt="Package Naming convention in Java" height="228" src="assets/images/package-name.png" title="" width="468">
  <figcaption>&nbsp;</figcaption>
</figure>
</li>
</ol>

<p>Once the package is created, a similar folder structure will be created on your file system as well. Now, you can create classes, interfaces, and so on inside the package.</p>

<figure><img alt="Package directory" height="239" src="assets/images/package-directory.png" title="" width="569">
<figcaption>&nbsp;</figcaption>
</figure>

<hr>
<h2 id="import">How to import packages in Java?</h2>

<p>Java has an <code>import</code> statement that allows you to import an entire package (as in earlier examples), or use only certain classes and interfaces defined in the package.</p>

<p>The general form of <code>import</code> statement is:</p>

<pre>import package.name.ClassName;   // To import a certain class only
import package.name.*   // To import the whole package
</pre>

<p>For example,</p>

<pre>import java.util.Date; // imports only Date class
import java.io.*;      // imports everything inside java.io package
</pre>

<p>The <code>import</code> statement is optional in Java.</p>

<p>If you want to use class/interface from a certain package, you can also use its <strong>fully qualified name</strong>, which includes its full package hierarchy.</p>

<p>Here is an example to import a package using the <code>import</code> statement.</p>

<pre>import java.util.Date;

class MyClass implements Date {
// body
}
</pre>

<p>The same task can be done using the fully qualified name as follows:</p>

<pre>class MyClass implements java.util.Date {
//body
}
</pre>

<hr>
<h2 id="example">Example: Package and importing package</h2>

<p>Suppose, you have defined a package <strong>com.programiz</strong> that contains a class <var>Helper</var>.</p>

<pre>package com.programiz;

public class Helper {
public static String getFormattedDollar (double value){
    return String.format("$%.2f", value);
}
}
</pre>

<p>Now, you can import <var>Helper</var> class from <strong>com.programiz</strong> package to your implementation class. Once you import it, the class can be referred directly by its name. Here's how:</p>

<pre>import com.programiz.Helper;

class UseHelper {
public static void main(String[] args) {

    double value = 99.5;
    String formattedValue = Helper.getFormattedDollar(value);
    System.out.println("formattedValue = " + formattedValue);
}
}
</pre>

<p><strong>Output</strong>:</p>

<pre><samp>formattedValue = $99.50
</samp></pre>

<p>Here,</p>

<ol>
<li>the <var>Helper</var> class is defined in <strong>com.programiz</strong> package.</li>
<li>the <var>Helper</var> class is imported to a different file. The file contains <var>UseHelper</var> class.</li>
<li>The <code>getFormattedDollar()</code> method of the <var>Helper</var> class is called from inside the <var>UseHelper</var> class.</li>
</ol>

<figure><img alt="Importing packages in Java" height="177" src="assets/images/import-package-java_0.jpg" title="Java import package" width="400">
<figcaption>Java import package</figcaption>
</figure>

<hr>
<p>In Java, the <code>import</code> statement is written directly after the package statement (if it exists) and before the class definition.</p>

<p>For example,</p>

<pre>package package.name;
import package.ClassName; // only import a Class

class MyClass {
// body
}
</pre>
</div>
</section>


<!-- eight menu sections -->
<section id="eight1">
<h1>Java Exceptions</h1>
<div class="content">
  <p id="introduction">An exception is an unexpected event that occurs during program execution. It affects the flow of the program instructions which can cause the program to terminate abnormally.</p>

<p>An exception can occur for many reasons. Some of them are:</p>

<ul>
<li>Invalid user input</li>
<li>Device failure</li>
<li>Loss of network connection</li>
<li>Physical limitations (out of disk memory)</li>
<li>Code errors</li>
<li>Opening an unavailable file</li>
</ul>

<hr>
<h2 id="hierarchy">Java Exception hierarchy</h2>

<p>Here is a simplified diagram of the exception hierarchy in Java.</p>

<figure><img src="assets/images/ExceptionHierarchy.png" title="Exception Hierarchy in Java" alt="Exception Hierarchy in Java" width="450" height="275">
</figure>
<p>As you can see from the image above, the <code>Throwable</code> class is the root class in the hierarchy.</p>

<p>Note that the hierarchy splits into two branches: Error and Exception.</p>

<hr>
<h3 id="errors">Errors</h3>

<p><strong>Errors</strong> represent irrecoverable conditions such as Java virtual machine (JVM) running out of memory, memory leaks, stack overflow errors, library incompatibility, infinite recursion, etc.</p>

<p>Errors are usually beyond the control of the programmer and we should not try to handle errors.</p>

<hr>
<h3 id="exceptions">Exceptions</h3>

<p><strong>Exceptions</strong> can be caught and handled by the program.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>When an exception occurs within a <a href="/java-programming/methods">method</a>, it creates an object. This object is called the exception object.</p>

<p>It contains information about the exception such as the name and description of the exception and state of the program when the exception occurred.</p>

<p>We will learn how to handle these exceptions in the next tutorial. In this tutorial, we will now focus on different types of exceptions in Java.</p>

<hr>
<h2 id="types">Java Exception Types</h2>

<p>The exception hierarchy also has two branches: <code>RuntimeException</code> and <code>IOException</code>.</p>

<hr>
<h3>1. RuntimeException</h3>

<p>A <strong>runtime exception</strong> happens due to a programming error. They are also known as <strong>unchecked exceptions</strong>.</p>

<p>These exceptions are not checked at compile-time but run-time. Some of the common runtime exceptions are:</p>

<ul>
<li>Improper use of an API - <code>IllegalArgumentException</code> </li>
<li>Null pointer access (missing the initialization of a <a href="/java-programming/variables-literals">variable</a>) - <code>NullPointerException</code> </li>
<li>Out-of-bounds <a href="/java-programming/arrays">array</a> access - <code>ArrayIndexOutOfBoundsException</code> </li>
<li>Dividing a number by 0 - <code>ArithmeticException</code> </li>
</ul>

<p>You can think about it in this way. "If it is a runtime exception, it is your fault".</p>

<p>The <code>NullPointerException</code> would not have occurred if you had checked whether the variable was initialized or not before using it.</p>

<p>An <code>ArrayIndexOutOfBoundsException</code> would not have occurred if you tested the array index against the array bounds.</p>

<hr>
<h3>2. IOException</h3>

<p>An <code>IOException</code> is also known as a <strong>checked exception</strong>. They are checked by the compiler at the compile-time and the programmer is prompted to handle these exceptions.</p>

<p>Some of the examples of checked exceptions are:</p>

<ul>
<li>Trying to open a file that doesn't exist results in <code>FileNotFoundException</code> </li>
<li>Trying to read past the end of a file</li>
</ul>

<p>Now we know about exceptions, we will learn about <a href="/java-programming/exception-handling">handling exceptions</a> in the next tutorial.</p>

</div>
</section>
<section id="eight2">
<h1>Java Exception Handling</h1>
<div class="content">
  <p id="introduction">In the last tutorial, we learned about <a href="/java-programming/exceptions">Java exceptions</a>. We know that exceptions abnormally terminate the execution of a program.</p>

<p>This is why it is important to handle exceptions. Here's a list of different approaches to handle exceptions in Java.</p>

<ul>
<li>try...catch block</li>
<li>finally block</li>
<li>throw and throws keyword</li>
</ul>

<hr>
<h2 id="try-catch">1. Java try...catch block</h2>

<p>The <a href="/java-programming/try-catch">try-catch</a> block is used to handle exceptions in Java. Here's the syntax of <code>try...catch</code> block:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> {
<span class="hljs-comment">// code</span>
}
<span class="hljs-keyword">catch</span>(Exception e) {
<span class="hljs-comment">// code</span>
}</code></pre>

<p>Here, we have placed the code that might generate an exception inside the <code>try</code> block. Every <code>try</code> block is followed by a <code>catch</code> block.</p>

<p>When an exception occurs, it is caught by the <code>catch</code> block. The <code>catch</code> block cannot be used without the <code>try</code> block.</p>

<h3>Example: Exception handling using try...catch</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">try</span> {

  <span class="hljs-comment">// code that generate exception</span>
  <span class="hljs-keyword">int</span> divideByZero = <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;
  System.out.println(<span class="hljs-string">"Rest of code in try block"</span>);
}

<span class="hljs-keyword">catch</span> (ArithmeticException e) {
  System.out.println(<span class="hljs-string">"ArithmeticException =&gt; "</span> + e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>ArithmeticException =&gt; / by zero</samp></pre>

<p>In the example, we are trying to divide a number by <code>0</code>. Here, this code generates an exception.</p>

<p>To handle the exception, we have put the code, <code>5 / 0</code> inside the <code>try</code> block. Now when an exception occurs, the rest of the code inside the <code>try</code> block is skipped.</p>

<p>The <code>catch</code> block catches the exception and statements inside the catch block is executed.</p>

<p>If none of the statements in the <code>try</code> block generates an exception, the <code>catch</code> block is skipped.</p>

<hr>
<h2 id="finally">2. Java finally block</h2>

<p>In Java, the <code>finally</code> block is always executed no matter whether there is an exception or not.</p>

<p>The <code>finally</code> block is optional. And, for each <code>try</code> block, there can be only one <code>finally</code> block.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The basic syntax of <code>finally</code> block is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> {
<span class="hljs-comment">//code</span>
}
<span class="hljs-keyword">catch</span> (ExceptionType1 e1) { 
<span class="hljs-comment">// catch block</span>
}
<span class="hljs-keyword">finally</span> {
<span class="hljs-comment">// finally block always executes</span>
}</code></pre>

<p>If an exception occurs, the <code>finally</code> block is executed after the <code>try...catch</code> block. Otherwise, it is executed after the try block. For each <code>try</code> block, there can be only one <code>finally</code> block.</p>

<hr>
<h3>Example: Java Exception Handling using finally block</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// code that generates exception</span>
  <span class="hljs-keyword">int</span> divideByZero = <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;
}

<span class="hljs-keyword">catch</span> (ArithmeticException e) {
  System.out.println(<span class="hljs-string">"ArithmeticException =&gt; "</span> + e.getMessage());
}

<span class="hljs-keyword">finally</span> {
  System.out.println(<span class="hljs-string">"This is the finally block"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>ArithmeticException =&gt; / by zero
This is the finally block</samp></pre>

<p>In the above example, we are dividing a number by <strong>0</strong> inside the <code>try</code> block. Here, this code generates an <code>ArithmeticException</code>.</p>

<p>The exception is caught by the <code>catch</code> block. And, then the <code>finally</code> block is executed.</p>

<div class="note-tip">
<p><strong>Note</strong>: It is a good practice to use the <code>finally</code> block. It is because it can include important cleanup codes like,</p>

<ul>
<li>code that might be accidentally skipped by return, <a href="/java-programming/continue-statement">continue</a> or <a href="/java-programming/break-statement">break</a></li>
<li>closing a file or connection</li>
</ul>

</div>
<hr>
<h2 id="throw-throws">3. Java throw and throws keyword</h2>

<p>The Java <code>throw</code> keyword is used to explicitly throw a single exception.</p>

<p>When we <code>throw</code> an exception, the flow of the program moves from the <code>try</code> block to the <code>catch</code> block.</p>

<h3>Example: Exception handling using Java throw</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divideByZero</span><span class="hljs-params">()</span> </span>{

<span class="hljs-comment">// throw an exception</span>
<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException(<span class="hljs-string">"Trying to divide by 0"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
divideByZero();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Exception in thread "main" java.lang.ArithmeticException: Trying to divide by 0
    at Main.divideByZero(Main.java:5)
    at Main.main(Main.java:9)</samp></pre>

<p>In the above example, we are explicitly throwing the <code>ArithmeticException</code> using the <code>throw</code> keyword.</p>

<p>Similarly, the <code>throws</code> keyword is used to declare the type of exceptions that might occur within the method. It is used in the method declaration.</p>

<h3>Example: Java throws keyword</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-comment">// declareing the type of exception</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{

<span class="hljs-comment">// code that may generate IOException</span>
File newFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);
FileInputStream stream = <span class="hljs-keyword">new</span> FileInputStream(newFile);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  findFile();
}
<span class="hljs-keyword">catch</span> (IOException e) {
  System.out.println(e);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>java.io.FileNotFoundException: test.txt (The system cannot find the file specified)</samp></pre>

<p>When we run this program, if the file <strong>test.txt</strong> does not exist, <code>FileInputStream</code> throws a <code>FileNotFoundException</code> which extends the <code>IOException</code> class.</p>

<p>The <code>findFile()</code> method specifies that an <code>IOException</code> can be thrown. The <code>main()</code> method calls this method and handles the exception if it is thrown.</p>

<p>If a method does not handle exceptions, the type of exceptions that may occur within it must be specified in the <code>throws</code> clause.</p>

<p>To learn more, visit <a href="/java-programming/throw-throws">Java throw and throws</a>.</p>

</div>
</section>
<section id="eight3">
<h1>Java try...catch</h1>
<div class="content">
  <p id="introduction">The <code>try...catch</code> block in Java is used to handle exceptions and prevents the abnormal termination of the program.</p>

<p>Here's the syntax of a <code>try...catch</code> block in Java.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span>{
<span class="hljs-comment">// code</span>
}
<span class="hljs-keyword">catch</span>(exception) {
<span class="hljs-comment">// code</span>
}</code></pre>

<p>The <code>try</code> block includes the code that might generate an <a href="/java-programming/exceptions">exception</a>.</p>

<p>The <code>catch</code> block includes the code that is executed when there occurs an exception inside the <code>try</code> block.</p>

<h3 id="example">Example: Java try...catch block</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> divideByZero = <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;
  System.out.println(<span class="hljs-string">"Rest of code in try block"</span>);
}

<span class="hljs-keyword">catch</span> (ArithmeticException e) {
  System.out.println(<span class="hljs-string">"ArithmeticException =&gt; "</span> + e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>ArithmeticException =&gt; / by zero</samp></pre>

<p>In the above example, notice the line,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">int</span> divideByZero = <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;</code></pre>

<p>Here, we are trying to divide a number by <strong>zero</strong>. In this case, an exception occurs. Hence, we have enclosed this code inside the <code>try</code> block.</p>

<p>When the program encounters this code, <code>ArithmeticException</code> occurs. And, the exception is caught by the <code>catch</code> block and executes the code inside the <code>catch</code> block.</p>

<p>The <code>catch</code> block is only executed if there exists an exception inside the <code>try</code> block.</p>

<p class="note-tip"><strong>Note</strong>: In Java, we can use a <code>try</code> block without a <code>catch</code> block. However, we cannot use a <code>catch</code> block without a <code>try</code> block.</p>

<hr>
<h2 id="try-finally">Java try...finally block</h2>

<p>We can also use the <code>try</code> block along with a finally block.</p>

<p>In this case, the finally block is always executed whether there is an exception inside the try block or not.</p>

<h3>Example: Java try...finally block</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> divideByZero = <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;
}

<span class="hljs-keyword">finally</span> {
  System.out.println(<span class="hljs-string">"Finally block is always executed"</span>);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Finally block is always executed
Exception in thread "main" java.lang.ArithmeticException: / by zero
    at Main.main(Main.java:4)</samp></pre>

<p>In the above example, we have used the <code>try</code> block along with the <code>finally</code> block. We can see that the code inside the <code>try</code> block is causing an exception.</p>

<p>However, the code inside the <code>finally</code> block is executed irrespective of the exception.</p>

<hr>
<h2 id="try-catch-finally">Java try...catch...finally block</h2>

<p>In Java, we can also use the finally block after the <code>try...catch</code> block. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListOfNumbers</span> </span>{

<span class="hljs-comment">// create an integer array</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] list = {<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>};

<span class="hljs-comment">// method to write data from array to a fila</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeList</span><span class="hljs-params">()</span> </span>{
PrintWriter out = <span class="hljs-keyword">null</span>;

<span class="hljs-keyword">try</span> {
  System.out.println(<span class="hljs-string">"Entering try statement"</span>);

  <span class="hljs-comment">// creating a new file OutputFile.txt</span>
  out = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"OutputFile.txt"</span>));

  <span class="hljs-comment">// writing values from list array to Output.txt</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) {
    out.println(<span class="hljs-string">"Value at: "</span> + i + <span class="hljs-string">" = "</span> + list[i]);
  }
}

<span class="hljs-keyword">catch</span> (Exception e) {
  System.out.println(<span class="hljs-string">"Exception =&gt; "</span> + e.getMessage());
}

<span class="hljs-keyword">finally</span> {
  <span class="hljs-comment">// checking if PrintWriter has been opened</span>
  <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) {
    System.out.println(<span class="hljs-string">"Closing PrintWriter"</span>);
    <span class="hljs-comment">// close PrintWriter</span>
    out.close();
  }
  
  <span class="hljs-keyword">else</span> {
    System.out.println(<span class="hljs-string">"PrintWriter not open"</span>);
  }
}

}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
ListOfNumbers list = <span class="hljs-keyword">new</span> ListOfNumbers();
list.writeList();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Entering try statement
Exception =&gt; Index 5 out of bounds for length 5
Closing PrintWriter</samp></pre>

<p>In the above example, we have created an <a href="/java-programming/arrays">array</a> named <var>list</var> and a file named <var>output.txt</var>. Here, we are trying to read data from the array and storing to the file.</p>

<p>Notice the code,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) {
out.println(<span class="hljs-string">"Value at: "</span> + i + <span class="hljs-string">" = "</span> + list[i]);
}</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, the size of the array is <code>5</code> and the last element of the array is at <code>list[4]</code>. However, we are trying to access elements at <code><em>a[5]</em></code> and <code>a[6]</code>.</p>

<p>Hence, the code generates an exception that is caught by the catch block.</p>

<p>Since the <code>finally</code> block is always executed, we have included code to close the <code>PrintWriter</code> inside the finally block.</p>

<p>It is a good practice to use finally block to include important cleanup code like closing a file or connection.</p>

<div class="note-tip">
<p><strong>Note</strong>: There are some cases when a <code>finally</code> block does not execute:</p>

<ul>
<li>Use of <code>System.exit()</code> method</li>
<li>An exception occurs in the <code>finally</code> block</li>
<li>The death of a thread</li>
</ul>

</div>
<hr>
<h2 id="multiple-catch">Multiple Catch blocks</h2>

<p>For each <code>try</code> block, there can be zero or more <code>catch</code> blocks. Multiple <code>catch</code> blocks allow us to handle each exception differently.</p>

<p>The argument type of each <code>catch</code> block indicates the type of exception that can be handled by it. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListOfNumbers</span> </span>{
<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeList</span><span class="hljs-params">()</span> </span>{

<span class="hljs-keyword">try</span> {
  arr[<span class="hljs-number">10</span>] = <span class="hljs-number">11</span>;
}

<span class="hljs-keyword">catch</span> (NumberFormatException e1) {
  System.out.println(<span class="hljs-string">"NumberFormatException =&gt; "</span> + e1.getMessage());
}

<span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e2) {
  System.out.println(<span class="hljs-string">"IndexOutOfBoundsException =&gt; "</span> + e2.getMessage());
}

}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
ListOfNumbers list = <span class="hljs-keyword">new</span> ListOfNumbers();
list.writeList();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>IndexOutOfBoundsException =&gt; Index 10 out of bounds for length 10</samp></pre>

<p>In this example, we have created an integer array named <code>arr</code> of size <strong>10</strong>.</p>

<p>Since the array index starts from <strong>0</strong>, the last element of the array is at <code>arr[9]</code>. Notice the statement,</p>

<pre style="max-height: 600px;"><code class="java hljs">arr[<span class="hljs-number">10</span>] = <span class="hljs-number">11</span>;</code></pre>

<p>Here, we are trying to assign a value to the index <strong>10</strong>. Hence, <code>IndexOutOfBoundException</code> occurs.</p>

<p>When an exception occurs in the <code>try</code> block,</p>

<ul>
<li>The exception is thrown to the first <code>catch</code> block. The first <code>catch</code> block does not handle an <code>IndexOutOfBoundsException</code>, so it is passed to the next <code>catch</code> block.</li>
<li>The second <code>catch</code> block in the above example is the appropriate exception handler because it handles an <code>IndexOutOfBoundsException</code>. Hence, it is executed.</li>
</ul>

<hr>
<h3 id="multiple-exceptions">Catching Multiple Exceptions</h3>

<p>From Java SE 7 and later, we can now catch more than one type of exception with one <code>catch</code> block.</p>

<p>This reduces code duplication and increases code simplicity and efficiency.</p>

<p>Each exception type that can be handled by the <code>catch</code> block is separated using a vertical bar <code>|</code>.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> {
<span class="hljs-comment">// code</span>
} <span class="hljs-keyword">catch</span> (ExceptionType1 | Exceptiontype2 ex) { 
<span class="hljs-comment">// catch block</span>
}</code></pre>

<p>To learn more, visit <a href="/java-programming/multiple-exceptions">Java catching multiple exceptions</a>.</p>

<hr>
<h3 id="try-resource">Java try-with-resources statement</h3>

<p>The <strong>try-with-resources</strong> statement is a try statement that has one or more resource declarations.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> (resource declaration) {
<span class="hljs-comment">// use of the resource</span>
} <span class="hljs-keyword">catch</span> (ExceptionType e1) {
<span class="hljs-comment">// catch block</span>
}</code></pre>

<p>The resource is an object to be closed at the end of the program. It must be declared and initialized in the try statement.</p>

<p>Let's take an example.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> (PrintWriter out = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"OutputFile.txt"</span>)) {
<span class="hljs-comment">// use of the resource</span>
}</code></pre>

<p>The <strong>try-with-resources</strong> statement is also referred to as <strong>automatic resource management</strong>. This statement automatically closes all the resources at the end of the statement.</p>

<p>To learn more, visit the <a href="/java-programming/try-with-resources">java try-with-resources statement</a>.</p>

</div>
</section>
<section id="eight4">
<h1>Java throw and throws</h1>
<div class="content">
  <p id="introduction">In Java, exceptions can be categorized into two types:</p>

<ul>
<li><strong>Unchecked Exceptions:</strong> They are not checked at compile-time but at run-time.For example: <code>ArithmeticException</code>, <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>, exceptions under <code>Error</code> class, etc.</li>
<li><strong>Checked Exceptions:</strong> They are checked at compile-time. For example, <code>IOException</code>, <code>InterruptedException</code>, etc.</li>
</ul>

<p>Refer to <a href="/java-programming/exceptions">Java Exceptions</a> to learn in detail about checked and unchecked exceptions.</p>

<p>Usually, we don't need to handle unchecked exceptions. It's because unchecked exceptions occur due to programming errors. And, it is a good practice to correct them instead of handling them.</p>

<p>This tutorial will now focus on how to handle checked exceptions using <code>throw</code> and <code>throws</code>.</p>

<hr>
<h2 id="throws">Java throws keyword</h2>

<p>We use the <code>throws</code> keyword in the method declaration to declare the type of exceptions that might occur within it.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function">accessModifier returnType <span class="hljs-title">methodName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExceptionType1, ExceptionType2 … </span>{
<span class="hljs-comment">// code</span>
}</code></pre>

<p>As you can see from the above syntax, we can use <code>throws</code> to declare multiple exceptions.</p>

<hr>
<h3>Example 1: Java throws Keyword</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{
<span class="hljs-comment">// code that may produce IOException</span>
File newFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);
FileInputStream stream=<span class="hljs-keyword">new</span> FileInputStream(newFile);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span>{
  findFile();
} <span class="hljs-keyword">catch</span>(IOException e){
  System.out.println(e);
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>java.io.FileNotFoundException: test.txt (No such file or directory)</samp></pre>

<p>When we run this program, if the file <code>test.txt</code> does not exist, <code>FileInputStream</code> throws a <code>FileNotFoundException</code> which extends the <code>IOException</code> class.</p>

<p>If a method does not handle exceptions, the type of exceptions that may occur within it must be specified in the <code>throws</code> clause so that methods further up in the call stack can handle them or specify them using <code>throws</code> keyword themselves.</p>

<p>The <code>findFile()</code> method specifies that an <code>IOException</code> can be thrown. The <code>main()</code> method calls this method and handles the exception if it is thrown.</p>

<hr>
<h3 id="multiple-exceptions">Throwing multiple exceptions</h3>

<p>Here's how we can throw multiple exceptions using the <code>throws</code> keyword.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException, IOException, InvalidClassException </span>{

<span class="hljs-comment">// code that may produce NullPointerException</span>
… … … 

<span class="hljs-comment">// code that may produce IOException</span>
… … … 

<span class="hljs-comment">// code that may produce InvalidClassException </span>
… … … 
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span>{
  findFile();
} <span class="hljs-keyword">catch</span>(IOException e1){
  System.out.println(e1.getMessage());
} <span class="hljs-keyword">catch</span>(InvalidClassException e2){
  System.out.println(e2.getMessage());
}
}
}</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, the <code>findFile()</code> method specifies that it can throw <code>NullPointerException</code>, <code>IOException</code>, and <code>InvalidClassException</code> in its <code>throws</code> clause.</p>

<p>Note that we have not handled the <code>NullPointerException</code>. This is because it is an unchecked exception. It is not necessary to specify it in the <code>throws</code> clause and handle it.</p>

<hr>
<h3 id="versus-try-catch">throws keyword Vs. try...catch...finally</h3>

<p>There might be several methods that can cause exceptions. Writing <code>try...catch</code> for each method will be tedious and code becomes long and less-readable.</p>

<p><code>throws</code> is also useful when you have checked exception (an exception that must be handled) that you don't want to catch in your current method.</p>

<hr>
<h2 id="throw">Java throw keyword</h2>

<p>The <code>throw</code> keyword is used to explicitly throw a single exception.</p>

<p>When an exception is thrown, the flow of program execution transfers from the <code>try</code> block to the <code>catch</code> block. We use the <code>throw</code> keyword within a method.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">throw</span> throwableObject;</code></pre>

<p>A throwable object is an instance of class <code>Throwable</code> or subclass of the <code>Throwable</code> class.</p>

<hr>
<h3>Example 2: Java throw keyword</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divideByZero</span><span class="hljs-params">()</span> </span>{
<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException(<span class="hljs-string">"Trying to divide by 0"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
divideByZero();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Exception in thread "main" java.lang.ArithmeticException: Trying to divide by 0
at Main.divideByZero(Main.java:3)
at Main.main(Main.java:7)
exit status 1</samp></pre>

<p>In this example, we are explicitly throwing an <code>ArithmeticException.</code> </p>

<p><strong>Note:</strong> <code>ArithmeticException</code> is an unchecked exception. It's usually not necessary to handle unchecked exceptions.</p>

<hr>
<h3>Example 3: Throwing checked exception</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{
<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">"File not found"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  findFile();
  System.out.println(<span class="hljs-string">"Rest of code in try block"</span>);
} <span class="hljs-keyword">catch</span> (IOException e) {
  System.out.println(e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>File not found</samp></pre>

<p>The <code>findFile()</code> method throws an <code>IOException</code> with the message we passed to its <a href="/java-programming/constructors">constructor</a>.</p>

<p>Note that since it is a checked exception, we must specify it in the <code>throws</code> clause.</p>

<p>The methods that call this <code>findFile()</code> method need to either handle this exception or specify it using <code>throws</code> keyword themselves.</p>

<p>We have handled this exception in the <code>main()</code> method. The flow of program execution transfers from the <code>try</code> block to <code>catch</code> block when an exception is thrown. So, the rest of the code in the <code>try</code> block is skipped and statements in the <code>catch</code> block are executed.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/exception-handling">Java Exception Handling</a> </li>
</ul>

</div>
</section>
<section id="eight5">
<h1>Java catch Multiple Exceptions</h1>
<div class="content">
  <p id="introduction">Before Java 7, we had to write multiple exception handling codes for different types of exceptions even if there was code redundancy.</p>

<p>Let's take an example.</p>

<h3>Example 1: Multiple catch blocks</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];
  array[<span class="hljs-number">10</span>] = <span class="hljs-number">30</span> / <span class="hljs-number">0</span>;
} <span class="hljs-keyword">catch</span> (ArithmeticException e) {
  System.out.println(e.getMessage());
} <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) {
  System.out.println(e.getMessage());
} 
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>/ by zero</samp></pre>

<p>In this example, two <a href="/java-programming/exceptions">exceptions</a> may occur:</p>

<ul>
<li><code>ArithmeticException</code> because we are trying to divide a number by 0.</li>
<li><code>ArrayIndexOutOfBoundsException</code> because we have declared a new integer <a href="/java-programming/arrays">array</a> with array bounds 0 to 9 and we are trying to assign a value to index 10.</li>
</ul>

<p>We are printing out the exception message in both the <code>catch</code> blocks i.e. duplicate code.</p>

<p>The associativity of the assignment operator <code>=</code> is right to left, so an <code>ArithmeticException</code> is thrown first with the message <samp>/ by zero</samp>.</p>

<hr>
<h2 id="one-catch-block">Handle Multiple Exceptions in a catch Block</h2>

<p>In Java SE 7 and later, we can now catch more than one type of exception in a single <code>catch</code> block.</p>

<p>Each exception type that can be handled by the <code>catch</code> block is separated using a vertical bar or pipe <code>|</code>.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> {
<span class="hljs-comment">// code</span>
} <span class="hljs-keyword">catch</span> (ExceptionType1 | Exceptiontype2 ex) { 
<span class="hljs-comment">// catch block</span>
}</code></pre>

<h3>Example 2: Multi-catch block</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];
  array[<span class="hljs-number">10</span>] = <span class="hljs-number">30</span> / <span class="hljs-number">0</span>;
} <span class="hljs-keyword">catch</span> (ArithmeticException | ArrayIndexOutOfBoundsException e) {
  System.out.println(e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Output</strong></p>

<pre><samp>/ by zero</samp></pre>

<p>Catching multiple exceptions in a single <code>catch</code> block reduces code duplication and increases efficiency.</p>

<p>The bytecode generated while compiling this program will be smaller than the program having multiple <code>catch</code> blocks as there is no code redundancy.</p>

<p><strong>Note:</strong> If a <code>catch</code> block handles multiple exceptions, the catch parameter is implicitly <code>final</code>. This means we cannot assign any values to catch parameters.</p>

<hr>
<h2 id="base-exception">Catching base Exception</h2>

<p>When catching multiple exceptions in a single <code>catch</code> block, the rule is generalized to specialized.</p>

<p>This means that if there is a hierarchy of exceptions in the <code>catch</code> block, we can catch the base exception only instead of catching multiple specialized exceptions.</p>

<p>Let's take an example.</p>

<h3>Example 3: Catching base exception class only</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];
  array[<span class="hljs-number">10</span>] = <span class="hljs-number">30</span> / <span class="hljs-number">0</span>;
} <span class="hljs-keyword">catch</span> (Exception e) {
  System.out.println(e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>/ by zero</samp></pre>

<p>We know that all the exception classes are subclasses of the <code>Exception</code> class. So, instead of catching multiple specialized exceptions, we can simply catch the <code>Exception</code> class.</p>

<hr>
<p>If the base exception class has already been specified in the <code>catch</code> block, do not use child exception classes in the same <code>catch</code> block. Otherwise, we will get a compilation error.</p>

<p>Let's take an example.</p>

<h3>Example 4: Catching base and child exception classes</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];
  array[<span class="hljs-number">10</span>] = <span class="hljs-number">30</span> / <span class="hljs-number">0</span>;
} <span class="hljs-keyword">catch</span> (Exception | ArithmeticException | ArrayIndexOutOfBoundsException e) {
  System.out.println(e.getMessage());
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Main.java:6: error: Alternatives in a multi-catch statement cannot be related by subclassing</samp></pre>

<p>In this example, <code>ArithmeticException</code> and <code>ArrayIndexOutOfBoundsException</code> are both subclasses of the <code>Exception</code> class. So, we get a compilation error.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/exception-handling">Java Exception Handling</a> </li>
<li><a href="/java-programming/try-catch">Java try…catch</a> </li>
</ul>

</div>
</section>
<section id="eight6">
<h1>Java try-with-resources</h1>
<div class="content">
  <p id="introduction">The <code>try-with-resources</code> statement automatically closes all the resources at the end of the statement. A resource is an object to be closed at the end of the program.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> (resource declaration) {
<span class="hljs-comment">// use of the resource</span>
} <span class="hljs-keyword">catch</span> (ExceptionType e1) {
<span class="hljs-comment">// catch block</span>
}</code></pre>

<p>As seen from the above syntax, we declare the <code>try-with-resources</code> statement by,</p>

<ol>
<li>declaring and instantiating the resource within the <code>try</code> clause.</li>
<li>specifying and handling all <a href="/java-programming/exceptions">exceptions</a> that might be thrown while closing the resource.</li>
</ol>

<p><strong>Note:</strong> The try-with-resources statement closes all the resources that implement the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html">AutoCloseable interface</a>.</p>

<hr>
<p>Let us take an example that implements the <code>try-with-resources</code> statement.</p>

<h3 id="example-1">Example 1: try-with-resources</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
String line;
<span class="hljs-keyword">try</span>(BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"test.txt"</span>))) {
  <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) {
    System.out.println(<span class="hljs-string">"Line =&gt;"</span>+line);
  }
} <span class="hljs-keyword">catch</span> (IOException e) {
  System.out.println(<span class="hljs-string">"IOException in try block =&gt;"</span> + e.getMessage());
}
}
}</code></pre>

<p><strong>Output if the test.txt file is not found.</strong></p>

<pre><samp>IOException in try-with-resources block =&gt;test.txt (No such file or directory)</samp></pre>

<p><strong>Output if the test.txt file is found.</strong></p>

<pre><samp>Entering try-with-resources block
Line =&gt;test line</samp></pre>

<p>In this example, we use an instance of <var>BufferedReader</var> to read data from the <code>test.txt</code> file.</p>

<p>Declaring and instantiating the <var>BufferedReader</var> inside the <code>try-with-resources</code> statement ensures that its instance is closed regardless of whether the <code>try</code> statement completes normally or throws an exception.</p>

<p>If an exception occurs, it can be handled using the <a href="/java-programming/exception-handling">exception handling</a> blocks or the <a href="/java-programming/throw-throws">throws keyword</a>.</p>

<hr>
<h2 id="suppressed-exceptions">Suppressed Exceptions</h2>

<p>In the above example, exceptions can be thrown from the <code>try-with-resources</code> statement when:</p>

<ul>
<li>The file <code>test.txt</code> is not found.</li>
<li>Closing the <code>BufferedReader</code> object.</li>
</ul>

<p>An exception can also be thrown from the <code>try</code> block as a file read can fail for many reasons at any time.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>If exceptions are thrown from both the <code>try</code> block and the <code>try-with-resources</code> statement, exception from the <code>try</code> block is thrown and exception from the <code>try-with-resources</code> statement is suppressed.</p>

<h3>Retrieving Suppressed Exceptions</h3>

<p>In Java 7 and later, the suppressed exceptions can be retrieved by calling the <code>Throwable.getSuppressed()</code> method from the exception thrown by the <code>try</code> block.</p>

<p>This method returns an <a href="/java-programming/arrays">array</a> of all suppressed exceptions. We get the suppressed exceptions in the <code>catch</code> block.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">catch</span>(IOException e) {
System.out.println(<span class="hljs-string">"Thrown exception=&gt;"</span> + e.getMessage());
Throwable[] suppressedExceptions = e.getSuppressed();
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;suppressedExceptions.length; i++) {
System.out.println(<span class="hljs-string">"Suppressed exception=&gt;"</span> + suppressedExceptions[i]);
}
}</code></pre>

<hr>
<h2 id="advantages">Advantages of using try-with-resources</h2>

<p>Here are the advantages of using try-with-resources:</p>

<h3>1. finally block not required to close the resource</h3>

<p>Before Java 7 introduced this feature, we had to use the <code>finally</code> block to ensure that the resource is closed to avoid resource leaks.</p>

<p>Here's a program that is similar to <strong>Example 1</strong>. However, in this program, we have used finally block to close resources.</p>

<h3>Example 2: Close resource using finally block</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
BufferedReader br = <span class="hljs-keyword">null</span>;
String line;

<span class="hljs-keyword">try</span> {
  System.out.println(<span class="hljs-string">"Entering try block"</span>);
  br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"test.txt"</span>));
  <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) {
    System.out.println(<span class="hljs-string">"Line =&gt;"</span>+line);
  }
} <span class="hljs-keyword">catch</span> (IOException e) {
  System.out.println(<span class="hljs-string">"IOException in try block =&gt;"</span> + e.getMessage());
} <span class="hljs-keyword">finally</span> {
  System.out.println(<span class="hljs-string">"Entering finally block"</span>);
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">if</span> (br != <span class="hljs-keyword">null</span>) {
      br.close();
    }
  } <span class="hljs-keyword">catch</span> (IOException e) {
    System.out.println(<span class="hljs-string">"IOException in finally block =&gt;"</span>+e.getMessage());
  }

}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Entering try block
Line =&gt;line from test.txt file
Entering finally block </samp></pre>

<p>As we can see from the above example, the use of <code>finally</code> block to clean up resources makes the code more complex.</p>

<p>Notice the <code>try...catch</code> block in the <code>finally</code> block as well? This is because an <code>IOException</code> can also occur while closing the <code>BufferedReader</code> instance inside this <code>finally</code> block so it is also caught and handled.</p>

<p>The <code>try-with-resources</code> statement does <strong>automatic resource management</strong>. We need not explicitly close the resources as JVM automatically closes them. This makes the code more readable and easier to write.</p>

<hr>
<h3>2. try-with-resources with multiple resources</h3>

<p>We can declare more than one resource in the <code>try-with-resources</code> statement by separating them with a semicolon <code>;</code></p>

<h3>Example 3: try with multiple resources</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-keyword">import</span> java.util.*;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span>{
<span class="hljs-keyword">try</span> (Scanner scanner = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"testRead.txt"</span>)); 
  PrintWriter writer = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"testWrite.txt"</span>))) {
  <span class="hljs-keyword">while</span> (scanner.hasNext()) {
    writer.print(scanner.nextLine());
  }
}
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>If this program executes without generating any exceptions, <code>Scanner</code> object reads a line from the <code>testRead.txt</code> file and writes it in a new <code>testWrite.txt</code> file.</p>

<p>When multiple declarations are made, the <code>try-with-resources</code> statement closes these resources in reverse order. In this example, the <code>PrintWriter</code> object is closed first and then the <code>Scanner</code> object is closed.</p>

<hr>
<h2 id="java-9">Java 9 try-with-resources enhancement</h2>

<p>In Java 7, there is a restriction to the <code>try-with-resources</code> statement. The resource needs to be declared locally within its block.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">try</span> (Scanner scanner = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"testRead.txt"</span>))) {
<span class="hljs-comment">// code</span>
}</code></pre>

<p>If we declared the resource outside the block in Java 7, it would have generated an error message.</p>

<pre style="max-height: 600px;"><code class="java hljs">Scanner scanner = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"testRead.txt"</span>));
<span class="hljs-keyword">try</span> (scanner) {
<span class="hljs-comment">// code</span>
}</code></pre>

<p>To deal with this error, Java 9 improved the <code>try-with-resources</code> statement so that the reference of the resource can be used even if it is not declared locally. The above code will now execute without any compilation error.</p>

</div>
</section>
<section id="eight7">
<h1>Java Annotations</h1>
<div class="content">
  <p>Java annotations are metadata (data about data) for our program source code.</p>

<p>They provide additional information about the program to the compiler but are not part of the program itself. These annotations do not affect the execution of the compiled program.</p>

<p>Annotations start with <code>@</code>. Its syntax is:</p>

<pre><samp>@AnnotationName</samp></pre>

<hr>
<p>Let's take an example of <code>@Override</code> annotation.</p>

<p>The <code>@Override</code> annotation specifies that the method that has been marked with this annotation overrides the method of the superclass with the same method name, return type, and parameter list.</p>

<p>It is not mandatory to use <code>@Override</code> when overriding a method. However, if we use it, the compiler gives an error if something is wrong (such as wrong parameter type) while overriding the method.</p>

<h3>Example 1: @Override Annotation Example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am an animal."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayInfo</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"I am a dog."</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog d1 = <span class="hljs-keyword">new</span> Dog();
d1.displayInfo();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>I am a dog.</samp></pre>

<p>In this example, the method <code>displayInfo()</code> is present in both the superclass <var>Animal</var> and subclass <var>Dog</var>. When this method is called, the method of the subclass is called instead of the method in the superclass.</p>

<hr>
<h2 id="formats">Annotation formats</h2>

<p>Annotations may also include elements (members/attributes/parameters).</p>

<h3>1. Marker Annotations</h3>

<p>Marker annotations do not contain members/elements. It is only used for marking a declaration.</p>

<p>Its syntax is:</p>

<pre><samp>@AnnotationName()</samp></pre>

<p>Since these annotations do not contain elements, parentheses can be excluded. For example,</p>

<pre><samp>@Override</samp></pre>

<hr>
<h3>2. Single element Annotations</h3>

<p>A single element annotation contains only one element.</p>

<p>Its syntax is:</p>

<pre><samp>@AnnotationName(elementName = "elementValue")</samp></pre>

<p>If there is only one element, it is a convention to name that element as <var>value</var>.</p>

<pre><samp>@AnnotationName(value = "elementValue")</samp></pre>

<p>In this case, the element name can be excluded as well. The element name will be <var>value</var> by default.</p>

<pre><samp>@AnnotationName("elementValue")</samp></pre>

<hr>
<h3>3. Multiple element Annotations</h3>

<p>These annotations contain multiple elements separated by commas.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Its syntax is:</p>

<pre><samp>@AnnotationName(element1 = "value1", element2 = "value2")</samp></pre>

<hr>
<h2 id="placement">Annotation placement</h2>

<p>Any declaration can be marked with annotation by placing it above that declaration. As of Java 8, annotations can also be placed before a type.</p>

<h3>1. Above declarations</h3>

<p>As mentioned above, Java annotations can be placed above <a href="/java-programming/class-objects">class</a>, <a href="/java-programming/methods">method</a>, <a href="/java-programming/interfaces">interface</a>, field, and other program element declarations.</p>

<h3>Example 2: @SuppressWarnings Annotation Example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)
<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wordsList</span><span class="hljs-params">()</span> </span>{
ArrayList wordList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();

<span class="hljs-comment">// This causes an unchecked warning</span>
wordList.add(<span class="hljs-string">"programiz"</span>); 

System.out.println(<span class="hljs-string">"Word list =&gt; "</span> + wordList);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
wordsList();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Word list =&gt; [programiz]</samp></pre>

<p>If the above program is compiled without using the <code>@SuppressWarnings("unchecked")</code> annotation, the compiler will still compile the program but it will give warnings like:</p>

<pre><samp>Main.java uses unchecked or unsafe operations.
Word list =&gt; [programiz]</samp></pre>

<p>We are getting the warning</p>

<pre><samp>Main.java uses unchecked or unsafe operations</samp></pre>

<p>because of the following statement.</p>

<pre style="max-height: 600px;"><code class="java hljs">ArrayList wordList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</code></pre>

<p>This is because we haven't defined the generic type of the <a href="/java-programming/arraylist">array list</a>. We can fix this warning by specifying generics inside angle brackets <code>&lt;&gt;</code>.</p>

<pre><samp>ArrayList&lt;String&gt; wordList = new ArrayList&lt;&gt;();</samp></pre>

<hr>
<h3>2. Type annotations</h3>

<p>Before Java 8, annotations could be applied to declarations only. Now, type annotations can be used as well. This means that we can place annotations wherever we use a type.</p>

<p><strong>Constructor invocations</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">new</span> <span class="hljs-meta">@Readonly</span> ArrayList&lt;&gt;()</code></pre>

<p><strong>Type definitions</strong></p>

<pre><samp>@NonNull String str;</samp></pre>

<p>This declaration specifies non-null variable <var>str</var> of type <code>String</code> to avoid <code>NullPointerException</code>.</p>

<pre><samp>@NonNull List&lt;String&gt; newList;</samp></pre>

<p>This declaration specifies a non-null list of type <code>String</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs">List&lt;<span class="hljs-meta">@NonNull</span> String&gt; newList;</code></pre>

<p>This declaration specifies a list of non-null values of type <code>String</code>.</p>

<p><strong>Type casts</strong> </p>

<pre style="max-height: 600px;"><code class="java hljs">newStr = (<span class="hljs-meta">@NonNull</span> String) str;</code></pre>

<p><strong>extends and implements clause</strong> </p>

<pre><samp>class Warning extends @Localized Message</samp></pre>

<p><strong>throws clause</strong> </p>

<pre><samp>public String readMethod() throws @Localized IOException</samp></pre>

<p>Type annotations enable Java code to be analyzed better and provide even stronger type checks.</p>

<hr>
<h2 id="types">Types of Annotations</h2>

<p>1. <strong>Predefined annotations</strong></p>

<ol>
<li><code>@Deprecated</code></li>
<li><code>@Override</code></li>
<li><code>@SuppressWarnings</code></li>
<li><code>@SafeVarargs</code></li>
<li><code>@FunctionalInterface</code></li>
</ol>

<p>2. <strong>Meta-annotations</strong></p>

<ol>
<li><code>@Retention</code></li>
<li><code>@Documented</code></li>
<li><code>@Target</code></li>
<li><code>@Inherited</code></li>
<li><code>@Repeatable</code></li>
</ol>

<p>3. <strong>Custom annotations</strong></p>

<p>These annotation types are described in detail in the <a href="/java-programming/annotation-types">Java Annotation Types</a> tutorial.</p>

<hr>
<h2 id="use">Use of Annotations</h2>

<ul>
<li><strong>Compiler instructions</strong> - Annotations can be used for giving instructions to the compiler, detect errors or suppress warnings. The built-in annotations <code>@Deprecated</code>, <code>@Override</code>, <code>@SuppressWarnings</code> are used for these purposes.</li>
<li><strong>Compile-time instructions</strong> - Compile-time instructions provided by these annotations help the software build tools to generate code, XML files and many more.</li>
<li><strong>Runtime instructions</strong> - Some annotations can be defined to give instructions to the program at runtime. These annotations are accessed using Java Reflection.</li>
</ul>

</div>
</section>
<section id="eight8">
<h1>Java Annotation Types</h1>
<div class="content">
  <p>Java annotations are metadata (data about data) for our program source code. There are several predefined annotations provided by the Java SE. Moreover, we can also create custom annotations as per our needs.</p>

<p>If you do not know what annotations are, visit the <a href="/java-programming/annotations">Java annotations</a> tutorial.</p>

<p>These annotations can be categorized as:</p>

<p>1. <strong>Predefined annotations</strong> </p>

<ul>
<li><code>@Deprecated</code></li>
<li><code>@Override</code></li>
<li><code>@SuppressWarnings</code></li>
<li><code>@SafeVarargs</code></li>
<li><code>@FunctionalInterface</code></li>
</ul>

<p>2. <strong>Custom annotations</strong></p>

<p>3. <strong>Meta-annotations</strong></p>

<ul>
<li><code>@Retention</code></li>
<li><code>@Documented</code></li>
<li><code>@Target</code></li>
<li><code>@Inherited</code></li>
<li><code>@Repeatable</code></li>
</ul>

<hr>
<h2 id="predefined">Predefined Annotation Types</h2>

<h3>1. @Deprecated</h3>

<p>The <code>@Deprecated</code> annotation is a marker annotation that indicates the element (<a href="/java-programming/class-objects">class</a>, <a href="/java-programming/methods">method</a>, field, etc) is deprecated and has been replaced by a newer element.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Deprecated</span>
<span class="hljs-function">accessModifier returnType <span class="hljs-title">deprecatedMethodName</span><span class="hljs-params">()</span> </span>{ ... }</code></pre>

<p>When a program uses the element that has been declared deprecated, the compiler generates a warning.</p>

<p>We use Javadoc <code>@deprecated</code> tag for documenting the deprecated element.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">/**
* <span class="hljs-doctag">@deprecated</span>
* why it was deprecated
*/</span>
<span class="hljs-meta">@Deprecated</span>
<span class="hljs-function">accessModifier returnType <span class="hljs-title">deprecatedMethodName</span><span class="hljs-params">()</span> </span>{ ... }</code></pre>

<h3>Example 1: @Deprecated annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-comment">/**
* <span class="hljs-doctag">@deprecated</span>
* This method is deprecated and has been replaced by newMethod()
*/</span>
<span class="hljs-meta">@Deprecated</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deprecatedMethod</span><span class="hljs-params">()</span> </span>{ 
System.out.println(<span class="hljs-string">"Deprecated method"</span>); 
} 

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
deprecatedMethod();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Deprecated method</samp></pre>

<hr>
<h3>2. @Override</h3>

<p>The <code>@Override</code> annotation specifies that a method of a subclass overrides the method of the superclass with the same method name, return type, and parameter list.</p>

<p>It is not mandatory to use <code>@Override</code> when overriding a method. However, if we use it, the compiler gives an error if something is wrong (such as wrong parameter type) while overriding the method.</p>

<h3>Example 2: @Override annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overridden method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am an animal"</span>);
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{

<span class="hljs-comment">// overriding method</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{
System.out.println(<span class="hljs-string">"I am a dog"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">()</span></span>{
display();
}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
Dog dog1 = <span class="hljs-keyword">new</span> Dog();
dog1.printMessage();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong> </p>

<pre><samp>I am a dog</samp></pre>

<p>In this example, by making an object <var>dog1</var> of <var>Dog</var> class, we can call its method <var>printMessage()</var> which then executes the <code>display()</code> statement.</p>

<p>Since <code>display()</code> is defined in both the classes, the method of subclass <var>Dog</var> overrides the method of superclass <var>Animal</var>. Hence, the <code>display()</code> of the subclass is called.</p>

<hr>
<h3>3. @SuppressWarnings</h3>

<p>As the name suggests, the <code>@SuppressWarnings</code> annotation instructs the compiler to suppress warnings that are generated while the program executes.</p>

<p>We can specify the type of warnings to be suppressed. The warnings that can be suppressed are compiler-specific but there are two categories of warnings: <strong>deprecation</strong> and <strong>unchecked</strong>.</p>

<p>To suppress a particular category of warning, we use:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"warningCategory"</span>)</code></pre>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"deprecated"</span>)</code></pre>

<p>To suppress multiple categories of warnings, we use:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@SuppressWarnings</span>({<span class="hljs-string">"warningCategory1"</span>, <span class="hljs-string">"warningCategory2"</span>})</code></pre>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@SuppressWarnings</span>({<span class="hljs-string">"deprecated"</span>, <span class="hljs-string">"unchecked"</span>})</code></pre>

<p>Category <code>deprecated</code> instructs the compiler to suppress warnings when we use a deprecated element.</p>

<p>Category <code>unchecked</code> instructs the compiler to suppress warnings when we use raw types.</p>

<p>And, undefined warnings are ignored. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"someundefinedwarning"</span>)</code></pre>

<h3>Example 3: @SuppressWarnings annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-meta">@Deprecated</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deprecatedMethod</span><span class="hljs-params">()</span> </span>{ 
System.out.println(<span class="hljs-string">"Deprecated method"</span>); 
} 

<span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"deprecated"</span>)
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
Main depObj = <span class="hljs-keyword">new</span> Main();
depObj. deprecatedMethod();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong> </p>

<pre><samp>Deprecated method</samp></pre>

<p>Here, <code>deprecatedMethod()</code> has been marked as deprecated and will give compiler warnings when used. By using the <code>@SuppressWarnings("deprecated")</code> annotation, we can avoid compiler warnings.</p>

<hr>
<h3>4. @SafeVarargs</h3>

<p>The <code>@SafeVarargs</code> annotation asserts that the annotated method or <a href="/java-programming/constructors">constructor</a> does not perform unsafe operations on its varargs (<a href="/java-programming/variables-literals">variable</a> number of arguments).</p>

<p>We can only use this annotation on methods or constructors that cannot be overridden. This is because the methods that override them might perform unsafe operations.</p>

<p>Before Java 9, we could use this annotation only on final or static methods because they cannot be overridden. We can now use this annotation for private methods as well.</p>

<h3>Example 4: @SafeVarargs annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayList</span><span class="hljs-params">(List&lt;String&gt;... lists)</span> </span>{
<span class="hljs-keyword">for</span> (List&lt;String&gt; list : lists) {
  System.out.println(list);
}
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
Main obj = <span class="hljs-keyword">new</span> Main();

List&lt;String&gt; universityList = Arrays.asList(<span class="hljs-string">"Tribhuvan University"</span>, <span class="hljs-string">"Kathmandu University"</span>);
obj.displayList(universityList);

List&lt;String&gt; programmingLanguages = Arrays.asList(<span class="hljs-string">"Java"</span>, <span class="hljs-string">"C"</span>);
obj.displayList(universityList, programmingLanguages);
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p><strong>Warnings</strong> </p>

<pre><samp>Type safety: Potential heap pollution via varargs parameter lists
Type safety: A generic array of List&lt;String&gt; is created for a varargs 
parameter</samp></pre>

<p><strong>Output</strong></p>

<pre><samp>Note: Main.java uses unchecked or unsafe operations.
[Tribhuvan University, Kathmandu University]
[Tribhuvan University, Kathmandu University]
[Java, C]</samp></pre>

<p>Here, <code>List</code> <code>... lists</code> specifies a variable-length argument of type <code>List</code>. This means that the method <code>displayList()</code> can have zero or more arguments.</p>

<p>The above program compiles without errors but gives warnings when <code>@SafeVarargs</code> annotation isn't used.</p>

<p>When we use <code>@SafeVarargs</code> annotation in the above example,</p>

<pre><samp>@SafeVarargs
private void displayList(List&lt;String&gt;... lists) { ... }</samp></pre>

<p>We get the same output but without any warnings. Unchecked warnings are also suppressed when we use this annotation.</p>

<hr>
<h3>5. @FunctionalInterface</h3>

<p>Java 8 first introduced this <code>@FunctionalInterface</code> annotation. This annotation indicates that the type declaration on which it is used is a functional interface. A functional interface can have only one abstract method.</p>

<h3>Example 5: @FunctionalInterface annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyFuncInterface</span></span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">firstMethod</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// this is an abstract method</span>
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>If we add another abstract method, let's say</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyFuncInterface</span></span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">firstMethod</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// this is an abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondMethod</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// this throws compile error</span>
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p>Now, when we run the program, we will get the following warning:</p>

<pre><samp>Unexpected @FunctionalInterface annotation
@FunctionalInterface ^ MyFuncInterface is not a functional interface
multiple non-overriding abstract methods found in interface MyFuncInterface</samp></pre>

<p>It is not mandatory to use <code>@FunctionalInterface</code> annotation. The compiler will consider any interface that meets the functional interface definition as a functional interface.</p>

<p>We use this annotation to make sure that the functional interface has only one abstract method.</p>

<p>However, it can have any number of default and static methods because they have an implementation.</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyFuncInterface</span></span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">firstMethod</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// this is an abstract method</span>
<span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondMethod</span><span class="hljs-params">()</span> </span>{ ... } 
<span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">thirdMethod</span><span class="hljs-params">()</span> </span>{ ... } 
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<hr>
<h2 id="custom">Custom Annotations</h2>

<p>It is also possible to create our own custom annotations.</p>

<p>Its syntax is:</p>

<pre><samp>[Access Specifier] @interface&lt;AnnotationName&gt; {         
DataType &lt;Method Name&gt;() [default value];
}</samp></pre>

<p>Here is what you need to know about custom annotation:</p>

<ul>
<li>Annotations can be created by using <code>@interface</code> followed by the annotation name.</li>
<li>The annotation can have elements that look like methods but they do not have an implementation.</li>
<li>The default value is optional. The parameters cannot have a null value.</li>
<li>The return type of the method can be <a href="/java-programming/variables-primitive-data-types">primitive</a>, <a href="/java-programming/enums">enum</a>, <a href="/java-programming/string">string</a>, class name or <a href="/java-programming/arrays">array</a> of these types.</li>
</ul>

<h3>Example 6: Custom annotation example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@interface</span> MyCustomAnnotation {
<span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> "<span class="hljs-keyword">default</span> value"</span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-meta">@MyCustomAnnotation</span>(value = <span class="hljs-string">"programiz"</span>)
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Test method 1"</span>);
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>{
Main obj = <span class="hljs-keyword">new</span> Main();
obj.method1();
}
}</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong> </p>

<pre><samp>Test method 1</samp></pre>

<hr>
<h2 id="meta">Meta Annotations</h2>

<p>Meta-annotations are annotations that are applied to other annotations.</p>

<h3>1. @Retention</h3>

<p>The <code>@Retention</code> annotation specifies the level up to which the annotation will be available.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Retention</span>(RetentionPolicy)</code></pre>

<p>There are 3 types of retention policies:</p>

<ul>
<li><strong>RetentionPolicy.SOURCE</strong> - The annotation is available only at the source level and is ignored by the compiler.</li>
<li><strong>RetentionPolicy.CLASS</strong> - The annotation is available to the compiler at compile-time, but is ignored by the Java Virtual Machine (JVM).</li>
<li><strong>RetentionPolicy.RUNTIME</strong> - The annotation is available to the JVM.</li>
</ul>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyCustomAnnotation{ ... }</code></pre>

<hr>
<h3>2. @Documented</h3>

<p>By default, custom annotations are not included in the <a href="https://www.oracle.com/technetwork/articles/java/index-137868.html">official Java documentation</a>. To include our annotation in the Javadoc documentation, we use the <code>@Documented</code> annotation.</p>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Documented</span>
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyCustomAnnotation{ ... }</code></pre>

<hr>
<h3>3. @Target</h3>

<p>We can restrict an annotation to be applied to specific targets using the <code>@Target</code> annotation.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Target</span>(ElementType)</code></pre>

<p>The <code>ElementType</code> can have one of the following types:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Element Type</th>
<th>Target</th>
</tr>
<tr>
<td><code>ElementType.ANNOTATION_TYPE</code></td>
<td>Annotation type</td>
</tr>
<tr>
<td><code>ElementType.CONSTRUCTOR</code> </td>
<td>Constructors</td>
</tr>
<tr>
<td><code>ElementType.FIELD</code> </td>
<td>Fields</td>
</tr>
<tr>
<td><code>ElementType.LOCAL_VARIABLE</code> </td>
<td>Local variables</td>
</tr>
<tr>
<td><code>ElementType.METHOD</code> </td>
<td>Methods</td>
</tr>
<tr>
<td><code>ElementType.PACKAGE</code> </td>
<td>Package</td>
</tr>
<tr>
<td><code>ElementType.PARAMETER</code> </td>
<td>Parameter</td>
</tr>
<tr>
<td><code>ElementType.TYPE</code> </td>
<td>Any element of class</td>
</tr>
</tbody></table>
</div>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Target</span>(ElementType.METHOD)
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyCustomAnnotation{ ... }</code></pre>

<p>In this example, we have restricted the use of this annotation to methods only.</p>

<p class="note-tip"><strong>Note:</strong> If the target type is not defined, the annotation can be used for any element.</p>

<hr>
<h3>4. @Inherited</h3>

<p>By default, an annotation type cannot be inherited from a superclass. However, if we need to inherit an annotation from a superclass to a subclass, we use the <code>@Inherited</code> annotation.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Inherited</span></code></pre>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Inherited</span>
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyCustomAnnotation { ... }

<span class="hljs-meta">@MyCustomAnnotation</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentClass</span></span>{ ... }

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ParentClass</span> </span>{ ... }</code></pre>

<hr>
<h3>5. @Repeatable</h3>

<p>An annotation that has been marked by <code>@Repeatable</code> can be applied multiple times to the same declaration.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@Repeatable</span>(Universities<span class="hljs-class">.<span class="hljs-keyword">class</span>)
<span class="hljs-title">public</span> @<span class="hljs-title">interface</span> <span class="hljs-title">University</span> </span>{
<span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;
}</code></pre>

<p>The value defined in the <code>@Repeatable</code> annotation is the container annotation. The container annotation has a variable <var>value</var> of array type of the above repeatable annotation. Here, <code>Universities</code> are the containing annotation type.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Universities {
University[] value();
}</code></pre>

<p>Now, the <code>@University</code> annotation can be used multiple times on the same declaration.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-meta">@University</span>(name = <span class="hljs-string">"TU"</span>)
<span class="hljs-meta">@University</span>(name = <span class="hljs-string">"KU"</span>)
<span class="hljs-keyword">private</span> String uniName;</code></pre>

<hr>
<p>If we need to retrieve the annotation data, we can use <a href="/java-programming/reflection">the Reflection API</a>.</p>

<p>To retrieve annotation values, we use <code>getAnnotationsByType()</code> or <code>getAnnotations()</code> method defined in the Reflection API.</p>

</div>
</section>
<section id="eight9">
<h1>Java Logging</h1>
<div class="content">
  <p id="introduction">Java allows us to create and capture log messages and files through the process of logging.</p>

<p>In Java, logging requires frameworks and APIs. Java has a built-in logging framework in the <code>java.util.logging</code> package.</p>

<p>We can also use third-party frameworks like Log4j, Logback, and many more for logging purposes.</p>

<hr>
<h2 id="components">Java Logging Components</h2>

<p>The figure below represents the core components and the flow of control of the Java Logging API (<code>java.util.logging</code>).</p>

<figure><img src="assets/images/java-logging.png" title="Java Logging" alt="The flow of control of Java Logging API" width="600" height="145">
<figcaption>Java Logging</figcaption></figure>
<h3 id="logger">1. Logger</h3>

<p>The <code>Logger</code> class provides methods for logging. We can instantiate objects from the <code>Logger</code> class and call its methods for logging purposes.</p>

<p>Let's take an example.</p>

<pre style="max-height: 600px;"><code class="java hljs">Logger logger = Logger.getLogger(<span class="hljs-string">"newLoggerName"</span>);</code></pre>

<p>The <code>getLogger()</code> method of the <code>Logger</code> class is used to find or create a new <code>Logger</code>. The <a href="/java-programming/string">string</a> argument defines the name of the logger.</p>

<p>Here, this creates a new <code>Logger</code> object or returns an existing <code>Logger</code> with the same name.</p>

<p>It is a convention to define a <code>Logger</code> after the current class using <code>class.getName()</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs">Logger logger = Logger.getLogger(MyClass<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>())</span>;</code></pre>

<p class="note-tip"><strong>Note:</strong> This method will throw <code>NullPointerException</code> if the passed name is <code>null</code>.</p>

<p>Each <code>Logger</code> has a level that determines the importance of the log message. There are 7 basic log levels:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Log Level (in descending order)</th>
<th>Use</th>
</tr>
<tr>
<td><strong>SEVERE</strong></td>
<td>serious failure</td>
</tr>
<tr>
<td><strong>WARNING</strong></td>
<td>warning message, a potential problem</td>
</tr>
<tr>
<td><strong>INFO</strong></td>
<td>general runtime information</td>
</tr>
<tr>
<td><strong>CONFIG</strong></td>
<td>configuration information</td>
</tr>
<tr>
<td><strong>FINE</strong></td>
<td>general developer information (tracing messages)</td>
</tr>
<tr>
<td><strong>FINER</strong></td>
<td>detailed developer information (tracing messages)</td>
</tr>
<tr>
<td><strong>FINEST</strong></td>
<td>highly detailed developer information(tracing messages)</td>
</tr>
<tr>
<td><strong>OFF</strong></td>
<td>turn off logging for all levels (capture nothing)</td>
</tr>
<tr>
<td><strong>ALL</strong></td>
<td>turn on logging for all levels (capture everything)</td>
</tr>
</tbody></table>
</div>

<p>Each log level has an integer value that determines their severity except for two special log levels <code>OFF</code> and <code>ALL</code>.</p>

<hr>
<h3 id="logging-message">Logging the message</h3>

<p>By default, the top three log levels are always logged. To set a different level, we can use the following code:</p>

<pre style="max-height: 600px;"><code class="java hljs">logger.setLevel(Level.LogLevel);

<span class="hljs-comment">// example</span>
logger.setLevel(Level.FINE);</code></pre>

<p>In this example, only level <code>FINE</code> and levels above it are set to be logged. All other log messages are dropped.</p>

<p>Now to log a message, we use the <code>log()</code> method.</p>

<pre style="max-height: 600px;"><code class="java hljs">logger.log(Level.LogLevel, <span class="hljs-string">"log message"</span>);

<span class="hljs-comment">// example</span>
logger.log(Level.INFO, <span class="hljs-string">"This is INFO log level message"</span>);</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>There are shorthand methods for logging at desired levels.</p>

<pre style="max-height: 600px;"><code class="java hljs">logger.info( <span class="hljs-string">"This is INFO log level message"</span>);
logger.warning( <span class="hljs-string">"This is WARNING log level message"</span>);</code></pre>

<p>All log requests that have passed the set log level are then forwarded to the <strong>LogRecord</strong>.</p>

<p class="note-tip"><strong>Note:</strong> If a logger's level is set to <code>null</code>, its level is inherited from its parent and so on up the tree.</p>

<hr>
<h3 id="filters">2. Filters</h3>

<p>A filter (if it is present) determines whether the <strong>LogRecord</strong> should be forwarded or not. As the name suggests, it filters the log messages according to specific criteria.</p>

<p>A <strong>LogRecord</strong> is only passed from the logger to the log handler and from the log handler to external systems if it passes the specified criteria.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// set a filter</span>
logger.setFilter(filter);

<span class="hljs-comment">// get a filter</span>
Filter filter = logger.getFilter();</code></pre>

<hr>
<h3 id="handlers">3. Handlers(Appenders)</h3>

<p>The log handler or the appenders receive the <strong>LogRecord</strong> and exports it to various targets.</p>

<p>Java SE provides 5 built-in handlers:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Handlers</th>
<th>Use</th>
</tr>
<tr>
<td><code>StreamHandler</code></td>
<td>writes to an <code>OutputStream</code></td>
</tr>
<tr>
<td><code>ConsoleHandler</code></td>
<td>writes to console</td>
</tr>
<tr>
<td><code>FileHandler</code></td>
<td>writes to file</td>
</tr>
<tr>
<td><code>SocketHandler</code></td>
<td>writes to remote TCP ports</td>
</tr>
<tr>
<td><code>MemoryHandler</code></td>
<td>writes to memory</td>
</tr>
</tbody></table>
</div>

<p>A handler can pass the <strong>LogRecord</strong> to a filter to again determine whether it can be forwarded to external systems or not.</p>

<p>To add a new handler, we use the following code:</p>

<pre style="max-height: 600px;"><code class="java hljs">logger.addHandler(handler);

<span class="hljs-comment">// example</span>
Handler handler = <span class="hljs-keyword">new</span> ConsoleHandler();
logger.addHandler(handler);</code></pre>

<p>To remove a handler, we use the following code:</p>

<pre style="max-height: 600px;"><code class="java hljs">logger.removeHandler(handler);

<span class="hljs-comment">// example</span>
Handler handler = <span class="hljs-keyword">new</span> ConsoleHandler();
logger.addHandler(handler);
logger.removeHandler(handler);</code></pre>

<p>A logger can have multiple handlers. To get all the handlers, we use the following code:</p>

<pre style="max-height: 600px;"><code class="java hljs">Handler[] handlers = logger.getHandlers();</code></pre>

<hr>
<h3 id="formatters">4. Formatters</h3>

<p>A handler can also use a <strong>Formatter</strong> to format the <strong>LogRecord</strong> object into a string before exporting it to external systems.</p>

<p>Java SE has two built-in <strong>Formatters</strong>:</p>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Formatters</th>
<th>Use</th>
</tr>
<tr>
<td><code>SimpleFormatter</code></td>
<td>formats <strong>LogRecord</strong> to string</td>
</tr>
<tr>
<td><code>XMLFormatter</code></td>
<td>formats <strong>LogRecord</strong> to XML form</td>
</tr>
</tbody></table>
</div>

<p>We can use the following code to format a handler:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// formats to string form</span>
handler.setFormatter(<span class="hljs-keyword">new</span> SimpleFormatter());

<span class="hljs-comment">// formats to XML form</span>
handler.setFormatter(<span class="hljs-keyword">new</span> XMLFormatter());</code></pre>

<hr>
<h2 id="logmanager">LogManager</h2>

<p>The <strong>LogManager</strong> object keeps track of the global logging information. It reads and maintains the logging configuration and the logger instances.</p>

<p>The log manager is a singleton, which means that only one instance of it is instantiated.</p>

<p>To obtain the log manager instance, we use the following code:</p>

<pre style="max-height: 600px;"><code class="java hljs">LogManager manager = <span class="hljs-keyword">new</span> LogManager();</code></pre>

<hr>
<h2 id="advantages">Advantages of Logging</h2>

<p>Here are some of the advantages of logging in Java.</p>

<ul>
<li>helps in monitoring the flow of the program</li>
<li>helps in capturing any errors that may occur</li>
<li>provides support for problem diagnosis and debugging</li>
</ul>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/methods">Java Methods</a></li>
</ul>

</div>
</section>
<section id="eight10">
<h1>Java Assertions</h1>
<div class="content">
  <p>Assertions in Java help&nbsp;to detect bugs by testing code we assume to be true.</p>

<p>An assertion is made using the <code>assert</code> keyword.</p>

<p>Its syntax is:</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">assert</span> condition;</code></pre>

<p>Here, <code>condition</code> is a boolean expression that we assume to be true when the program executes.</p>

<hr>
<h2 id="enable">Enabling Assertions</h2>

<p>By default, assertions are disabled and ignored at runtime.</p>

<p>To enable assertions, we use:</p>

<pre style="max-height: 600px;"><code class="java hljs">java -ea:arguments</code></pre>

<p>OR</p>

<pre style="max-height: 600px;"><code class="java hljs">java -enableassertions:arguments</code></pre>

<p>When assertions are enabled and the condition is <code>true</code>, the program executes normally.</p>

<p>But if the condition evaluates to <code>false</code> while assertions are enabled, JVM throws an <code>AssertionError</code>, and the program stops immediately.</p>

<hr>
<h3 id="example">Example 1: Java assertion</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
String[] weekends = {<span class="hljs-string">"Friday"</span>, <span class="hljs-string">"Saturday"</span>, <span class="hljs-string">"Sunday"</span>};
<span class="hljs-keyword">assert</span> weekends.length == <span class="hljs-number">2</span>;
System.out.println(<span class="hljs-string">"There are "</span> + weekends.length + <span class="hljs-string">"  weekends in a week"</span>);
}
}
</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>There are 3 weekends in a week
</samp></pre>

<p>We get the above output because this program has no compilation errors and by default, assertions are disabled.</p>

<p>After enabling assertions, we get the following output:</p>

<pre><samp>Exception in thread "main" java.lang.AssertionError
</samp></pre>

<hr>
<h2 id="another-form">Another form of assertion statement</h2>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">assert</span> condition : expression;
</code></pre>

<p>In this form of assertion statement, an expression is passed to the constructor of the <code>AssertionError</code> object. This expression has a value that is displayed as the error’s detail message if the condition is <code>false</code>.</p>

<p>The detailed message is used to capture and transmit the information of the assertion failure to help in debugging the problem.</p>

<hr>
<h3>Example 2: Java assertion with expression example</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{
String[] weekends = {<span class="hljs-string">"Friday"</span>, <span class="hljs-string">"Saturday"</span>, <span class="hljs-string">"Sunday"</span>};
<span class="hljs-keyword">assert</span> weekends.length==<span class="hljs-number">2</span> : <span class="hljs-string">"There are only 2 weekends in a week"</span>;
System.out.println(<span class="hljs-string">"There are "</span> + weekends.length + <span class="hljs-string">"  weekends in a week"</span>);
}
}

</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Exception in thread "main" java.lang.AssertionError: There are only 2 weekends in a week
</samp></pre>

<p>As we see from the above example, the expression is passed to the constructor of the <code>AssertionError</code> object. If our assumption is <code>false</code> and assertions are enabled, an exception is thrown with an appropriate message.</p>

<p>This message helps in diagnosing and fixing the error that caused the assertion to fail.</p>

<hr>
<h2 id="specific">Enabling assertion for specific classes and packages</h2>

<p>If we do not provide any arguments to the assertion command-line switches,</p>

<pre>java -ea
</pre>

<p>This enables assertions in all classes except system classes.</p>

<p>We can also enable assertion for specific classes and packages using arguments. The arguments that can be provided to these command-line switches are:</p>

<p><strong>Enable assertion in class names</strong></p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>To enable assertion for all classes of our program Main,</p>

<pre style="max-height: 600px;"><code class="java hljs">java -ea Main</code></pre>

<p>To enable only one class,</p>

<pre style="max-height: 600px;"><code class="java hljs">java -ea:AnimalClass Main</code></pre>

<p>This enables assertion in only the <code>AnimalClass</code> in the <code>Main</code> program.</p>

<p><strong>Enable assertion in package names</strong></p>

<p>To enable assertions for package <code>com.animal</code> and its sub-packages only,</p>

<pre style="max-height: 600px;"><code class="java hljs">java -ea:com.animal... Main</code></pre>

<p><strong>Enable assertion in unnamed packages</strong></p>

<p>To enable assertion in unnamed packages (when we don’t use a package statement) in the current working directory.</p>

<pre style="max-height: 600px;"><code class="java hljs">java -ea:... Main</code></pre>

<p><strong>Enable assertion in system classes</strong></p>

<p>To enable assertion in system classes, we use a different command-line switch:</p>

<pre style="max-height: 600px;"><code class="java hljs">java -esa:arguments </code></pre>

<p>OR</p>

<pre style="max-height: 600px;"><code class="java hljs">java -enablesystemassertions:arguments</code></pre>

<p>The arguments that can be provided to these switches are the same.</p>

<hr>
<h2 id="disable">Disabling Assertions</h2>

<p>To disable assertions, we use:</p>

<pre style="max-height: 600px;"><code class="java hljs">java -da arguments 
</code></pre>

<p>OR</p>

<pre style="max-height: 600px;"><code class="java hljs">java -disableassertions arguments
</code></pre>

<p>To disable assertion in system classes, we use:</p>

<pre style="max-height: 600px;"><code class="java hljs">java -dsa:arguments</code></pre>

<p>OR</p>

<pre style="max-height: 600px;"><code class="java hljs">java -disablesystemassertions:arguments</code></pre>

<p>The arguments that can be passed while disabling assertions are the same as while enabling them.</p>

<hr>
<h2>Advantages of Assertion</h2>

<ol>
<li>Quick and efficient for detecting and correcting bugs.</li>
<li>Assertion checks are done only during development and testing. They are automatically removed in the production code at runtime so that it won’t slow the execution of the program.</li>
<li>It helps remove boilerplate code and make code more readable.</li>
<li>Refactors and optimizes code with increased confidence that it functions correctly.</li>
</ol>

<hr>
<h2 id="use">When to use Assertions</h2>

<h3>1. Unreachable codes</h3>

<p>Unreachable codes are codes that do not execute when we try to run the program. Use assertions to make sure unreachable codes are actually unreachable.</p>

<p>Let’s take an example.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unreachableCodeMethod</span><span class="hljs-params">()</span> </span>{
System.out.println(<span class="hljs-string">"Reachable code"</span>);
<span class="hljs-keyword">return</span>;
<span class="hljs-comment">// Unreachable code</span>
System.out.println(<span class="hljs-string">"Unreachable code"</span>);
<span class="hljs-keyword">assert</span> <span class="hljs-keyword">false</span>;
}
</code></pre>

<p>Let’s take another example of a switch statement without a default case.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">switch</span> (dayOfWeek) {
<span class="hljs-keyword">case</span> <span class="hljs-string">"Sunday"</span>:
System.out.println(<span class="hljs-string">"It’s Sunday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Monday"</span>:
System.out.println(<span class="hljs-string">"It’s Monday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Tuesday"</span>:
System.out.println(<span class="hljs-string">"It’s Tuesday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Wednesday"</span>:
System.out.println(<span class="hljs-string">"It’s Wednesday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Thursday"</span>:
System.out.println(<span class="hljs-string">"It’s Thursday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Friday"</span>:
System.out.println(<span class="hljs-string">"It’s Friday!"</span>);
<span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">"Saturday"</span>:
System.out.println(<span class="hljs-string">"It’s Saturday!"</span>);
<span class="hljs-keyword">break</span>;
}
</code></pre>

<p>The above switch statement indicates that the days of the week can be only one of the above 7 values. Having no default case means that the programmer believes that one of these cases will always be executed.</p>

<p>However, there might be some cases that have not yet been considered where the assumption is actually false.</p>

<p>This assumption should be checked using an assertion to make sure that the default switch case is not reached.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">default</span>:
<span class="hljs-keyword">assert</span> <span class="hljs-keyword">false</span>: dayofWeek + <span class="hljs-string">" is invalid day"</span>;
</code></pre>

<p>If <var>dayOfWeek</var> has a value other than the valid days, an <code>AssertionError</code> is thrown.</p>

<hr>
<h3>2. Documenting assumptions</h3>

<p>To document their underlying assumptions, many programmers use comments. Let’s take an example.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {
...
} <span class="hljs-keyword">else</span> { <span class="hljs-comment">// We know (i % 2 == 1)</span>
...
}
</code></pre>

<p>Use assertions instead.</p>

<p>Comments can get out-of-date and out-of-sync as the program grows. However, we will be forced to update the <code>assert</code> statements; otherwise, they might fail for valid conditions too.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {
...
} <span class="hljs-keyword">else</span> {
<span class="hljs-keyword">assert</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> : i;
...
}
</code></pre>

<hr>
<h2 id="avoid">When not to use Assertions</h2>

<h3>1. Argument checking in public methods</h3>

<p>Arguments in public methods may be provided by the user.</p>

<p>So, if an assertion is used to check these arguments, the conditions may fail and result in <code>AssertionError</code>.</p>

<p>Instead of using assertions, let it result in the appropriate runtime exceptions and handle these exceptions.</p>

<hr>
<h3>2. To evaluate expressions that affect the program operation</h3>

<p>Do not call methods or evaluate exceptions that can later affect the program operation in assertion conditions.</p>

<p>Let us take an example of a list <var>weekdays</var> which contains the names of all the days in a week.</p>

<pre style="max-height: 600px;"><code class="java hljs">
ArrayList&lt;String&gt; weekdays = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="hljs-string">"Sunday"</span>, <span class="hljs-string">"Monday"</span>, <span class="hljs-string">"Tuesday"</span>, <span class="hljs-string">"Wednesday"</span>, <span class="hljs-string">"Thursday"</span>, <span class="hljs-string">"Friday"</span>, <span class="hljs-string">"Saturday"</span> ));

ArrayList&lt;String&gt; weekends= <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="hljs-string">"Sunday"</span>, <span class="hljs-string">"Saturday"</span> ));

<span class="hljs-keyword">assert</span> weekdays.removeAll(weekends);
</code></pre>

<p>Here, we are trying to remove elements <code>Saturday</code> and <code>Sunday</code> from the ArrayList <var>weekdays</var>.</p>

<p>If the assertion is enabled, the program works fine. However, if assertions are disabled, the elements from the list are not removed. This may result in program failure.</p>

<p>Instead, assign the result to a variable and then use that variable for assertion.</p>

<pre style="max-height: 600px;"><code class="java hljs">ArrayList&lt;String&gt; weekdays = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="hljs-string">"Sunday"</span>, <span class="hljs-string">"Monday"</span>, <span class="hljs-string">"Tuesday"</span>, <span class="hljs-string">"Wednesday"</span>, <span class="hljs-string">"Thursday"</span>, <span class="hljs-string">"Friday"</span>, <span class="hljs-string">"Saturday"</span> ));

ArrayList&lt;String&gt; weekends= <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="hljs-string">"Sunday"</span>, <span class="hljs-string">"Saturday"</span> ));

<span class="hljs-keyword">boolean</span> weekendsRemoved = weekdays.removeAll(weekends);
<span class="hljs-keyword">assert</span> weekendsRemoved;
</code></pre>

<p>In this way, we can ensure that all the <var>weekends</var> are removed from the <var>weekdays</var> regardless of the assertion being enabled or disabled. As a result, it does not affect the program operation in the future.</p>
</div>
</section>


<!-- nine menu sections -->
<section id="nine1">
<h1>Java File Class</h1>
<div class="content">
  <p id="introduction">The <code>File</code> class of the <code>java.io</code> package is used to perform various operations on files and directories.</p>

<p>There is another package named <code>java.nio</code> that can be used to work with files. However, in this tutorial, we will focus on the <code>java.io</code> package.</p>

<hr>
<h2 id="file-directory">File and Directory</h2>

<p>A file is a named location that can be used to store related information. For example,</p>

<p><strong>main.java</strong> is a Java file that contains information about the Java program.</p>

<p>A directory is a collection of files and subdirectories. A directory inside a directory is known as subdirectory.</p>

<hr>
<h2 id="create-object">Create a Java File Object</h2>

<p>To create an object of <code>File</code>, we need to import the <code>java.io.File</code> package first. Once we import the package, here is how we can create objects of file.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// creates an object of File using the path </span>
File file = <span class="hljs-keyword">new</span> File(String pathName);</code></pre>

<p>Here, we have created a file object named <var>file</var>. The object can be used to work with files and directories.</p>

<p class="note-tip"><strong>Note</strong>: In Java, creating a file object does not mean creating a file. Instead, a file object is an abstract representation of the file or directory pathname (specified in the parenthesis).</p>

<hr>
<h2 id="methods">Java File Operation Methods</h2>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Operation</th>
<th>Method</th>
<th>Package</th>
</tr>
<tr>
<td>To create file</td>
<td><code>createNewFile()</code></td>
<td><code>java.io.File</code></td>
</tr>
<tr>
<td>To read file</td>
<td><code>read()</code></td>
<td><code>java.io.FileReader</code></td>
</tr>
<tr>
<td>To write file</td>
<td><code>write()</code></td>
<td><code>java.io.FileWriter</code></td>
</tr>
<tr>
<td>To delete file</td>
<td><code>delete()</code></td>
<td><code>java.io.File</code></td>
</tr>
</tbody></table>
</div>

<hr>
<h3 id="create">Java create files</h3>

<p>To create a new file, we can use the <code>createNewFile()</code> method. It returns</p>

<ul>
<li><code>true</code> if a new file is created.</li>
<li><code>false</code> if the file already exists in the specified location.</li>
</ul>

<h3>Example: Create a new File</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// importing the File class</span>
<span class="hljs-keyword">import</span> java.io.File;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// create a file object for the current location</span>
File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"newFile.txt"</span>);

<span class="hljs-keyword">try</span> {

  <span class="hljs-comment">// trying to create a file based on the object</span>
  <span class="hljs-keyword">boolean</span> value = file.createNewFile();
  <span class="hljs-keyword">if</span> (value) {
    System.out.println(<span class="hljs-string">"The new file is created."</span>);
  }
  <span class="hljs-keyword">else</span> {
    System.out.println(<span class="hljs-string">"The file already exists."</span>);
  }
}
<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}</code></pre>

<p>In the above example, we have created a file object named <var>file</var>. The file object is linked with the specified file path.</p>

<pre style="max-height: 600px;"><code class="java hljs">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"newFile.txt"</span>);</code></pre>

<p>Here, we have used the file object to create the new file with the specified path.</p>

<p><strong>If newFile.txt doesn't exist in the current location</strong>, the file is created and this message is shown.</p>

<pre><samp>The new file is created.</samp></pre>

<p><strong>However, if newFile.txt already exists</strong>, we will see this message.</p>

<pre><samp>The file already exists.</samp></pre>

<hr>
<h3 id="read">Java read files</h3>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>To read data from the file, we can use subclasses of either <a href="/java-programming/inputstream">InputStream</a> or <a href="/java-programming/reader">Reader</a>.</p>

<h3>Example: Read a file using FileReader</h3>

<p>Suppose we have a file named <strong>input.txt</strong> with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file. </code></pre>

<p>Now let's try to read the file using Java <code>FileReader</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// importing the FileReader class</span>
<span class="hljs-keyword">import</span> java.io.FileReader;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];
<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a reader using the FileReader</span>
  FileReader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Reads characters</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data in the file:"</span>);
  System.out.println(array);

  <span class="hljs-comment">// Closes the reader</span>
  input.close();
}
<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data in the file:
This is a line of text inside the file.</samp></pre>

<p>In the above example, we have used created an object of FileReader named input. It is now linked with the <strong>input.txt</strong> file.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);</code></pre>

<p>To read the data from the <strong>input.txt</strong> file, we have used the read() method of <code>FileReader</code>.</p>

<hr>
<h3 id="write">Java write to files</h3>

<p>To write data to the file, we can use subclasses of either <a href="/java-programming/outputstream">OutputStream</a> or <a href="/java-programming/writer">Writer</a>.</p>

<h3>Example: Write to file using FileWriter</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// importing the FileWriter class</span>
<span class="hljs-keyword">import</span> java.io.FileWriter;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

 String data = <span class="hljs-string">"This is the data in the output file"</span>;
 <span class="hljs-keyword">try</span> {
   <span class="hljs-comment">// Creates a Writer using FileWriter</span>
   FileWriter output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);

   <span class="hljs-comment">// Writes string to the file</span>
   output.write(data);
   System.out.println(<span class="hljs-string">"Data is written to the file."</span>);

   <span class="hljs-comment">// Closes the writer</span>
   output.close();
 }
 <span class="hljs-keyword">catch</span> (Exception e) {
   e.getStackTrace();
 }
}
}</code></pre>

<p><strong>Output</strong> </p>

<pre><samp>Data is written to the file.</samp></pre>

<p>In the above example, we have created a writer using the <code>FileWriter</code> class. The writer is linked with the <strong>output.txt</strong> file.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileWriter output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);</code></pre>

<p>To write data to the file, we have used the <code>write()</code> method<code>.</code></p>

<p>Here when we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is the data in the output file.</code></pre>

<hr>
<h3 id="delete">Java delete files</h3>

<p>We can use the <code>delete()</code> method of the <var>File</var> class to delete the specified file or directory. It returns</p>

<ul>
<li><code>true</code> if the file is deleted.</li>
<li><code>false</code> if the file does not exist.</li>
</ul>

<p class="note-tip"><strong>Note</strong>: We can only delete empty directories.</p>

<h3>Example: Delete a file</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.File;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// creates a file object</span>
File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"file.txt"</span>);

<span class="hljs-comment">// deletes the file</span>
<span class="hljs-keyword">boolean</span> value = file.delete();
<span class="hljs-keyword">if</span>(value) {
  System.out.println(<span class="hljs-string">"The File is deleted."</span>);
}
<span class="hljs-keyword">else</span> {
  System.out.println(<span class="hljs-string">"The File is not deleted."</span>);
}
}
}</code></pre>

<p><strong>Output</strong></p>

<pre><samp>The File is deleted.</samp></pre>

<p>In the above example, we have created an object of File named file. The file now holds the information about the specified file.</p>

<pre style="max-height: 600px;"><code class="java hljs">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"file.txt"</span>);</code></pre>

<p>Here we have used the <code>delete()</code> method to delete the file specified by the object.</p>

<hr>
<p><strong>Also Read:</strong></p>

<ul>
<li><a href="/java-programming/examples/create-and-write-to-file">Java Program to Create File and Write to the File</a></li>
<li><a href="/java-programming/examples/delete-file">Java Program to Delete File in Java</a> </li>
</ul>

</div>
</section>
<section id="nine2">
<h1>Java Reader Class</h1>
<div class="content">
  <p id="introduction">The <code>Reader</code> class of the <code>java.io</code> package is an abstract superclass that represents a stream of characters.</p>

<p>Since <code>Reader</code> is an abstract class, it is not useful by itself. However, its subclasses can be used to read data.</p>

<hr>
<h2 id="subclasses">Subclasses of Reader</h2>

<p>In order to use the functionality of <code>Reader</code>, we can use its subclasses. Some of them are:</p>

<ul>
<li><a href="https://www.programiz.com/java-programming/bufferedreader" title="Java BufferedReader">BufferedReader</a></li>
<li><a href="https://www.programiz.com/java-programming/inputstreamreader" title="Java InputStreamReader">InputStreamReader</a></li>
<li><a href="https://www.programiz.com/java-programming/filereader" title="Java FileReader">FileReader</a></li>
<li><a href="https://www.programiz.com/java-programming/stringreader" title="Java StringReader">StringReader</a></li>
</ul>

<p>
</p><figure><img src="assets/images/java-reader-subclasses.png" title="Subclasses of Reader" alt="BufferedReader, InputStreamReader, and StringReader are subclasses of Reader" width="500" height="320">
<figcaption>Subclasses of Reader</figcaption></figure><p></p>

<p>We will learn about all these subclasses in the next tutorial.</p>

<hr>
<h2 id="create">Create a Reader</h2>

<p>In order to create a <code>Reader</code>, we must import the <code>java.io.Reader</code> package first. Once we import the package, here is how we can create the reader.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a Reader</span>
Reader input = <span class="hljs-keyword">new</span> FileReader();
</code></pre>

<p>Here, we have created a reader using the <code>FileReader</code> class. It is because <code>Reader</code> is an abstract class. Hence we cannot create an object of <code>Reader</code>.</p>

<p class="note-tip"><strong>Note</strong>: We can also create readers from other subclasses of <code>Reader</code>.</p>

<hr>
<h2 id="methods">Methods of Reader</h2>

<p>The <code>Reader</code> class provides different methods that are implemented by its subclasses. Here are some of the commonly used methods:</p>

<ul>
<li><code>ready()</code> - checks if the reader is ready to be read</li>
<li><code>read(char[] array)</code> - reads the characters from the stream and stores in the specified <a href="/java-programming/arrays" title="array">array</a></li>
<li><code>read(char[] array, int start, int length)</code> - reads the number of characters equal to <var>length</var> from the stream and stores in the specified array starting from the <var>start</var></li>
<li><code>mark()</code> - marks the position in the stream up to which data has been read</li>
<li><code>reset()</code> - returns the control to the point in the stream where the mark is set</li>
<li><code>skip()</code> - discards the specified number of characters from the stream</li>
</ul>

<hr>
<h2 id="example">Example: Reader Using FileReader</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here is how we can implement <code>Reader</code> using the <code>FileReader</code> class.</p>

<p>Suppose we have a file named <strong>input.txt</strong> with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<p>Let's try to read this file using <code>FileReader</code> (a subclass of <code>Reader</code>).</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.Reader;
<span class="hljs-keyword">import</span> java.io.FileReader;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

    <span class="hljs-comment">// Creates an array of character</span>
    <span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

    <span class="hljs-keyword">try</span> {
        <span class="hljs-comment">// Creates a reader using the FileReader</span>
        Reader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

        <span class="hljs-comment">// Checks if reader is ready </span>
        System.out.println(<span class="hljs-string">"Is there data in the stream?  "</span> + input.ready());

        <span class="hljs-comment">// Reads characters</span>
        input.read(array);
        System.out.println(<span class="hljs-string">"Data in the stream:"</span>);
        System.out.println(array);

        <span class="hljs-comment">// Closes the reader</span>
        input.close();
    }

    <span class="hljs-keyword">catch</span>(Exception e) {
        e.getStackTrace();
    }
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Is there data in the stream?  true
Data in the stream:
This is a line of text inside the file.
</samp></pre>

<p>In the above example, we have created a reader using the <code>FileReader</code> class. The reader is linked with the file <strong>input.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">Reader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);
</code></pre>

<p>To read data from the <strong>input.txt</strong> file, we have implemented these methods.</p>

<pre style="max-height: 600px;"><code class="java hljs">input.read();       <span class="hljs-comment">// to read data from the reader</span>
input.close();      <span class="hljs-comment">// to close the reader</span>
</code></pre>

<p>To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Reader.html" title="Java Reader (official Java documentation)">Java Reader (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine3">
<h1>Java Writer Class</h1>
<div class="content">
  <p id="introduction">The <code>Writer</code> class of the <code>java.io</code> package is an abstract superclass that represents a stream of characters.</p>

<p>Since <code>Writer</code> is an abstract class, it is not useful by itself. However, its subclasses can be used to write data.</p>

<hr>
<h2 id="subclasses">Subclasses of Writer</h2>

<p>In order to use the functionality of the <code>Writer</code>, we can use its subclasses. Some of them are:</p>

<ul>
<li><a href="https://www.programiz.com/java-programming/bufferedwriter">BufferedWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/outputstreamwriter">OutputStreamWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/filewriter">FileWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/stringwriter">StringWriter</a></li>
</ul>

<p></p><figure><img src="assets/images/java-writer-subclasses.png" title="Subclasses of Writer" alt="BufferedWriter, InputStreamWriter, and StringWriter are subclasses of Writer." width="500" height="320">
<figcaption>Subclasses of Writer</figcaption></figure><p></p>

<p>We will learn about all these subclasses in the next tutorial.</p>

<hr>
<h2 id="create">Create a Writer</h2>

<p>In order to create a <code>Writer</code>, we must import the <code>java.io.Writer</code> package first. Once we import the package, here is how we can create the writer.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a Writer</span>
Writer output = <span class="hljs-keyword">new</span> FileWriter();
</code></pre>

<p>Here, we have created a writer named output using the <code>FileWriter</code> class. It is because the <code>Writer</code> is an abstract class. Hence we cannot create an object of <code>Writer</code>.</p>

<p class="note-tip"><strong>Note</strong>: We can also create writers from other subclasses of the <code>Writer</code> class.</p>

<hr>
<h2 id="methods">Methods of Writer</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The <code>Writer</code> class provides different methods that are implemented by its subclasses. Here are some of the methods:</p>

<ul>
<li><code>write(char[] array)</code> - writes the characters from the specified <a href="/java-programming/arrays" title="array">array</a> to the output stream</li>
<li><code>write(String data)</code> - writes the specified string to the writer</li>
<li><code>append(char c)</code> - inserts the specified character to the current writer</li>
<li><code>flush()</code> - forces to write all the data present in the writer to the corresponding destination</li>
<li><code>close()</code> - closes the writer</li>
</ul>

<hr>
<h2 id="example">Example: Writer Using FileWriter</h2>

<p>Here is how we can implement the <code>Writer</code> using the <code>FileWriter</code> class.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileWriter;
<span class="hljs-keyword">import</span> java.io.Writer;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

    String data = <span class="hljs-string">"This is the data in the output file"</span>;

    <span class="hljs-keyword">try</span> {
        <span class="hljs-comment">// Creates a Writer using FileWriter</span>
        Writer output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);


        <span class="hljs-comment">// Writes string to the file</span>
        output.write(data);

        <span class="hljs-comment">// Closes the writer</span>
        output.close();
    }

    <span class="hljs-keyword">catch</span> (Exception e) {
        e.getStackTrace();
    }
}
}
</code></pre>

<p>In the above example, we have created a writer using the <code>FileWriter</code> class. The writer is linked with the file <strong>output.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">Writer output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);
</code></pre>

<p>To write data to the <strong>output.txt</strong> file, we have implemented these methods.</p>

<pre style="max-height: 600px;"><code class="java hljs">output.write();      <span class="hljs-comment">// To write data to the file</span>
output.close();      <span class="hljs-comment">// To close the writer</span>
</code></pre>

<p>When we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<p>To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html" title="Java Writer (official Java documentation)">Java Writer (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine4">
<h1>Java InputStreamReader Class</h1>
<div class="content">
  <p id="introduction">The <code>Writer</code> class of the <code>java.io</code> package is an abstract superclass that represents a stream of characters.</p>

<p>Since <code>Writer</code> is an abstract class, it is not useful by itself. However, its subclasses can be used to write data.</p>

<hr>
<h2 id="subclasses">Subclasses of Writer</h2>

<p>In order to use the functionality of the <code>Writer</code>, we can use its subclasses. Some of them are:</p>

<ul>
<li><a href="https://www.programiz.com/java-programming/bufferedwriter">BufferedWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/outputstreamwriter">OutputStreamWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/filewriter">FileWriter</a></li>
<li><a href="https://www.programiz.com/java-programming/stringwriter">StringWriter</a></li>
</ul>

<p></p><figure><img src="assets/images/java-writer-subclasses.png" title="Subclasses of Writer" alt="BufferedWriter, InputStreamWriter, and StringWriter are subclasses of Writer." width="500" height="320">
<figcaption>Subclasses of Writer</figcaption></figure><p></p>

<p>We will learn about all these subclasses in the next tutorial.</p>

<hr>
<h2 id="create">Create a Writer</h2>

<p>In order to create a <code>Writer</code>, we must import the <code>java.io.Writer</code> package first. Once we import the package, here is how we can create the writer.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a Writer</span>
Writer output = <span class="hljs-keyword">new</span> FileWriter();
</code></pre>

<p>Here, we have created a writer named output using the <code>FileWriter</code> class. It is because the <code>Writer</code> is an abstract class. Hence we cannot create an object of <code>Writer</code>.</p>

<p class="note-tip"><strong>Note</strong>: We can also create writers from other subclasses of the <code>Writer</code> class.</p>

<hr>
<h2 id="methods">Methods of Writer</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The <code>Writer</code> class provides different methods that are implemented by its subclasses. Here are some of the methods:</p>

<ul>
<li><code>write(char[] array)</code> - writes the characters from the specified <a href="/java-programming/arrays" title="array">array</a> to the output stream</li>
<li><code>write(String data)</code> - writes the specified string to the writer</li>
<li><code>append(char c)</code> - inserts the specified character to the current writer</li>
<li><code>flush()</code> - forces to write all the data present in the writer to the corresponding destination</li>
<li><code>close()</code> - closes the writer</li>
</ul>

<hr>
<h2 id="example">Example: Writer Using FileWriter</h2>

<p>Here is how we can implement the <code>Writer</code> using the <code>FileWriter</code> class.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileWriter;
<span class="hljs-keyword">import</span> java.io.Writer;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

    String data = <span class="hljs-string">"This is the data in the output file"</span>;

    <span class="hljs-keyword">try</span> {
        <span class="hljs-comment">// Creates a Writer using FileWriter</span>
        Writer output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);


        <span class="hljs-comment">// Writes string to the file</span>
        output.write(data);

        <span class="hljs-comment">// Closes the writer</span>
        output.close();
    }

    <span class="hljs-keyword">catch</span> (Exception e) {
        e.getStackTrace();
    }
}
}
</code></pre>

<p>In the above example, we have created a writer using the <code>FileWriter</code> class. The writer is linked with the file <strong>output.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">Writer output = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);
</code></pre>

<p>To write data to the <strong>output.txt</strong> file, we have implemented these methods.</p>

<pre style="max-height: 600px;"><code class="java hljs">output.write();      <span class="hljs-comment">// To write data to the file</span>
output.close();      <span class="hljs-comment">// To close the writer</span>
</code></pre>

<p>When we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<p>To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html" title="Java Writer (official Java documentation)">Java Writer (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine5">
<h1>Java OutputStreamWriter Class</h1>
<div class="content">
  <p id="introduction">The <code>OutputStreamWriter</code> class of the <code>java.io</code> package can be used to convert data in character form into data in bytes form.</p>

<p>It extends the abstract class <code>Writer</code>.</p>

<p></p><figure><img src="assets/images/java-%20outputstreamwriter.png" title="OutputStreamWriter extends the abstract class Writer" alt="OutputStreamWriter " width="380" height="220">
<figcaption>OutputStreamWriter</figcaption></figure><p></p>

<p>The <code>OutputStreamWriter</code> class works with other output streams. It is also known as a bridge between byte streams and character streams. This is because the <code>OutputStreamWriter</code> converts its characters into bytes.</p>

<p>For example, some characters require 2 bytes to be stored in the storage. To write such data we can use the output stream writer that converts the character into corresponding bytes and stores the bytes together.</p>

<hr>
<h2 id="create">Create an OutputStreamWriter</h2>

<p>In order to create an <code>OutputStreamWriter</code>, we must import the <code>java.io.OutputStreamWriter</code> package first. Once we import the package here is how we can create the output stream writer.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates an OutputStream</span>
FileOutputStream file = <span class="hljs-keyword">new</span> FileOutputStream(String path);

<span class="hljs-comment">// Creates an OutputStreamWriter</span>
OutputStreamWriter output = <span class="hljs-keyword">new</span> OutputStreamWriter(file);
</code></pre>

<p>In the above example, we have created an <code>OutputStreamWriter</code> named output along with the <code>FileOutputStream</code> named file.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, we are using the default character encoding to write characters to the output stream.</p>

<p>However, we can specify the type of character encoding (<strong>UTF8</strong> or <strong>UTF16</strong>) to be used to write data.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates an OutputStreamWriter specifying the character encoding</span>
OutputStreamWriter output = <span class="hljs-keyword">new</span> OutputStreamWriter(file, Charset cs);
</code></pre>

<p>Here, we have used the <code>Charset</code> class to specify the type of character encoding.</p>

<hr>
<h2>Methods of OutputStreamWriter</h2>

<p>The <code>OutputStreamWriter</code> class provides implementations for different methods present in the <code>Writer</code> class.</p>

<h3 id="write">write() Method</h3>

<ul>
<li><code>write()</code> - writes a single character to the writer</li>
<li><code>write(char[] array)</code> - writes the characters from the specified <a href="/java-programming/arrays" title="array">array</a> to the writer</li>
<li><code>write(String data)</code> - writes the specified <a href="/java-programming/string" title="string">string</a> to the writer</li>
</ul>

<hr>
<h3>Example: OutputStreamWriter to write data to a File</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileOutputStream;
<span class="hljs-keyword">import</span> java.io.OutputStreamWriter;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

String data = <span class="hljs-string">"This is a line of text inside the file."</span>;

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileOutputStream</span>
  FileOutputStream file = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"output.txt"</span>);

  <span class="hljs-comment">// Creates an OutputStreamWriter</span>
  OutputStreamWriter output = <span class="hljs-keyword">new</span> OutputStreamWriter(file);

  <span class="hljs-comment">// Writes string to the file</span>
  output.write(data);

  <span class="hljs-comment">// Closes the writer</span>
  output.close();
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p>In the above example, we have created an output stream reader using the file output stream. The output stream reader is linked with the <strong>output.txt</strong> file.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileOutputStream file = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"output.txt"</span>);
OutputStreamWriter output = <span class="hljs-keyword">new</span> OutputStreamWriter(file);
</code></pre>

<p>To write data to the file, we have used the <code>write()</code> method.</p>

<p>Here, when we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<hr>
<h2 id="getEncoding">getEncoding() Method</h2>

<p>The <code>getEncoding()</code> method can be used to get the type of encoding that is used to write data to the output stream. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;
<span class="hljs-keyword">import</span> java.nio.charset.Charset;
<span class="hljs-keyword">import</span> java.io.FileOutputStream;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates an output stream</span>
  FileOutputStream file = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"output.txt"</span>);

  <span class="hljs-comment">// Creates an output stream reader with default encoding</span>
  OutputStreamWriter output1 = <span class="hljs-keyword">new</span> OutputStreamWriter(file);

  <span class="hljs-comment">// Creates an output stream reader specifying the encoding</span>
  OutputStreamWriter output2 = <span class="hljs-keyword">new</span> OutputStreamWriter(file, Charset.forName(<span class="hljs-string">"UTF8"</span>));

  <span class="hljs-comment">// Returns the character encoding of the output stream</span>
  System.out.println(<span class="hljs-string">"Character encoding of output1: "</span> + output1.getEncoding());
  System.out.println(<span class="hljs-string">"Character encoding of output2: "</span> + output2.getEncoding());

  <span class="hljs-comment">// Closes the reader</span>
  output1.close();
  output2.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>The character encoding of output1: Cp1252
The character encoding of output2: UTF8
</samp></pre>

<p>In the above example, we have created 2 output stream writer named <var>output1</var> and <var>output2</var>.</p>

<ul>
<li><var>output1</var> does not specify the character encoding. Hence the <code>getEncoding()</code> method returns the default character encoding.</li>
<li><var>output2</var> specifies the character encoding, <strong>UTF8</strong>. Hence the <code>getEncoding()</code> method returns the specified character encoding.</li>
</ul>

<p class="note-tip"><strong>Note</strong>: We have used the <code>Charset.forName()</code> method to specify the type of character encoding. To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html" title="Java Charset (official Java documentation)">Java Charset (official Java documentation)</a>.</p>

<hr>
<h2>close() Method</h2>

<p>To close the output stream writer, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the writer to write the data.</p>

<hr>
<h2 id="other-methods">Other methods of OutputStreamWriter</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>flush()</code></td>
  <td>forces to write all the data present in the writer to the corresponding destination</td>
</tr>
<tr>
  <td><code>append()</code></td>
  <td>inserts the specified character to the current writer</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/io/OutputStreamWriter.html" title="Java OutputStreamWriter (official Java documentation)">Java OutputStreamWriter (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine6">
<h1>Java FileReader Class</h1>
<div class="content">
  <p id="introduction">The <code>FileReader</code> class of the <code>java.io</code> package can be used to read data (in characters) from files.</p>

<p>It extends the <a href="/java-programming/inputstreamreader" title="InputSreamReader">InputSreamReader</a> class.</p>

<p></p><figure><img src="assets/images/java-filereader.png" title="FileReader extends InputStreamReader" alt="FileReader extends the InputStreamReader and Reader classes" width="300" height="220">
<figcaption>FileReader extends InputStreamReader</figcaption></figure><p></p>

<p>Before you learn about <code>FileReader</code>, make sure you know about the <a href="/java-programming/file" title="Java File">Java File</a>.</p>

<hr>
<h2 id="create">Create a FileReader</h2>

<p>In order to create a file reader, we must import the <code>java.io.FileReader</code> package first. Once we import the package, here is how we can create the file reader.</p>

<p><strong>1. Using the name of the file </strong></p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(String name);
</code></pre>

<p>Here, we have created a file reader that will be linked to the file specified by the <var>name</var>.</p>

<p><strong>2. Using an object of the file </strong></p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(File fileObj);
</code></pre>

<p>Here, we have created a file reader that will be linked to the file specified by the object of the file.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, the data in the file are stored using some default character encoding.</p>

<p>However, since Java 11 we can specify the type of character encoding (<strong>UTF-8</strong> or <strong>UTF-16</strong>) in the file as well.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(String file, Charset cs);
</code></pre>

<p>Here, we have used the <code>Charset</code> class to specify the character encoding of the file reader.</p>

<hr>
<h2>Methods of FileReader</h2>

<p>The <code>FileReader</code> class provides implementations for different methods present in the <code>Reader</code> class.</p>

<h3 id="read">read() Method</h3>

<ul>
<li><code>read()</code> - reads a single character from the reader</li>
<li><code>read(char[] array)</code> - reads the characters from the reader and stores in the specified <a href="/java-programming/arrays" title="array">array</a></li>
<li><code>read(char[] array, int start, int length)</code> - reads the number of characters equal to <var>length</var> from the reader and stores in the specified array starting from the position <var>start</var></li>
</ul>

<p>For example, suppose we have a file named <strong>input.txt</strong> with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<p>Let's try to read the file using <code>FileReader</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// Creates an array of character</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a reader using the FileReader</span>
  FileReader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Reads characters</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data in the file: "</span>);
  System.out.println(array);

  <span class="hljs-comment">// Closes the reader</span>
  input.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data in the file:
This is a line of text inside the file.
</samp></pre>

<p>In the above example, we have created a file reader named <var>input</var>. The file reader is linked with the file <strong>input.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileInputStream input = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"input.txt"</span>);
</code></pre>

<p>To read data from the file, we have used the <code>read()</code> method.</p>

<p class="note-tip"><strong>Note</strong>: The file <strong>input.txt</strong> should be present in the current working directory.</p>

<hr>
<h2 id="getEncoding">getEncoding() Method</h2>

<p>The <code>getEncoding()</code> method can be used to get the type of encoding that is used to store data in the file. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;
<span class="hljs-keyword">import</span> java.nio.charset.Charset;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileReader with default encoding</span>
  FileReader input1 = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Creates a FileReader specifying the encoding</span>
  FileReader input2 = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>, Charset.forName(<span class="hljs-string">"UTF8"</span>));

  <span class="hljs-comment">// Returns the character encoding of the file reader</span>
  System.out.println(<span class="hljs-string">"Character encoding of input1: "</span> + input1.getEncoding());
  System.out.println(<span class="hljs-string">"Character encoding of input2: "</span> + input2.getEncoding());

  <span class="hljs-comment">// Closes the reader</span>
  input1.close();
  input2.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>The character encoding of input1: Cp1252
The character encoding of input2: UTF8
</samp></pre>

<p>In the above example, we have created 2 file reader named <var>input1</var> and <var>input2</var>.</p>

<ul>
<li><var>input1</var> does not specify the character encoding. Hence the <code>getEncoding()</code> method returns the default character encoding.</li>
<li><var>input2</var> specifies the character encoding, <strong>UTF8</strong>. Hence the <code>getEncoding()</code> method returns the specified character encoding.</li>
</ul>

<p class="note-tip"><strong>Note</strong>: We have used the <code>Charset.forName()</code> method to specify the type of character encoding. To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html" title="Java Charset (official Java documentation)">Java Charset (official Java documentation)</a>.</p>

<hr>
<h3>close() Method</h3>

<p>To close the file reader, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the reader to read the data.</p>

<hr>
<h2 id="other-methods">Other Methods of FileReader</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>ready()</code></td>
  <td>checks if the file reader is ready to be read</td>
</tr>
<tr>
  <td><code>mark()</code></td>
  <td>mark the position in file reader up to which data has been read</td>
</tr>
<tr>
  <td><code>reset()</code></td>
  <td>returns the control to the point in the reader where the mark was set</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileReader.html" title="Java FileReader (official Java documentation)">Java FileReader (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine7">
<h1>Java FileWriter Class</h1>
<div class="content">
  <p id="introduction">The <code>FileReader</code> class of the <code>java.io</code> package can be used to read data (in characters) from files.</p>

<p>It extends the <a href="/java-programming/inputstreamreader" title="InputSreamReader">InputSreamReader</a> class.</p>

<p></p><figure><img src="assets/images/java-filereader.png" title="FileReader extends InputStreamReader" alt="FileReader extends the InputStreamReader and Reader classes" width="300" height="220">
<figcaption>FileReader extends InputStreamReader</figcaption></figure><p></p>

<p>Before you learn about <code>FileReader</code>, make sure you know about the <a href="/java-programming/file" title="Java File">Java File</a>.</p>

<hr>
<h2 id="create">Create a FileReader</h2>

<p>In order to create a file reader, we must import the <code>java.io.FileReader</code> package first. Once we import the package, here is how we can create the file reader.</p>

<p><strong>1. Using the name of the file </strong></p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(String name);
</code></pre>

<p>Here, we have created a file reader that will be linked to the file specified by the <var>name</var>.</p>

<p><strong>2. Using an object of the file </strong></p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(File fileObj);
</code></pre>

<p>Here, we have created a file reader that will be linked to the file specified by the object of the file.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>In the above example, the data in the file are stored using some default character encoding.</p>

<p>However, since Java 11 we can specify the type of character encoding (<strong>UTF-8</strong> or <strong>UTF-16</strong>) in the file as well.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader input = <span class="hljs-keyword">new</span> FileReader(String file, Charset cs);
</code></pre>

<p>Here, we have used the <code>Charset</code> class to specify the character encoding of the file reader.</p>

<hr>
<h2>Methods of FileReader</h2>

<p>The <code>FileReader</code> class provides implementations for different methods present in the <code>Reader</code> class.</p>

<h3 id="read">read() Method</h3>

<ul>
<li><code>read()</code> - reads a single character from the reader</li>
<li><code>read(char[] array)</code> - reads the characters from the reader and stores in the specified <a href="/java-programming/arrays" title="array">array</a></li>
<li><code>read(char[] array, int start, int length)</code> - reads the number of characters equal to <var>length</var> from the reader and stores in the specified array starting from the position <var>start</var></li>
</ul>

<p>For example, suppose we have a file named <strong>input.txt</strong> with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<p>Let's try to read the file using <code>FileReader</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// Creates an array of character</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a reader using the FileReader</span>
  FileReader input = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Reads characters</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data in the file: "</span>);
  System.out.println(array);

  <span class="hljs-comment">// Closes the reader</span>
  input.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data in the file:
This is a line of text inside the file.
</samp></pre>

<p>In the above example, we have created a file reader named <var>input</var>. The file reader is linked with the file <strong>input.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileInputStream input = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"input.txt"</span>);
</code></pre>

<p>To read data from the file, we have used the <code>read()</code> method.</p>

<p class="note-tip"><strong>Note</strong>: The file <strong>input.txt</strong> should be present in the current working directory.</p>

<hr>
<h2 id="getEncoding">getEncoding() Method</h2>

<p>The <code>getEncoding()</code> method can be used to get the type of encoding that is used to store data in the file. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;
<span class="hljs-keyword">import</span> java.nio.charset.Charset;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileReader with default encoding</span>
  FileReader input1 = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Creates a FileReader specifying the encoding</span>
  FileReader input2 = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>, Charset.forName(<span class="hljs-string">"UTF8"</span>));

  <span class="hljs-comment">// Returns the character encoding of the file reader</span>
  System.out.println(<span class="hljs-string">"Character encoding of input1: "</span> + input1.getEncoding());
  System.out.println(<span class="hljs-string">"Character encoding of input2: "</span> + input2.getEncoding());

  <span class="hljs-comment">// Closes the reader</span>
  input1.close();
  input2.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>The character encoding of input1: Cp1252
The character encoding of input2: UTF8
</samp></pre>

<p>In the above example, we have created 2 file reader named <var>input1</var> and <var>input2</var>.</p>

<ul>
<li><var>input1</var> does not specify the character encoding. Hence the <code>getEncoding()</code> method returns the default character encoding.</li>
<li><var>input2</var> specifies the character encoding, <strong>UTF8</strong>. Hence the <code>getEncoding()</code> method returns the specified character encoding.</li>
</ul>

<p class="note-tip"><strong>Note</strong>: We have used the <code>Charset.forName()</code> method to specify the type of character encoding. To learn more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html" title="Java Charset (official Java documentation)">Java Charset (official Java documentation)</a>.</p>

<hr>
<h3>close() Method</h3>

<p>To close the file reader, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the reader to read the data.</p>

<hr>
<h2 id="other-methods">Other Methods of FileReader</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>ready()</code></td>
  <td>checks if the file reader is ready to be read</td>
</tr>
<tr>
  <td><code>mark()</code></td>
  <td>mark the position in file reader up to which data has been read</td>
</tr>
<tr>
  <td><code>reset()</code></td>
  <td>returns the control to the point in the reader where the mark was set</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileReader.html" title="Java FileReader (official Java documentation)">Java FileReader (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine8">
<h1>Java BufferedReader</h1>
<div class="content">
  <p id="introduction">The <code>BufferedReader</code> class of the <code>java.io</code> package can be used with other readers to read data (in characters) more efficiently.</p>

<p>It extends the abstract class <code>Reader</code>.</p>

<figure><img src="assets/images/java-bufferedreader.png" title="Java BufferedReader" alt="The BufferedReader class extends the Reader class in Java" width="380" height="220">
<figcaption>Java BufferedReader</figcaption></figure>
<hr>
<h2 id="working">Working of BufferedReader</h2>

<p>The <code>BufferedReader</code> maintains an internal <strong>buffer of 8192 characters</strong>.</p>

<p>During the read operation in <code>BufferedReader</code>, a chunk of characters is read from the disk and stored in the internal buffer. And from the internal buffer characters are read individually.</p>

<p>Hence, the number of communication to the disk is reduced. This is why reading characters is faster using <code>BufferedReader</code>.</p>

<hr>
<h2 id="create">Create a BufferedReader</h2>

<p>In order to create a <code>BufferedReader</code>, we must import the <code>java.io.BuferedReader</code> package first. Once we import the package, here is how we can create the reader.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a FileReader</span>
FileReader file = <span class="hljs-keyword">new</span> FileReader(String file);

<span class="hljs-comment">// Creates a BufferedReader</span>
BufferedReader buffer = <span class="hljs-keyword">new</span> BufferedReader(file);</code></pre>

<p>In the above example, we have created a <code>BufferedReader</code> named <var>buffer</var> with the <code>FileReader</code> named <var>file</var>.</p>

<p>Here, the internal buffer of the <code>BufferedReader</code> has the default size of 8192 characters. However, we can specify the size of the internal buffer as well.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a BufferdReader with specified size internal buffer</span>
BufferedReader buffer = <span class="hljs-keyword">new</span> BufferedReader(file, <span class="hljs-keyword">int</span> size);</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The buffer will help to read characters from the files more quickly.</p>

<hr>
<h2>Methods of BufferedReader</h2>

<p>The <code>BufferedReader</code> class provides implementations for different methods present in <code>Reader</code>.</p>

<h3 id="read">read() Method</h3>

<ul>
<li><code>read()</code> - reads a single character from the internal buffer of the reader</li>
<li><code>read(char[] array)</code> - reads the characters from the reader and stores in the specified <a href="/java-programming/arrays" title="array">array</a></li>
<li><code>read(char[] array, int start, int length)</code> - reads the number of characters equal to <var>length</var> from the reader and stores in the specified array starting from the position <var>start</var></li>
</ul>

<p>For example, suppose we have a file named <strong>input.txt</strong> with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.</code></pre>

<p>Let's try to read the file using <code>BufferedReader</code>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;
<span class="hljs-keyword">import</span> java.io.BufferedReader;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

<span class="hljs-comment">// Creates an array of character</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileReader</span>
  FileReader file = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Creates a BufferedReader</span>
  BufferedReader input = <span class="hljs-keyword">new</span> BufferedReader(file);

  <span class="hljs-comment">// Reads characters</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data in the file: "</span>);
  System.out.println(array);

  <span class="hljs-comment">// Closes the reader</span>
  input.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data in the file:
This is a line of text inside the file.</samp></pre>

<p>In the above example, we have created a buffered reader named <var>input</var>. The buffered reader is linked with the <strong>input.txt</strong> file.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileReader file = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);
BufferedReader input = <span class="hljs-keyword">new</span> BufferedReader(file);</code></pre>

<p>Here, we have used the <code>read()</code> method to read an array of characters from the internal buffer of the buffered reader.</p>

<hr>
<h3 id="skip">skip() Method</h3>

<p>To discard and skip the specified number of characters, we can use the <code>skip()</code> method. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileReader;
<span class="hljs-keyword">import</span> java.io.BufferedReader;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

<span class="hljs-comment">// Creates an array of characters</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Suppose, the input.txt file contains the following text</span>
  <span class="hljs-comment">// This is a line of text inside the file.</span>
  FileReader file = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"input.txt"</span>);

  <span class="hljs-comment">// Creates a BufferedReader</span>
  BufferedReader input = <span class="hljs-keyword">new</span> BufferedReader(file);

  <span class="hljs-comment">// Skips the 5 characters</span>
  input.skip(<span class="hljs-number">5</span>);

  <span class="hljs-comment">// Reads the characters</span>
  input.read(array);

  System.out.println(<span class="hljs-string">"Data after skipping 5 characters:"</span>);
  System.out.println(array);

  <span class="hljs-comment">// closes the reader</span>
  input.close();
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.getStackTrace();
}
}
}</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data after skipping 5 characters:
is a line of text inside the file.</samp></pre>

<p>In the above example, we have used the <code>skip()</code> method to skip 5 characters from the file reader. Hence, the characters <code>'T'</code>, <code>'h'</code>, <code>'i'</code>, <code>'s'</code> and <code>' '</code> are skipped from the original file.</p>

<hr>
<h3>close() Method</h3>

<p>To close the buffered reader, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the reader to read the data.</p>

<hr>
<h2 id="other-methods">Other Methods of BufferedReader</h2>

<div class="table-responsive">
<table border="0">
<tbody><tr>
<th>Method</th>
<th>Description</th>
</tr>
<tr>
<td><code>ready()</code></td>
<td>checks if the file reader is ready to be read</td>
</tr>
<tr>
<td><code>mark()</code></td>
<td>mark the position in reader up to which data has been read</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>returns the control to the point in the reader where the mark was set</td>
</tr>
</tbody></table>
</div>

<p>To learn more about <code>BufferedReader</code>, visit <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/BufferedReader.html">Java BufferedReader (official Java documentation)</a>.</p>  </div>
</section>
<section id="nine9">
<h1>Java BufferedWriter Class</h1>
<div class="content">
  <p id="introduction">The <code>BufferedWriter</code> class of the <code>java.io</code> package can be used with other writers to write data (in characters) more efficiently.</p>

<p>It extends the abstract class <code>Writer</code>.</p>

<p><figure><img alt="The BufferedWriter class is a subclass of Java Writer." height="187" src="assets/images/java-bufferedwriter.png" title="Java Buffered Writer" width="200"></figure></p>

<hr>
<h2 id="working">Working of BufferedWriter</h2>

<p>The <code>BufferedWriter</code> maintains an internal <strong>buffer of 8192 characters</strong>.</p>

<p>During the write operation, the characters are written to the internal buffer instead of the disk. Once the buffer is filled or the writer is closed, the whole characters in the buffer are written to the disk.</p>

<p>Hence, the number of communication to the disk is reduced. This is why writing characters is faster using <code>BufferedWriter</code>.</p>

<hr>
<h2 id="create">Create a BufferedWriter</h2>

<p>In order to create a <code>BufferedWriter</code>, we must import the <code>java.io.BufferedWriter</code> package first. Once we import the package here is how we can create the buffered writer.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a FileWriter</span>
FileWriter file = <span class="hljs-keyword">new</span> FileWriter(String name);

<span class="hljs-comment">// Creates a BufferedWriter</span>
BufferedWriter buffer = <span class="hljs-keyword">new</span> BufferedWriter(file);
</code></pre>

<p>In the above example, we have created a <code>BufferedWriter</code> named <var>buffer</var> with the <code>FileWriter</code> named <var>file</var>.</p>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>Here, the internal buffer of the <code>BufferedWriter</code> has the default size of 8192 characters. However, we can specify the size of the internal buffer as well.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a BufferedWriter with specified size internal buffer</span>
BufferedWriter buffer = <span class="hljs-keyword">new</span> BufferedWriter(file, <span class="hljs-keyword">int</span> size);
</code></pre>

<p>The buffer will help to write characters to the files more efficiently.</p>

<hr>
<h2>Methods of BufferedWriter</h2>

<p>The <code>BufferedWriter</code> class provides implementations for different methods present in <code>Writer</code>.</p>

<h3 id="write">write() Method</h3>

<ul>
<li><code>write()</code> - writes a single character to the internal buffer of the writer</li>
<li><code>write(char[] array)</code> - writes the characters from the specified <a href="/java-programming/arrays" title="array">array</a> to the writer</li>
<li><code>write(String data)</code> - writes the specified <a href="/java-programming/string" title="string">string</a> to the writer</li>
</ul>

<hr>
<h3>Example: BufferedWriter to write data to a File</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileWriter;
<span class="hljs-keyword">import</span> java.io.BufferedWriter;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>{

String data = <span class="hljs-string">"This is the data in the output file"</span>;

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileWriter</span>
  FileWriter file = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);

  <span class="hljs-comment">// Creates a BufferedWriter</span>
  BufferedWriter output = <span class="hljs-keyword">new</span> BufferedWriter(file);

  <span class="hljs-comment">// Writes the string to the file</span>
  output.write(data);

  <span class="hljs-comment">// Closes the writer</span>
  output.close();
}

<span class="hljs-keyword">catch</span> (Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p>In the above example, we have created a buffered writer named <var>output</var> along with <code>FileWriter</code>. The buffered writer is linked with the <strong>output.txt</strong> file.</p>

<pre style="max-height: 600px;"><code class="java hljs">FileWriter file = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);
BufferedWriter output = <span class="hljs-keyword">new</span> BufferedWriter(file);
</code></pre>

<p>To write data to the file, we have used the <code>write()</code> method.</p>

<p>Here when we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a line of text inside the file.
</code></pre>

<hr>
<h3 id="flush">flush() Method</h3>

<p>To clear the internal buffer, we can use the <code>flush()</code> method. This method forces the writer to write all data present in the buffer to the destination file.</p>

<p>For example, suppose we have an empty file named <strong>output.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.FileWriter;
<span class="hljs-keyword">import</span> java.io.BufferedWriter;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String data = <span class="hljs-string">"This is a demo of the flush method"</span>;

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Creates a FileWriter</span>
  FileWriter file = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">" flush.txt"</span>);

  <span class="hljs-comment">// Creates a BufferedWriter</span>
  BufferedWriter output = <span class="hljs-keyword">new</span> BufferedWriter(file);

  <span class="hljs-comment">// Writes data to the file</span>
  output.write(data);

  <span class="hljs-comment">// Flushes data to the destination</span>
  output.flush();
  System.out.println(<span class="hljs-string">"Data is flushed to the file."</span>);

  output.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre>

<p><strong>Output</strong></p>

<pre><samp>Data is flushed to the file.
</samp></pre>

<p>When we run the program, the file <strong>output.txt</strong> is filled with the text represented by the string <var>data</var>.</p>

<hr>
<h3>close() Method</h3>

<p>To close the buffered writer, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the writer to write the data.</p>

<hr>
<h2 id="other-methods">Other Methods of BufferedWriter</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>newLine() </code></td>
  <td>inserts a new line to the writer</td>
</tr>
<tr>
  <td><code>append() </code></td>
  <td>inserts the specified character to the current writer</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/BufferedWriter.html" title="Java BufferedWriter (official Java documentation)">Java BufferedWriter (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine10">
<h1>Java StringReader Class</h1>
<div class="content">
  <p id="introduction">The <code>StringReader</code> class of the <code>java.io</code> package can be used to read data (in characters) from <a href="/java-programming/string" title="strings">strings</a>.</p>

<p>It extends the abstract class <code>Reader</code>.</p>

<p><figure><img alt="The StringReader class is a subclass of Java Reader." height="208" src="assets/images/java-stringreader.png" title="Java String Reader" width="200"></figure></p>

<p class="note-tip"><strong>Note</strong>: In <code>StringReader</code>, the specified string acts as a source from where characters are read individually.</p>

<hr>
<h2 id="create">Create a StringReader</h2>

<p>In order to create a <code>StringReader</code>, we must import the <code>java.io.StringReader</code> package first. Once we import the package here is how we can create the string reader.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a StringReader</span>
StringReader input = <span class="hljs-keyword">new</span> StringReader(String data);
</code></pre>

<p>Here, we have created a <code>StringReader</code> that reads characters from the specified string named <var>data</var>.</p>

<hr>
<h2>Methods of StringReader</h2>

<p>The <code>StringReader</code> class provides implementations for different methods present in the <code>Reader</code> class.</p>

<h3 id="read">read() Method</h3>

<ul>
<li><code>read()</code> - reads a single character from the string reader</li>
<li><code>read(char[] array)</code> - reads the characters from the reader and stores in the specified <a href="/java-programming/arrays" title="array">array</a></li>
<li><code>read(char[] array, int start, int length)</code> - reads the number of characters equal to <var>length</var> from the reader and stores in the specified array starting from the position <var>start</var></li>
</ul>

<hr>
<h3>Example: Java StringReader</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.StringReader;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String data = <span class="hljs-string">"This is the text read from StringReader."</span>;

<span class="hljs-comment">// Create a character array</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Create a StringReader</span>
  StringReader input = <span class="hljs-keyword">new</span> StringReader(data);

  <span class="hljs-comment">//Use the read method</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data read from the string:"</span>);
  System.out.println(array);

  input.close();
}
<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Data read from the string:
This is the text read from StringReader.
</samp></pre>

<p>In the above example, we have created a string reader named <var>input</var>. The string reader is linked to the string <var>data</var>.</p>

<pre style="max-height: 600px;"><code class="java hljs">String data = <span class="hljs-string">"This is a text in the string."</span>;
StringReader input = <span class="hljs-keyword">new</span> StringReader(data);
</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>To read data from the string, we have used the <code>read()</code> method.</p>

<p>Here, the method reads an array of characters from the reader and stores in the specified array.</p>

<hr>
<h3 id="skip">skip() Method</h3>

<p>To discard and skip the specified number of characters, we can use the <code>skip()</code> method. For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.StringReader;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String data = <span class="hljs-string">"This is the text read from StringReader"</span>;
System.out.println(<span class="hljs-string">"Original data: "</span> + data);

<span class="hljs-comment">// Create a character array</span>
<span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Create a StringReader</span>
  StringReader input = <span class="hljs-keyword">new</span> StringReader(data);

  <span class="hljs-comment">// Use the skip() method</span>
  input.skip(<span class="hljs-number">5</span>);

  <span class="hljs-comment">//Use the read method</span>
  input.read(array);
  System.out.println(<span class="hljs-string">"Data after skipping 5 characters:"</span>);
  System.out.println(array);

  input.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Original data: This is the text read from the StringReader
Data after skipping 5 characters:
is the text read from the StringReader
</samp></pre>

<p>In the above example, we have used the <code>skip()</code> method to skip 5 characters from the string reader. Hence, the characters <code>'T'</code>, <code>'h'</code>, <code>'i'</code>, <code>'s'</code> and <code>' '</code> are skipped from the original string reader.</p>

<hr>
<h3>close() Method</h3>

<p>To close the string reader, we can use the <code>close()</code> method. Once the <code>close()</code> method is called, we cannot use the reader to read data from the string.</p>

<hr>
<h2 id="other-methods">Other Methods of StringReader</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>ready() </code></td>
  <td>checks if the string reader is ready to be read</td>
</tr>
<tr>
  <td><code>mark() </code></td>
  <td>marks the position in reader up to which data has been read</td>
</tr>
<tr>
  <td><code>reset() </code></td>
  <td>returns the control to the point in the reader where the mark was set</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/io/StringReader.html" title="Java StringReader (official Java documentation)">Java StringReader (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine11">
<h1>Java StringWriter Class</h1>
<div class="content">
  <p id="introduction">The <code>StringWriter</code> class of the <code>java.io</code> package can be used to write data (in characters) to the string buffer.</p>

<p>It extends the abstract class <code>Writer</code>.</p>

<p><figure><img alt="The StringWriter class is a subclass of Java Writer." height="208" src="assets/images/java-stringwriter.png" title="Java String Writer" width="200"></figure></p>

<p class="note-tip"><strong>Note</strong>: In Java, string buffer is considered as a mutable string. That is, we can modify the string buffer. To convert from string buffer to string, we can use the <code>toString()</code> method.</p>

<hr>
<h2 id="create">Create a StringWriter</h2>

<p>In order to create a <code>StringWriter</code>, we must import the <code>java.io.StringWriter</code> package first. Once we import the package here is how we can create the string writer.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a StringWriter</span>
StringWriter output = <span class="hljs-keyword">new</span> StringWriter();
</code></pre>

<p>Here, we have created the string writer with default string buffer capacity. However, we can specify the string buffer capacity as well.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a StringWriter with specified string buffer capacity</span>
StringWriter output = <span class="hljs-keyword">new</span> StringWriter(<span class="hljs-keyword">int</span> size);
</code></pre>

<p>Here, the <var>size</var> specifies the capacity of the string buffer.</p>

<hr>
<h2>Methods of StringWriter</h2>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">



<style>
#div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
#div-gpt-ad-Programizcom36796 {display: block;}
@media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
</style>

<div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
</div>

<div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
</div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
</div><div class="clearfix"></div><p>The <code>StringWriter</code> class provides implementations for different methods present in the <code>Writer</code> class.</p>

<h3 id="write">write() Method</h3>

<ul>
<li><code>write()</code> - writes a single character to the string writer</li>
<li><code>write(char[] array)</code> - writes the characters from the specified <a href="/java-programming/arrays" title="array">array</a> to the writer</li>
<li><code>write(String data)</code> - writes the specified <a href="/java-programming/string" title="string">string</a> to the writer</li>
</ul>

<hr>
<h3>Example: Java StringWriter</h3>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.StringWriter;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String data = <span class="hljs-string">"This is the text in the string."</span>;

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Create a StringWriter with default string buffer capacity</span>
  StringWriter output = <span class="hljs-keyword">new</span> StringWriter();

  <span class="hljs-comment">// Writes data to the string buffer</span>
  output.write(data);

  <span class="hljs-comment">// Prints the string writer</span>
  System.out.println(<span class="hljs-string">"Data in the StringWriter: "</span> + output);

  output.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>Data in the StringWriter: This is the text in the string.
</samp></pre>

<p>In the above example, we have created a string writer named <var>output</var>.</p>

<pre style="max-height: 600px;"><code class="java hljs">StringWriter output = <span class="hljs-keyword">new</span> StringWriter();
</code></pre>

<p>We then use the <code>write()</code> method to write the string data to the string buffer.</p>

<p class="note-tip"><strong>Note</strong>: We have used the <code>toString()</code> method to get the output data from string buffer in string form.</p>

<hr>
<h3 id="access-data">Access Data from StringBuffer</h3>

<ul>
<li><code>getBuffer()</code> - returns the data present in the string buffer</li>
<li><code>toString()</code> - returns the data present in the string buffer as a string</li>
</ul>

<p>For example,</p>

<div class="code-editor"><div class="code-editor__area"><div class="pre-code-wrapper"><div title="Click to copy" class="copy-code-button"></div><pre class="java-exec" style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.StringWriter;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

String data = <span class="hljs-string">"This is the original data"</span>;

<span class="hljs-keyword">try</span> {
  <span class="hljs-comment">// Create a StringWriter with default string buffer capacity</span>
  StringWriter output = <span class="hljs-keyword">new</span> StringWriter();

  <span class="hljs-comment">// Writes data to the string buffer</span>
  output.write(data);

  <span class="hljs-comment">// Returns the string buffer</span>
  StringBuffer stringBuffer = output.getBuffer();
  System.out.println(<span class="hljs-string">"StringBuffer: "</span> + stringBuffer);

  <span class="hljs-comment">// Returns the string buffer in string form</span>
  String string = output.toString();
  System.out.println(<span class="hljs-string">"String: "</span> + string);

  output.close();
}

<span class="hljs-keyword">catch</span>(Exception e) {
  e.getStackTrace();
}
}
}
</code></pre></div></div><div class="code-editor__action">
      <a href="/java-programming/online-compiler" class="btn btn--outlined-dark btn--smallest d-flex align-items-center run-code-button" target="_blank">
        Run Code >>
      </a>
    </div></div>

<p><strong>Output</strong></p>

<pre><samp>StringBuffer: This is the original data
String: This is the original data
</samp></pre>

<p>Here we have used the <code>getBuffer()</code> method to get the data present in the string buffer. And also the method <code>toString()</code> returns the data present in the string buffer as a string.</p>

<hr>
<h3>close() Method</h3>

<p>To close the string writer, we can use the <code>close()</code> method.</p>

<p>However, the <code>close()</code> method has no effect in the <code>StringWriter</code> class. We can use the methods of this class even after the <code>close()</code> method is called.</p>

<hr>
<h2 id="other-methods">Other methods of StringWriter</h2>

<div class="table-responsive"><table border="0">
<tbody>
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
<tr>
  <td><code>flush()</code></td>
  <td>forces to write all the data present in the writer to the string buffer</td>
</tr>
<tr>
  <td><code>append()</code></td>
  <td>inserts the specified character to the current writer</td>
</tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/io/StringWriter.html" title="Java StringWriter (official Java documentation)">Java StringWriter (official Java documentation)</a>.</p>
</div>
</section>
<section id="nine12">
  <h1>Java PrintWriter Class</h1>
  <div class="content">
    <p id="introduction">The <code>PrintWriter</code> class of the <code>java.io</code> package can be used to write output data in a commonly readable form (text).</p>

<p>It extends the abstract class <code>Writer</code>.</p>

<p><figure><img alt="The PrintWriter class is a subclass of Java Writer." height="221" src="assets/images/java-printwriter.png" title="Java Print Writer" width="200"></figure></p>

<hr>
<h2 id="working">Working of PrintWriter</h2>

<p>Unlike other writers, <code>PrintWriter</code> converts the <a href="/java-programming/variables-primitive-data-types" title="“primitive" data="">primitive data</a>(<code>int</code>, <code>float</code>, <code>char</code>, etc.) into the text format. It then writes that formatted data to the writer.</p>

<p>Also, the <code>PrintWriter</code> class does not throw any input/output exception. Instead, we need to use the <code>checkError()</code> method to find any error in it.</p>

<p class="note-tip"><strong>Note</strong>: The <code>PrintWriter</code> class also has a feature of auto flushing. This means it forces the writer to write all data to the destination if one of the <code>println()</code> or <code>printf()</code> methods is called.</p>

<hr>
<h2 id="create">Create a PrintWriter</h2>

<p>In order to create a print writer, we must import the <code>java.io.PrintWriter</code> package first. Once we import the package here is how we can create the print writer.</p>

<p><strong>1. Using other writers</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a FileWriter</span>
FileWriter file = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"output.txt"</span>);

<span class="hljs-comment">// Creates a PrintWriter</span>
PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(file, autoFlush);
</code></pre>

<p>Here,</p>

<ul>
<li>we have created a print writer that will write data to the file represented by the <code>FileWriter</code></li>
<li><var>autoFlush</var> is an optional parameter that specifies whether to perform auto flushing or not</li>
</ul>

<p><strong>2. Using other output streams</strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a FileOutputStream</span>
FileOutputStream file = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"output.txt"</span>);

<span class="hljs-comment">// Creates a PrintWriter</span>
PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(file, autoFlush);
</code></pre>

<p>Here,</p>

<ul>
<li>we have created a print writer that will write data to the file represented by the <code>FileOutputStream</code></li>
<li>the <var>autoFlush</var> is an optional parameter that specifies whether to perform auto flushing or not</li>
</ul>

<p><strong>3. Using filename </strong></p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a PrintWriter</span>
PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(String file, <span class="hljs-keyword">boolean</span> autoFlush);
</code></pre>

<p></p><div id="block-inject-1" class="block-inject block-inject-1">
  
  
  
  <style>
  #div-gpt-ad-Programizcom37046 {display:none; width: 728px; height: 90px; }
  #div-gpt-ad-Programizcom36796 {display: block;}
  @media(min-width: 992px) { #div-gpt-ad-Programizcom37046 {display: block;} #div-gpt-ad-Programizcom36796 {display: none;}}
  </style>
  
  <div id="div-gpt-ad-Programizcom37046" style="margin: 32px 0;">
  </div>
  
  <div class="pgAdWrapper" style="min-width: 336px; min-height: 280px; display: flex; justify-content: center; align-items: center;"><div id="div-gpt-ad-Programizcom36796" style="margin: 32px 0; min-height: 250px;">
  </div><div class="adSpinner ad-slot__label"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1000 1000" xml:space="preserve"><g class="az_logo_group"><g><g><g><g><g class="letter letter__1"><path fill="#979797" d="M136.3,652.2v53.5c0,7.9-5.7,13.7-13.7,13.7c-5.5,0-13.1-5.7-13.1-13.7c-11.7,9.8-24.8,13.7-40.4,13.7C30.6,719.3,0,690.7,0,652.2s30.6-69.1,69.1-69.1S136.3,613.7,136.3,652.2z M109.5,652.2c0-22.9-17.5-42.3-40.4-42.3s-42.3,19.4-42.3,42.3s19.4,40.4,42.3,40.4C92,692.5,109.5,675,109.5,652.2z"></path></g><g class="letter letter__2"><path fill="#979797" d="M264.6,705.9c0,7.4-6,13.7-13.4,13.7h-84.9c-5.2,0-10.1-3-12.3-7.6c-2.5-4.9-1.9-10.4,1.4-14.5l68.3-87.9h-57.9c-7.4,0-13.4-6.3-13.4-13.7s6-13.4,13.4-13.4h84.9c5.2,0,10.1,2.7,12.3,7.6c2.5,4.6,1.9,10.1-1.4,14.2l-68.3,88.2h57.9C258.6,692.5,264.6,698.5,264.6,705.9z"></path></g><g class="letter letter__3"><path fill="#979797" d="M408.2,651c0,7.4-6,13.4-13.7,13.4h-94.2c5.7,16.4,21,28.1,39.3,28.1c6.3,0,17.5-0.5,30.6-9c6.3-4.1,14.7-0.3,18,6.3c3.3,6.8-0.3,13.9-6.6,18c-18,12-31.9,11.7-42.1,11.7c-38,0-68.5-30.9-68.5-68.5c0-38,30.6-68.5,68.5-68.5C372.7,582.5,408.2,606.5,408.2,651z M300.4,637.3h78.9c-5.7-19.1-23.2-27.9-39.6-27.9C321.4,609.5,306.1,621.2,300.4,637.3z"></path></g><g class="letter letter__4"><path fill="#979797" d="M506.5,596.2c0,7.4-6,13.7-13.7,13.7c-22.9,0-41.5,18.6-41.5,41.5v54.9c0,7.4-6,13.7-13.4,13.7c-7.6,0-13.7-6.3-13.7-13.7v-54.9c0-38,30.9-68.5,68.5-68.5C500.5,582.8,506.5,588.8,506.5,596.2z"></path></g><g class="letter letter__5"><path fill="#979797" d="M522.6,706.2v-110c0-7.4,6-13.4,13.7-13.4c7.4,0,13.4,6,13.4,13.4v110c0,7.6-6,13.7-13.4,13.7C528.6,719.8,522.6,713.8,522.6,706.2z"></path><path fill="#979797" d="M526.7,563.3c-2.5-2.5-4.1-6-4.1-9.6c0-3.5,1.6-7.1,4.1-9.6s6-4.1,9.6-4.1s7.1,1.6,9.6,4.1s3.8,6,3.8,9.6  c0,3.5-1.4,7.1-3.8,9.6c-2.5,2.5-6,3.8-9.6,3.8S529.2,565.8,526.7,563.3z"></path></g><g class="letter letter__6"><path fill="#979797" d="M565.8,651c0-38,30.9-68.5,68.5-68.5c38,0,68.5,30.6,68.5,68.5c0,37.7-30.6,68.5-68.5,68.5C596.6,719.5,565.8,688.8,565.8,651z M592.8,651c0,22.7,18.6,41.5,41.5,41.5s41.5-18.8,41.5-41.5c0-22.9-18.6-41.5-41.5-41.5C611.4,609.5,592.8,628.2,592.8,651z"></path></g><g class="letter letter__7"><path fill="#979797" d="M856,651v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-22.9-18.6-41.5-41.5-41.5s-41.5,18.6-41.5,41.5v54.9c0,7.6-6,13.7-13.7,13.7c-7.4,0-13.4-6-13.4-13.7V651c0-38,30.9-68.5,68.5-68.5C825.2,582.5,856,613,856,651z"></path></g></g></g></g></g><g class="az__logo"><path fill="#979797" d="M607.4,302c0.7,0.9,1.2,1.5,1.6,2.1c8.1,12.3,13.2,25.8,14.5,40.5c1.1,12.7-0.8,25.1-5.7,36.9c-9.3,22.6-25.2,39.3-46.8,50.5c-16.7,8.7-34.5,12.3-53.2,11.1c-21.8-1.3-41.2-8.8-58.1-22.8c-1.5-1.2-2.9-2.5-4.3-3.9c-25.1-25.8-41.5-56.4-48.7-91.7c-2.5-12.3-3.6-24.6-3.6-37.1c0-17.1,0-34.2,0-51.3c0-10.5-1.8-20.7-5.8-30.5c-10.2-25.3-33-43.7-59.8-48.1c-43.8-7.2-81.7,21.4-90.4,60.9c-1.5,6.8-2,13.7-1.6,20.6c0.1,1.8,0.2,3.6,0.2,5.4c-0.9,0.4-1.1-0.2-1.4-0.6c-3.8-5.5-7.2-11.2-10.3-17.2c-7.7-15-12.7-30.9-15.1-47.7c-4.2-30.7,1.3-59.6,16.8-86.4c19.2-33.4,47.5-56,83.6-69c11.1-4,22.6-6.7,34.3-8c12.9-1.5,25.8-1.4,38.6,0.3c15.6,2.1,30.6,6.3,44.8,13.1c3.1,1.5,6.1,3.1,9,4.8c54.5,32.9,93.7,87.4,107.7,149.5c3,13.4,4.9,27,5.5,40.7c0.2,5.1,0.4,10.2,0.4,15.3c0.1,15.9,0.2,31.7,0.3,47.6c0,2.6,0.2,5.3,0.8,7.7c2.7,10.1,9.2,16.6,19.4,18.8c10.1,2.1,18.5-1.1,25.2-8.9c0.3-0.3,0.5-0.7,0.8-1.1C606.5,303.1,606.8,302.8,607.4,302z"></path><path fill="#979797" d="M365.6,4.1c-1,0.1-2,0.2-3,0.2c-8.3,0.2-16.5,0.9-24.7,2.2c-23,3.8-44.3,12-63.8,24.8c-22.5,14.7-40.7,33.5-53.9,56.9c-9,15.9-14.8,33-17.5,51.1c-2,13.2-2.3,26.4-0.7,39.6c4.6,37.7,20.6,69.8,46.9,97c10.2,10.5,21.6,19.3,34.1,26.9c10.7,6.5,22.3,10.4,34.9,11.3c20.9,1.5,39.6-4.3,56-17.4c3.4-2.7,6.6-5.5,9.9-8.3c0.6-0.5,1.2-0.9,1.8-1.3c0.8,0.5,0.6,1.1,0.6,1.6c0,3.7,0.1,7.5,0,11.2c-0.1,6.6,0.7,13.1,1.7,19.6c3.1,19.9,9.1,39,18,57.1c9.7,19.8,22.4,37.5,38,53.1c1.7,1.8,3.5,3.5,5.2,5.3c-8.2,7.3-40.8,22-61.5,27.7c-34.6,9.6-69.6,11.3-105,5.1c-36.7-6.5-70-20.9-99.7-43.3C90.9,355.7,63.6,234,111,134.6C135.2,84,173,46.7,223.5,22.4C271.8-0.8,324.4-4.2,365.6,4.1z"></path><path fill="#979797" d="M505.4,452c2.7,0.5,5.3,1,7.8,1.4c18.7,3.1,37.1,1.5,54.9-4.9c28.3-10.2,49.6-28.7,63.4-55.5c6.9-13.3,10.2-27.6,10.3-42.5c0.1-15-3.3-29.2-9.6-42.7c-6.4-13.5-15.3-25.1-26.2-35.2c-11.9-10.9-19.6-24.2-23.2-39.9c-9.6-41.7,15.3-82.2,55.4-93.4c27.6-7.7,56.9,0.2,76.8,20.3c25.8,26.1,42.4,57,49.7,93c2.3,11.4,3.6,22.8,3.4,34.4c-0.1,6.3,0,12.7-0.6,19c-1.5,15.2-4.7,30-9.9,44.3c-21,57.7-69.3,101.2-128.7,115.7c-18.1,4.4-36.4,6-55,4.8c-23-1.4-44.9-7.1-65.7-16.9C507.2,453.5,506,453.3,505.4,452z"></path></g></g></svg></div></div>
  </div><div class="clearfix"></div><p>Here,</p>

<ul>
<li>we have created a print writer that will write data to the specified file</li>
<li>the <var>autoFlush</var> is an optional boolean parameter that specifies whether to perform auto flushing or nor</li>
</ul>

<p class="note-tip"><strong>Note</strong>: In all the above cases, the <code>PrintWriter</code> writes data to the file using some default character encoding. However, we can specify the character encoding (<strong>UTF8</strong> or <strong>UTF16</strong>) as well.</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-comment">// Creates a PrintWriter using some character encoding</span>
PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(String file, <span class="hljs-keyword">boolean</span> autoFlush, Charset cs);
</code></pre>

<p>Here, we have used the <samp>Charset</samp> class to specify the character encoding. To know more, visit <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html" title="Java Charset (official Java documentation)">Java Charset (official Java documentation)</a>.</p>

<hr>
<h2>Methods of PrintWriter</h2>

<p>The <code>PrintWriter</code> class provides various methods that allow us to print data to the output.</p>

<h3 id="print">print() Method</h3>

<ul>
<li><code>print()</code> - prints the specified data to the writer</li>
<li><code>println()</code> - prints the data to the writer along with a new line character at the end</li>
</ul>

<p>For example,</p>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

  String data = <span class="hljs-string">"This is a text inside the file."</span>;

  <span class="hljs-keyword">try</span> {
    PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">"output.txt"</span>);

    output.print(data);
    output.close();
  }
  <span class="hljs-keyword">catch</span>(Exception e) {
    e.getStackTrace();
  }
}
}
</code></pre>

<p>In the above example, we have created a print writer named <var>output</var>. This print writer is linked with the file <strong>output.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">"output.txt"</span>);
</code></pre>

<p>To print data to the file, we have used the <code>print()</code> method.</p>

<p>Here when we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">This is a text inside the file.
</code></pre>

<hr>
<h3 id="printf">printf() Method</h3>

<p>The <code>printf()</code> method can be used to print the formatted string. It includes 2 parameters: formatted string and arguments. For example,</p>

<pre style="max-height: 600px;"><code class="java hljs">printf(<span class="hljs-string">"I am %d years old"</span>, <span class="hljs-number">25</span>);
</code></pre>

<p>Here,</p>

<ul>
<li>I am <code>%d</code> years old is a formatted string</li>
<li><code>%d</code> is integer data in the formatted string</li>
<li>25 is an argument</li>
</ul>

<p>The formatted string includes both text and data. And, the arguments replace the data inside the formatted string.</p>

<p>Hence the <strong>%d</strong> is replaced by <strong>25</strong>.</p>

<hr>
<h3>Example: printf() Method using PrintWriter</h3>

<pre style="max-height: 600px;"><code class="java hljs"><span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{

  <span class="hljs-keyword">try</span> {
    PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">"output.txt"</span>);

    <span class="hljs-keyword">int</span> age = <span class="hljs-number">25</span>;

    output.printf(<span class="hljs-string">"I am %d years old."</span>, age);
    output.close();
  }
  <span class="hljs-keyword">catch</span>(Exception e) {
    e.getStackTrace();
  }
}
}
</code></pre>

<p>In the above example, we have created a print writer named <var>output</var>. The print writer is linked with the file <strong>output.txt</strong>.</p>

<pre style="max-height: 600px;"><code class="java hljs">PrintWriter output = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">"output.txt"</span>);
</code></pre>

<p>To print the formatted text to the file, we have used the <code>printf()</code> method.</p>

<p>Here when we run the program, the <strong>output.txt</strong> file is filled with the following content.</p>

<pre style="max-height: 600px;"><code class="java hljs">I am <span class="hljs-number">25</span> years old.
</code></pre>

<hr>
<h2 id="other-methods">Other Methods Of PrintWriter</h2>

<div class="table-responsive"><table border="0">
<tbody>
  <tr>
    <th>Method</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>close()</code></td>
    <td>closes the print writer</td>
  </tr>
  <tr>
    <td><code>checkError()</code></td>
    <td>checks if there is an error in the writer and returns a boolean result</td>
  </tr>
  <tr>
    <td><code>append()</code></td>
    <td>appends the specified data to the writer</td>
  </tr>
</tbody>
</table></div>

<p>To learn more, visit <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html" title="Java PrintWriter (official Java documentation)">Java PrintWriter (official Java documentation)</a>.</p>
</div>
</section>
              </div>
              
          </div>
          <!-- End content section -->
        </div>
    </main>









    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="assets/js/language.js"></script>
  </body>
</html>